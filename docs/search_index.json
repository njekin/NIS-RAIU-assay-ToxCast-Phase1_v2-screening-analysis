[
["index.html", "Analysis of ToxCast phase I Chemical Screening Results from NIS RAIU Bioassay in R 1 Introduction", " Analysis of ToxCast phase I Chemical Screening Results from NIS RAIU Bioassay in R Jun Wang Nov 29, 2017 1 Introduction This report includes all the R code in the analysis of ToxCast Phase 1_v2 chemical library screening results from the NIS radioactive iodide uptake (RAIU) assay. With the aim of reproducible data analysis, this document was written in Rmarkdown format and generated by the knitr and bookdown packages. The results from this report have been published on the journal Enviornmental Science &amp; Technology. Citation link: Wang J., et al., 2018. High-Throughput Screening and Quantitative Chemical Ranking for Sodium Iodide Symporter (NIS) Inhibitors in ToxCast Phase I Chemical Library. Environmental Science &amp; Technology. DOI: 10.1021/acs.est.7b06145 Key R functions written in this analysis were compiled as an R package toxplot, and version 0.1.0 is available on CRAN. To get the most up-to-date source code please go to github. At the end of this document the source code of these functions used in this analysis is also provided. "],
["data-import-and-preprocessing.html", "2 Data Import and Preprocessing 2.1 Preprocess Single-Concentration Data 2.2 Import and Preprocess Multi-Concentration Data", " 2 Data Import and Preprocessing This section preprocess and import raw data (in separate excel .xlsx files provided by Dan Hallinger) into R. rm(list=ls()) library(plotly) library(tidyverse) library(ggthemes) library(stringr) library(readxl) library(devtools) load_all(&quot;./toxplot&quot;) session_info() ## setting value ## version R version 3.3.0 (2016-05-03) ## system x86_64, mingw32 ## ui RTerm ## language (EN) ## collate English_United States.1252 ## tz America/New_York ## date 2018-04-04 ## ## package * version date source ## assertthat 0.1 2013-12-06 CRAN (R 3.3.1) ## backports 1.0.5 2017-01-18 CRAN (R 3.3.2) ## bindr 0.1 2016-11-13 CRAN (R 3.3.3) ## bindrcpp 0.2 2017-06-17 CRAN (R 3.3.3) ## bookdown 0.3.20 2017-05-15 Github (rstudio/bookdown@86026cf) ## broom 0.4.1 2016-06-24 CRAN (R 3.3.1) ## chron 2.3-47 2015-06-24 CRAN (R 3.3.1) ## colorspace 1.3-0 2016-11-10 CRAN (R 3.3.2) ## commonmark 1.2 2017-03-01 CRAN (R 3.3.3) ## data.table 1.9.6 2015-09-19 CRAN (R 3.3.1) ## DBI 0.5-1 2016-09-10 CRAN (R 3.3.1) ## devtools * 1.12.0 2016-06-24 CRAN (R 3.3.1) ## digest 0.6.12 2017-01-27 CRAN (R 3.3.3) ## dplyr * 0.7.1 2017-06-22 CRAN (R 3.3.3) ## evaluate 0.10 2016-10-11 CRAN (R 3.3.2) ## forcats 0.2.0 2017-01-23 CRAN (R 3.3.3) ## foreign 0.8-67 2016-09-13 CRAN (R 3.3.2) ## ggplot2 * 2.2.1 2016-12-30 CRAN (R 3.3.3) ## ggthemes * 3.4.0 2017-02-19 CRAN (R 3.3.3) ## glue 1.1.1 2017-06-21 CRAN (R 3.3.3) ## gtable 0.2.0 2016-02-26 CRAN (R 3.3.1) ## haven 1.0.0 2016-09-23 CRAN (R 3.3.2) ## hms 0.3 2016-11-22 CRAN (R 3.3.2) ## htmltools 0.3.6 2017-04-28 CRAN (R 3.3.3) ## htmlwidgets 0.8 2016-11-09 CRAN (R 3.3.2) ## httr 1.2.1 2016-07-03 CRAN (R 3.3.1) ## jsonlite 1.4 2017-04-08 CRAN (R 3.3.3) ## knitr 1.15.20 2017-05-15 Github (yihui/knitr@f3a490b) ## lattice 0.20-34 2016-09-06 CRAN (R 3.3.2) ## lazyeval 0.2.0 2016-06-12 CRAN (R 3.3.1) ## lubridate 1.6.0 2016-09-13 CRAN (R 3.3.3) ## magrittr 1.5 2014-11-22 CRAN (R 3.3.1) ## memoise 1.0.0 2016-01-29 CRAN (R 3.3.1) ## mnormt 1.5-5 2016-10-15 CRAN (R 3.3.2) ## modelr 0.1.0 2016-08-31 CRAN (R 3.3.2) ## munsell 0.4.3 2016-02-13 CRAN (R 3.3.1) ## nlme 3.1-128 2016-05-10 CRAN (R 3.3.2) ## numDeriv 2016.8-1 2016-08-27 CRAN (R 3.3.1) ## pkgconfig 2.0.1 2017-03-21 CRAN (R 3.3.3) ## plotly * 4.7.0 2017-05-28 CRAN (R 3.3.3) ## plyr 1.8.4 2016-06-08 CRAN (R 3.3.1) ## psych 1.6.9 2016-09-17 CRAN (R 3.3.2) ## purrr * 0.2.2 2016-06-18 CRAN (R 3.3.1) ## R6 2.2.2 2017-06-17 CRAN (R 3.3.3) ## RColorBrewer 1.1-2 2014-12-07 CRAN (R 3.3.1) ## Rcpp 0.12.12 2017-07-15 CRAN (R 3.3.3) ## readr * 1.0.0 2016-08-03 CRAN (R 3.3.1) ## readxl * 0.1.1 2016-03-28 CRAN (R 3.3.1) ## reshape2 1.4.2 2016-10-22 CRAN (R 3.3.2) ## rlang 0.1.1 2017-05-18 CRAN (R 3.3.3) ## rmarkdown 1.6 2017-06-15 CRAN (R 3.3.3) ## RMySQL 0.10.9 2016-05-08 CRAN (R 3.3.1) ## roxygen2 6.0.1 2017-02-06 CRAN (R 3.3.3) ## rprojroot 1.2 2017-01-16 CRAN (R 3.3.2) ## RSQLite 1.0.0 2014-10-25 CRAN (R 3.3.1) ## rstudioapi 0.6 2016-06-27 CRAN (R 3.3.1) ## rvest 0.3.2 2016-06-17 CRAN (R 3.3.2) ## scales 0.4.1 2016-11-09 CRAN (R 3.3.2) ## stringi 1.1.2 2016-10-01 CRAN (R 3.3.1) ## stringr * 1.2.0 2017-02-18 CRAN (R 3.3.3) ## tcpl 1.2.2 2016-05-18 CRAN (R 3.3.3) ## tibble * 1.3.3 2017-05-28 CRAN (R 3.3.3) ## tidyr * 0.6.3 2017-05-15 CRAN (R 3.3.3) ## tidyverse * 1.1.1 2017-01-27 CRAN (R 3.3.3) ## toxplot * 0.1.0 &lt;NA&gt; local ## viridisLite 0.1.3 2016-03-12 CRAN (R 3.3.1) ## withr 1.0.2 2016-06-20 CRAN (R 3.3.1) ## xml2 1.0.0 2016-06-24 CRAN (R 3.3.2) ## yaml 2.1.14 2016-11-12 CRAN (R 3.3.2) 2.1 Preprocess Single-Concentration Data For single concentration data, Dan Hallinger has already gathered all the data and made the level0 compatible file already in .xlsx (see file ./raw data files/sc data from Dan.xlsx). Here just need to do some clean up to make the data ready for analysis. dt_sc &lt;- read_excel(&quot;./raw data files/sc data from Dan.xlsx&quot;, sheet = 2 ) # rename columns, following ToxCast Pipeline naming requirement. names(dt_sc) &lt;- c(&quot;pid&quot;, &quot;rowi&quot;, &quot;coli&quot;, &quot;spid&quot;, &quot;conc&quot;, &quot;unit&quot;, &quot;rep1&quot;, &quot;rep2&quot;, &quot;rep3&quot;) dt_sc %&lt;&gt;% gather(rep, rval, rep1:rep3) %&gt;% mutate(apid = paste(pid, rep, sep=&quot;_&quot;), wllq = 1L, acsn = &quot;raiu&quot;, assay = &quot;RAIU&quot;, srcf = &quot;NIS_ph1_v2_sc_lvl0_for_tcpl.csv&quot; ) %&gt;% dplyr::select(apid, everything()) # add well type d1 &lt;- dt_sc %&gt;% filter(grepl(&quot;^TP*&quot;, dt_sc$spid)) %&gt;% mutate(wllt = &quot;t&quot;) # clean up spid. non_t &lt;- dt_sc %&gt;% filter(!grepl(&quot;^TP*&quot;, dt_sc$spid)) %&gt;% separate(spid, c(&quot;delete&quot;, &quot;spid&quot;), sep = &quot; &quot;) %&gt;% dplyr::select(-delete) # continue assign well type d2 &lt;- non_t %&gt;% filter(spid == &quot;NaNO3&quot;) %&gt;% mutate(wllt = &quot;pr_ec80&quot;) d3 &lt;- non_t %&gt;% filter(spid == &quot;NaClO4&quot;) %&gt;% mutate(wllt = &quot;pr&quot;) d4 &lt;- non_t %&gt;% filter(spid == &quot;2,4-D&quot;) %&gt;% mutate(wllt = &quot;nrc&quot;) d5 &lt;- non_t %&gt;% filter(spid == &quot;DMSO&quot;) %&gt;% mutate(wllt = &quot;n&quot;) d6 &lt;- non_t %&gt;% filter(spid == &quot;NaSCN&quot;) %&gt;% mutate(wllt = &quot;pr_ec20&quot;) dt_sc_update &lt;- rbind(d1, d2, d3, d4, d5,d6) # convert concentration as numeric dt_sc_update$conc &lt;- as.numeric(dt_sc_update$conc) # convert row id from letters to numbers dt_sc_update$rowi &lt;- stringr::str_replace_all(dt_sc_update$rowi, c(&quot;A&quot; = &quot;1&quot;, &quot;B&quot; = &quot;2&quot;, &quot;C&quot; = &quot;3&quot;, &quot;D&quot; = &quot;4&quot;, &quot;E&quot; = &quot;5&quot;, &quot;F&quot; = &quot;6&quot;, &quot;G&quot; = &quot;7&quot;, &quot;H&quot; = &quot;8&quot;)) 2.1.1 Update Testing Concentration After we finished the testing, NCCT provided the actual aliquot_concentration in the chemical unblind file, which contains the actual CAS number, chemical name corresponding to each sample id. Some chemicals were not delivered as 20mM as we initially requested. Therefore it is necessary to update the level 0 file with the actual concentration. spid_chnm_table &lt;- read_excel(&quot;./raw data files/EPA_11700_EPA-SLaws_ph1v2_150ul_20170125_key.xlsx&quot;) spid_chnm_table &lt;- spid_chnm_table %&gt;% dplyr::select(EPA_Sample_ID, Aliquot_Concentration, CASRN, Preferred_Name) #rename the column title to be compatible with tcpl package. names(spid_chnm_table) &lt;- c(&quot;spid&quot;, &quot;aliquot_conc&quot;, &quot;casn&quot;, &quot;chnm&quot;) #calculate the actual cocnentration tested in single-con screening #the unit will be convert from mM to Molar spid_chnm_table &lt;- spid_chnm_table %&gt;% mutate(test_conc = aliquot_conc / 2E5) # update singel-con level0 data frame with updated concentration # the concentration unit is converted from uM to M. s1 &lt;- filter(dt_sc_update, wllt == &quot;t&quot;) s2 &lt;- filter(dt_sc_update, wllt != &quot;t&quot;) %&gt;% mutate(conc = conc / 1E6, unit = &quot;M&quot;) s1 &lt;- left_join(s1, dplyr::select(spid_chnm_table, spid, test_conc), by = &quot;spid&quot;) %&gt;% mutate(conc = test_conc, unit = &quot;M&quot;) %&gt;% dplyr::select(-test_conc) dt_sc_update &lt;- bind_rows(s2, s1) 2.1.2 Export Sinlge-Con level0 file with updated concentration # export to .csv file write_csv(dt_sc_update, &quot;./input data files/NIS_ph1_v2_sc_lvl0_for_tcpl.csv&quot; ) 2.2 Import and Preprocess Multi-Concentration Data For multi-concentration data, Dan Hallinger made the .xlsx file as the summary file of all three bioreplicates of RAIU/cytotox assay. Therefore to read the data into R, this code needs to specify the row and column position of the data on the excel sheet. To make the parsing succesful, make sure the excel data file (for example: “Combined RAIU Data (MC Plate 1).xlsx”, see fig below) contains three bioreplicates of the raw readings in 96well layout, with the first one range from Row 1-9, 2nd one from row 11-19, 3rd one from row 21-29. The 12 columns of the 96 well should start from Column C to N. On row 30, col D-M, list sample_id of the chemicals tested. on row 1,2,3 of col O, list MC or SC, Plate number, RAIU or Cytotox repsectively. The screenshot below shows how the data should be organized and labelled: summary file layout 2.2.1 Functions for data retrieving To properly read the raw data into R and ToxCast pipline compatible level 0 file, three functions named: read_parse, create_platemap, and annotate_data are written and described below. 2.2.1.1 read_parse function to read and parse excel data file This function takes the data file name as the argument, and returns a list object containing all assay info and readouts. Notice the row index used here is different from what is in the xlsx file, this is because when read_excel read in the file, blank rows are automatically deleted. Therefore row 28, instead of row 30 contains the correct sample_ID. read_parse &lt;- function(file_name) { d &lt;- read_excel(file_name, sheet =1, col_names = FALSE) d[] &lt;- lapply(d, as.character) #convert all columns to character rep1 &lt;- data.matrix(d[2:9,3:14]) rep2 &lt;- data.matrix(d[11:18,3:14]) rep3 &lt;- data.matrix(d[20:27,3:14]) assay_form &lt;-d[[1,15]] #MC or SC (multicon or single con) #plate 1,2,3 and go on, this is plate id Dan Hallinger assigned, #for the same plate id and assay_form, the plate layout is the same, #whether its raiu or cytotox. plate_id &lt;- d[[2,15]] #name of the assay, RAIU or Cytotox #assay_plate_id &lt;- paste(d[[1,15]], d[[2,15]], sep=&quot;_&quot;) #plate_id and assay_type should merge together, such as mc_plate1 assay_name &lt;- d[[3,15]] #this is the sample_id used to identify each tested chemical(blinded id) sample_id &lt;- d[28,4:13, drop=TRUE] if (is.na(assay_form)|| is.na(plate_id)||is.na(assay_name)||is.na(sample_id)) { stop(&quot;missing info for assay type, plate id or sample id!\\n Go back and check your .xlsx data file.&quot;) } else { results &lt;- list(assay_name, assay_form, plate_id, sample_id, rep1, rep2, rep3) } return(results) } 2.2.1.2 create_platemap function to create the assay plate map with correct sample_ID To add info for each well of the assay, I created a plate map .csv file with 3 blocks of 96-well layout providing: chemical names concentration (unit: M) well type(type of control or sample) The file for multi concetration assay is named mc_platemap.csv. To read single concentration results, similar plate map needs to be created and named as sc_platemap.csv The screen shot below is the mc_platemap used in NIS phase 1 data. Note that there are NAs in the name map (row 1-8), these positions will be filled with the correct sample_id in the processing. The code below is the function to parse the plate map (for mc or sc) csv file, and fill in the sample_id in to the right position in 96well layout. create_platemap &lt;- function(map_file, sample_id) { #check validity of sample_id if (!complete.cases(sample_id)) {stop(&quot;missing sample_id, check data file.&quot;)} #readin chemical name map name_map &lt;- read.table(map_file, sep=&quot;,&quot;, nrows=8, na.strings=&quot;na&quot;,stringsAsFactors=FALSE) #readin concentration map conc_map &lt;- read.table(map_file, sep=&quot;,&quot;, nrows=8, skip=8, na.strings=&quot;na&quot;) #readin welltype map welltype_map &lt;- read.table(map_file, sep=&quot;,&quot;, nrows=8, skip=16, na.strings=&quot;na&quot;, stringsAsFactors=FALSE) #fill in the NAs in name_map with the correct sample_id that was read from the assay data file(.xlsx) #The loop here fills NAs on the mc_platemap for (i in 1:10) { name_map[2:7,i+1] &lt;- rep(sample_id[[i]],6) i &lt;- i+1 } #put all three map together in a list. map &lt;- list(name_map, conc_map, welltype_map) return(map) } 2.2.1.3 annotate_data function to convert all data into tidy tabular form (level 0 compatible) This function requires 1) the proper assay map generated by create_platemap function, 2) parsed data generated by read_parse function. The function convert all the data into a dataframe with columns of: assay: name of the assay. cytotox or raiu apid: assay plate id. apid shoud be a unique id for each 96 well plate, can distinguish replicate, but doesn’t distinguish Cytotox and RAIU assay pid: plate id. used to represent mother plate id, doesn’t distinguish replicate,nor Cytotox or RAIU assay. spid: sample ID, the TP*** ID assigned by NCCT representing each tested chemical sample rowi: row position on 96 well plate coli: column position on 96 well plate repi: replicate id, (1 to 3) conc: molar concentration (M) wllt: well type. define whether a well contains a control or a test sample annotate_data &lt;- function(map, results) { name_map &lt;- map[[1]] conc_map &lt;- map[[2]] welltype_map &lt;- map[[3]] assay_name &lt;- results[[1]] assay_form &lt;- results[[2]] plate_id &lt;- results[[3]] #sample_id &lt;- results[[4]] rep1 &lt;- results[[5]] rep2 &lt;- results[[6]] rep3 &lt;- results[[7]] #initialize empty dataframe d &lt;- data.frame() #loop through 96 wells to gather all variables together for (i in 1:8) { for (j in 1:12) { t &lt;- data.frame(assay=assay_name, pid=plate_id, spid=name_map[[i,j]], rowi=i, coli=j, rep1=rep1[i,j], rep2=rep2[i,j], rep3=rep3[i,j], conc=conc_map[[i,j]], wllt=welltype_map[[i,j]] ) d &lt;- rbind(d,t) j &lt;- j+1 } i &lt;- i+1 } #sort rows by sample_id, then concentration d &lt;- arrange(d, spid, desc(conc)) return(d) } 2.2.2 Parse all excel data files and generate tidy table file_directory &lt;- &quot;./raw data files/phase 1 mc data/&quot; flist &lt;- list.files(file_directory) print(paste(&quot;A total of&quot;,length(flist), &quot;files in the directory to be read:&quot;)) ## [1] &quot;A total of 36 files in the directory to be read:&quot; print(flist) ## [1] &quot;Combined Cytotox Data (MC Plate 1).xlsx&quot; ## [2] &quot;Combined Cytotox Data (MC Plate 10).xlsx&quot; ## [3] &quot;Combined Cytotox Data (MC Plate 11).xlsx&quot; ## [4] &quot;Combined Cytotox Data (MC Plate 12).xlsx&quot; ## [5] &quot;Combined Cytotox Data (MC Plate 13).xlsx&quot; ## [6] &quot;Combined Cytotox Data (MC Plate 14).xlsx&quot; ## [7] &quot;Combined Cytotox Data (MC Plate 15).xlsx&quot; ## [8] &quot;Combined Cytotox Data (MC Plate 16).xlsx&quot; ## [9] &quot;Combined Cytotox Data (MC Plate 17).xlsx&quot; ## [10] &quot;Combined Cytotox Data (MC Plate 18).xlsx&quot; ## [11] &quot;Combined Cytotox Data (MC Plate 2).xlsx&quot; ## [12] &quot;Combined Cytotox Data (MC Plate 3).xlsx&quot; ## [13] &quot;Combined Cytotox Data (MC Plate 4).xlsx&quot; ## [14] &quot;Combined Cytotox Data (MC Plate 5).xlsx&quot; ## [15] &quot;Combined Cytotox Data (MC Plate 6).xlsx&quot; ## [16] &quot;Combined Cytotox Data (MC Plate 7).xlsx&quot; ## [17] &quot;Combined Cytotox Data (MC Plate 8).xlsx&quot; ## [18] &quot;Combined Cytotox Data (MC Plate 9).xlsx&quot; ## [19] &quot;Combined RAIU Data (MC Plate 1).xlsx&quot; ## [20] &quot;Combined RAIU Data (MC Plate 10).xlsx&quot; ## [21] &quot;Combined RAIU Data (MC Plate 11).xlsx&quot; ## [22] &quot;Combined RAIU Data (MC Plate 12).xlsx&quot; ## [23] &quot;Combined RAIU Data (MC Plate 13).xlsx&quot; ## [24] &quot;Combined RAIU Data (MC Plate 14).xlsx&quot; ## [25] &quot;Combined RAIU Data (MC Plate 15).xlsx&quot; ## [26] &quot;Combined RAIU Data (MC Plate 16).xlsx&quot; ## [27] &quot;Combined RAIU Data (MC Plate 17).xlsx&quot; ## [28] &quot;Combined RAIU Data (MC Plate 18).xlsx&quot; ## [29] &quot;Combined RAIU Data (MC Plate 2).xlsx&quot; ## [30] &quot;Combined RAIU Data (MC Plate 3).xlsx&quot; ## [31] &quot;Combined RAIU Data (MC Plate 4).xlsx&quot; ## [32] &quot;Combined RAIU Data (MC Plate 5).xlsx&quot; ## [33] &quot;Combined RAIU Data (MC Plate 6).xlsx&quot; ## [34] &quot;Combined RAIU Data (MC Plate 7).xlsx&quot; ## [35] &quot;Combined RAIU Data (MC Plate 8).xlsx&quot; ## [36] &quot;Combined RAIU Data (MC Plate 9).xlsx&quot; #combine directory and file name fl &lt;- paste(file_directory, flist, sep=&quot;&quot;) #name of plate map file map_file &lt;- &quot;./raw data files/mc_platemap.csv&quot; # read all files df_mc &lt;- data.frame() for (i in 1:length(fl)) { results &lt;- read_parse(fl[[i]]) print(paste(&quot;Reading file&quot;, i, &quot;:&quot;, flist[[i]])) #print(sapply(results[1:4], paste, sep=&quot; &quot;)) sample_id &lt;- results[[4]] map &lt;- create_platemap(map_file, sample_id) temp &lt;- annotate_data(map, results) df_mc &lt;- rbind(df_mc, temp) i &lt;- i+1 } ## [1] &quot;Reading file 1 : Combined Cytotox Data (MC Plate 1).xlsx&quot; ## [1] &quot;Reading file 2 : Combined Cytotox Data (MC Plate 10).xlsx&quot; ## [1] &quot;Reading file 3 : Combined Cytotox Data (MC Plate 11).xlsx&quot; ## [1] &quot;Reading file 4 : Combined Cytotox Data (MC Plate 12).xlsx&quot; ## [1] &quot;Reading file 5 : Combined Cytotox Data (MC Plate 13).xlsx&quot; ## [1] &quot;Reading file 6 : Combined Cytotox Data (MC Plate 14).xlsx&quot; ## [1] &quot;Reading file 7 : Combined Cytotox Data (MC Plate 15).xlsx&quot; ## [1] &quot;Reading file 8 : Combined Cytotox Data (MC Plate 16).xlsx&quot; ## [1] &quot;Reading file 9 : Combined Cytotox Data (MC Plate 17).xlsx&quot; ## [1] &quot;Reading file 10 : Combined Cytotox Data (MC Plate 18).xlsx&quot; ## [1] &quot;Reading file 11 : Combined Cytotox Data (MC Plate 2).xlsx&quot; ## [1] &quot;Reading file 12 : Combined Cytotox Data (MC Plate 3).xlsx&quot; ## [1] &quot;Reading file 13 : Combined Cytotox Data (MC Plate 4).xlsx&quot; ## [1] &quot;Reading file 14 : Combined Cytotox Data (MC Plate 5).xlsx&quot; ## [1] &quot;Reading file 15 : Combined Cytotox Data (MC Plate 6).xlsx&quot; ## [1] &quot;Reading file 16 : Combined Cytotox Data (MC Plate 7).xlsx&quot; ## [1] &quot;Reading file 17 : Combined Cytotox Data (MC Plate 8).xlsx&quot; ## [1] &quot;Reading file 18 : Combined Cytotox Data (MC Plate 9).xlsx&quot; ## [1] &quot;Reading file 19 : Combined RAIU Data (MC Plate 1).xlsx&quot; ## [1] &quot;Reading file 20 : Combined RAIU Data (MC Plate 10).xlsx&quot; ## [1] &quot;Reading file 21 : Combined RAIU Data (MC Plate 11).xlsx&quot; ## [1] &quot;Reading file 22 : Combined RAIU Data (MC Plate 12).xlsx&quot; ## [1] &quot;Reading file 23 : Combined RAIU Data (MC Plate 13).xlsx&quot; ## [1] &quot;Reading file 24 : Combined RAIU Data (MC Plate 14).xlsx&quot; ## [1] &quot;Reading file 25 : Combined RAIU Data (MC Plate 15).xlsx&quot; ## [1] &quot;Reading file 26 : Combined RAIU Data (MC Plate 16).xlsx&quot; ## [1] &quot;Reading file 27 : Combined RAIU Data (MC Plate 17).xlsx&quot; ## [1] &quot;Reading file 28 : Combined RAIU Data (MC Plate 18).xlsx&quot; ## [1] &quot;Reading file 29 : Combined RAIU Data (MC Plate 2).xlsx&quot; ## [1] &quot;Reading file 30 : Combined RAIU Data (MC Plate 3).xlsx&quot; ## [1] &quot;Reading file 31 : Combined RAIU Data (MC Plate 4).xlsx&quot; ## [1] &quot;Reading file 32 : Combined RAIU Data (MC Plate 5).xlsx&quot; ## [1] &quot;Reading file 33 : Combined RAIU Data (MC Plate 6).xlsx&quot; ## [1] &quot;Reading file 34 : Combined RAIU Data (MC Plate 7).xlsx&quot; ## [1] &quot;Reading file 35 : Combined RAIU Data (MC Plate 8).xlsx&quot; ## [1] &quot;Reading file 36 : Combined RAIU Data (MC Plate 9).xlsx&quot; # add rep, rval, acsn, wllq, unit, apid columns df_mc &lt;- df_mc %&gt;% mutate(acsn = stringr::str_to_lower(assay), wllq = 1L, unit = &#39;M&#39;) %&gt;% gather(rep, rval, rep1:rep3) %&gt;% mutate(apid = paste(pid, rep, sep = &quot;_&quot;)) 2.2.3 Update Testing Concentrations After we finished the testing, NCCT provided the actual aliquot_concentration in the chemical unblind file, which contains the actual CAS number, chemical name corresponding to each sample id. Some chemicals were not delivered as 20mM as we initially requested due to solubility limit. Therefore it is necessary to update the level 0 file with the actual concentration. mc_conc_ratio &lt;- spid_chnm_table %&gt;% mutate(conc_ratio = aliquot_conc/2E5/1E-4) %&gt;% dplyr::select(spid, conc_ratio) # update cyto data mc_t_cyto &lt;- df_mc %&gt;% filter(assay == &quot;Cytotox&quot;) %&gt;% filter(wllt == &quot;t&quot;) mc_non_t_cyto &lt;- df_mc %&gt;% filter(assay == &quot;Cytotox&quot;) %&gt;% filter(wllt != &quot;t&quot;) mc_t_cyto_update &lt;- data.frame() for (id in unique(mc_t_cyto$spid)) { d_spid &lt;- filter(mc_t_cyto, spid == id) ratio &lt;- filter(mc_conc_ratio, spid == id)[[2]] d_spid &lt;- d_spid %&gt;% mutate(conc = conc * ratio) mc_t_cyto_update &lt;- bind_rows(mc_t_cyto_update, d_spid) } # Here is the udpated mc_lvl0 data table. mc_lvl0_cyto_update &lt;- bind_rows(mc_non_t_cyto, mc_t_cyto_update) #update raiu data mc_t_raiu &lt;- df_mc %&gt;% filter(assay == &quot;RAIU&quot;) %&gt;% filter(wllt == &quot;t&quot;) mc_non_t_raiu &lt;- df_mc %&gt;% filter(assay == &quot;RAIU&quot;) %&gt;% filter(wllt != &quot;t&quot;) mc_t_raiu_update &lt;- data.frame() for (id in unique(mc_t_raiu$spid)) { #print(id) d_spid &lt;- filter(mc_t_raiu, spid == id) ratio &lt;- filter(mc_conc_ratio, spid == id)[[2]] d_spid &lt;- d_spid %&gt;% mutate(conc = conc * ratio) mc_t_raiu_update &lt;- bind_rows(mc_t_raiu_update, d_spid) } #Here is the udpated mc_lvl0 data table. mc_lvl0_raiu_update &lt;- bind_rows(mc_non_t_raiu, mc_t_raiu_update) 2.2.4 Export Multi-conc data to file mc_lvl0_raiu_update %&gt;% mutate(srcf = &quot;NIS_ph1_v2_mc_lvl0_for_tcpl_raiu.csv&quot;) %&gt;% write_csv(&quot;./input data files/NIS_ph1_v2_mc_lvl0_for_tcpl_raiu.csv&quot;) mc_lvl0_cyto_update %&gt;% mutate(srcf = &quot;NIS_ph1_v2_mc_lvl0_for_tcpl_cytotox.csv&quot;) %&gt;% write_csv(&quot;./input data files/NIS_ph1_v2_mc_lvl0_for_tcpl_cytotox.csv&quot;) "],
["code-test.html", "3 Code Test", " 3 Code Test To ensure all the funcitons written for the analysis works fine, a small data set (included in the ‘toxplot’ package) was used for testing purposes.This testing was done before analyzing the full dataset. Below are the results by analyzing this small demo dataset. library(tidyverse) library(devtools) load_all(&quot;./toxplot&quot;) demo_mc ## # A tibble: 540 x 11 ## assay pid spid rowi coli conc wllt wllq rep rval ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Cytotox Plate_11 DMSO 1 1 NA n 1 rep1 51931 ## 2 Cytotox Plate_11 DMSO 2 12 NA n 1 rep1 48694 ## 3 Cytotox Plate_11 DMSO 3 12 NA n 1 rep1 47870 ## 4 Cytotox Plate_11 DMSO 4 12 NA n 1 rep1 47624 ## 5 Cytotox Plate_11 DMSO 5 12 NA n 1 rep1 47383 ## 6 Cytotox Plate_11 DMSO 6 12 NA n 1 rep1 46533 ## 7 Cytotox Plate_11 DMSO 7 12 NA n 1 rep1 45629 ## 8 Cytotox Plate_11 DMSO 8 12 NA n 1 rep1 50190 ## 9 Cytotox Plate_11 NaNO3 1 2 1e-04 pr_ec80 1 rep1 48829 ## 10 Cytotox Plate_11 NaNO3 8 11 1e-04 pr_ec80 1 rep1 45948 ## # ... with 530 more rows, and 1 more variables: apid &lt;chr&gt; assay_info &lt;- list( prim_assay = &quot;Primary&quot;, toxi_assay = &quot;Cytotox&quot; ) # normalization demo_mc_norm &lt;- normalize_per_plate(demo_mc) # qc qc_per_plate(demo_mc_norm, assay_info) ## $neg_ctrl_sum ## # A tibble: 6 x 7 ## # Groups: apid [?] ## apid assay count_DMSO count_DMSO_NA mean_DMSO sd_DMSO ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Plate_11_rep1 Cytotox 8 0 101.01525 4.234387 ## 2 Plate_11_rep1 Primary 8 0 98.27582 7.857461 ## 3 Plate_11_rep2 Cytotox 8 0 101.42554 5.750167 ## 4 Plate_11_rep2 Primary 8 0 102.37073 9.500463 ## 5 Plate_11_rep3 Cytotox 8 0 99.74308 4.735941 ## 6 Plate_11_rep3 Primary 8 0 96.74751 8.379446 ## # ... with 1 more variables: CV_DMSO &lt;dbl&gt; ## ## $pos_ctrl_sum ## # A tibble: 6 x 4 ## # Groups: apid [3] ## apid assay sd_positive mean_positive ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Plate_11_rep1 Primary 0.1785015 3.061242 ## 2 Plate_11_rep2 Primary 0.2166091 3.571755 ## 3 Plate_11_rep3 Primary 0.3947476 3.016518 ## 4 Plate_11_rep1 Cytotox NA 4.102876 ## 5 Plate_11_rep2 Cytotox NA 4.007689 ## 6 Plate_11_rep3 Cytotox NA 4.476789 ## ## $qc ## # A tibble: 6 x 6 ## # Groups: apid [3] ## unique_id apid assay CV_DMSO Z_prime SSMD ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Plate_11_rep1_Primary Plate_11_rep1 Primary 7.995315 0.7468046 12.11460 ## 2 Plate_11_rep2_Primary Plate_11_rep2 Primary 9.280449 0.7049441 10.39668 ## 3 Plate_11_rep3_Primary Plate_11_rep3 Primary 8.661149 0.7191689 11.17343 ## 4 Plate_11_rep1_Cytotox Plate_11_rep1 Cytotox 4.191830 0.8689211 22.88699 ## 5 Plate_11_rep2_Cytotox Plate_11_rep2 Cytotox 5.669348 0.8229226 16.94174 ## 6 Plate_11_rep3_Cytotox Plate_11_rep3 Cytotox 4.748140 0.8508620 20.11560 # curve fitting demo_md &lt;- fit_curve_tcpl(filter(demo_mc_norm, wllt == &quot;t&quot;), assay_info) ## Processing 9 samples(spid).... ## TP0001501G09 ||TP0001501G10 ||TP0001501G11 ||TP0001502A01 ||TP0001502B01 ||TP0001502B03 ||TP0001502B04 ||TP0001502B05 ||TP0001502B07 || ## Curve Fitting Completed! ## Calculation time: 2.3 secs # calculate ranking score demo_rank &lt;- rank_tcpl(demo_md) knitr::kable(demo_rank, caption = &quot;Ranking Scores for Test Data Set&quot;) Table 3.1: Ranking Scores for Test Data Set index spid chnm casn taa med_diff AC50_toxi AC50_prim absEC80_toxi absEC50_toxi absEC80_prim absEC50_prim cyto_lim ranking_score 1 TP0001501G09 NA NA 6.0094767 11.056046 -4.457038 -4.318049 -4.208958 NA -4.967273 NA -4.208958 NA 2 TP0001501G10 NA NA 8.7902903 16.530767 -4.413282 -4.273303 -4.359345 NA -4.826529 NA -4.359345 NA 3 TP0001501G11 NA NA 12.5729649 15.735048 -4.350704 -4.462967 -4.549528 -4.042310 -4.901908 -4.352939 -4.549528 NA 4 TP0001502A01 NA NA 0.1157745 2.621527 -4.384463 -4.415429 -4.096896 NA -4.174754 NA -4.096896 NA 5 TP0001502B01 NA NA 4.6352583 9.095696 -4.358898 -4.302734 -4.361850 NA -4.569708 NA -4.361850 NA 6 TP0001502B03 NA NA 11.3269038 33.796854 NA -4.582086 NA NA -4.923170 NA NA NA 7 TP0001502B04 NA NA 0.5642261 12.853646 NA -4.264610 NA NA -4.243598 NA NA NA 8 TP0001502B05 NA NA 7.0109885 16.353536 -4.792074 -4.502850 -5.120740 NA -5.020539 -4.158574 -5.120740 NA 9 TP0001502B07 NA NA 10.3912227 10.744056 -4.518140 -4.578673 -4.977379 -4.420396 -5.167541 -4.590906 -4.977379 NA # make plots demo_plots &lt;- plot_tcpl(demo_md, demo_rank, notation = FALSE) # Visualize plot demo_plots[[1]] demo_plots[[2]] "],
["single-conc-results-analysis.html", "4 Single-Conc Results Analysis 4.1 Define basic assay info 4.2 Data Import 4.3 Normalization 4.4 Threshold of Significance 4.5 QC of Single-conc assay 4.6 QC Summary of Single-Con assay 4.7 Visualize the single concentration data", " 4 Single-Conc Results Analysis rm(list=ls()) library(plotly) library(ggthemes) library(stringr) library(readxl) library(grid) library(gridExtra) library(devtools) # load_all(&quot;./toxplot first pub ver&quot;) load_all(&quot;./toxplot&quot;) library(tidyverse) # session_info() 4.1 Define basic assay info #define the names of the primary and toxicity assay. #names should match what&#39;s provided in the &lt;assay&gt; column of the input dataframe assay_info &lt;- list( prim_assay = &quot;RAIU&quot;, toxi_assay = &quot;Cytotox&quot; ) 4.2 Data Import dt_sc &lt;- read_csv(&quot;./input data files/NIS_ph1_v2_sc_lvl0_for_tcpl.csv&quot;) 4.3 Normalization Each sample well is normalized as percentage of the DMSO median on each plate. dt_sc_norm &lt;- toxplot::normalize_per_plate(dt_sc, nctrl = &quot;DMSO&quot;) 4.4 Threshold of Significance Now calculating 3bMAD and 3sigma value for the DMSO control in the single concentration assay as a whole. sig_cutoff_sc &lt;- dt_sc_norm %&gt;% filter(spid == &quot;DMSO&quot;) %&gt;% summarize(bMAD = mad(nval_median, na.rm=TRUE), three_bMAD = 3*mad(nval_median, na.rm=TRUE)) knitr::kable(sig_cutoff_sc, digits = 2) bMAD three_bMAD 6.83 20.5 4.5 QC of Single-conc assay Assay quality control measures were calculated by each 96-well plate. To assesss the quality of assay for each 96 well plate, the following metrics were used: CV of DMSO controls Z’ score The negative control DMSO wells’ raw readings were used to calculate mean, standard deviation and CV for each plate. Z’ factor is calculated as follows: \\[Z&#39;=1-\\frac{3\\sigma_{positive\\ control} + 3\\sigma_{DMSO\\ control}}{|\\mu_{positive\\ control} - \\mu_{DMSO\\ control}|}\\] Note that in Z’ calculation, because we only had one well of cytotox positive control, therefore sigma wasn’t calculatable. Hence the Z’ calculated for cytotox is unusable. qc_sc &lt;- qc_per_plate(dt_sc_norm, assay_info, resp = &quot;nval_median&quot;) qplot(unique_id, CV_DMSO, data = qc_sc$qc, color = assay) + ggtitle(&quot;CV of DMSO in Single-Con Assay&quot;) + xlab(&quot;Assay Plate ID&quot;) + scale_x_discrete(labels = NULL) + theme_bw() qplot(unique_id, Z_prime, data = qc_sc$qc, color = assay) + ggtitle(&quot;Z&#39; in Single-Con Assay&quot;) + xlab(&quot;Assay Plate ID&quot;) + scale_x_discrete(labels = NULL) + theme_bw() 4.6 QC Summary of Single-Con assay library(psych) qc_sc_t &lt;- qc_sc$qc %&gt;% dplyr::select(CV_DMSO, Z_prime) %&gt;% describe knitr::kable(qc_sc_t, digits = 2, caption = &quot;Summary Single-Con Assay QC Metrics&quot;) Table 4.1: Summary Single-Con Assay QC Metrics vars n mean sd median trimmed mad min max range skew kurtosis se apid* 1 15 NaN NA NA NaN NA Inf -Inf -Inf NA NA NA CV_DMSO 2 15 7.14 1.56 7.55 7.01 1.52 4.91 11.04 6.13 0.68 0.19 0.40 Z_prime 3 15 0.77 0.05 0.76 0.77 0.04 0.65 0.84 0.18 -0.72 0.40 0.01 All single-con QC metrics in a table knitr::kable(dplyr::select(qc_sc$qc, apid, CV_DMSO, Z_prime), digits = 2, col.names = c(&quot;Plate&quot;, &quot;CV of DMSO&quot;, &quot;Z&#39;&quot;), caption = &quot;QC metrics in Single-Conc Screening&quot;) Table 4.2: QC metrics in Single-Conc Screening Plate CV of DMSO Z’ TP0001498_rep1 5.40 0.82 TP0001498_rep2 4.91 0.84 TP0001498_rep3 5.61 0.81 TP0001499_rep1 7.55 0.76 TP0001499_rep2 7.72 0.75 TP0001499_rep3 6.35 0.79 TP0001500_rep1 7.74 0.76 TP0001500_rep2 8.11 0.74 TP0001500_rep3 11.04 0.65 TP0001501_rep1 6.46 0.79 TP0001501_rep2 5.59 0.82 TP0001501_rep3 7.70 0.75 TP0001502_rep1 8.04 0.75 TP0001502_rep2 6.53 0.79 TP0001502_rep3 8.40 0.74 4.6.1 Single-Con Positive Control QC ## model single-con controls on each plate sc_pos_raiu &lt;- dt_sc_norm %&gt;% filter(spid == &quot;NaClO4&quot;) %&gt;% mutate(spid = paste(spid, apid)) # change spid to distinguish NaClO4 on each plate. sc_raiu_pos_md &lt;- toxplot::fit_curve_tcpl(sc_pos_raiu, assay_info = list(prim_assay = &quot;RAIU&quot;, toxi_assay = NULL)) ## Processing 15 samples(spid).... ## NaClO4 TP0001498_rep1 ||NaClO4 TP0001498_rep2 ||NaClO4 TP0001498_rep3 ||NaClO4 TP0001499_rep1 ||NaClO4 TP0001499_rep2 ||NaClO4 TP0001499_rep3 ||NaClO4 TP0001500_rep1 ||NaClO4 TP0001500_rep2 ||NaClO4 TP0001500_rep3 ||NaClO4 TP0001501_rep1 ||NaClO4 TP0001501_rep2 ||NaClO4 TP0001501_rep3 ||NaClO4 TP0001502_rep1 ||NaClO4 TP0001502_rep2 ||NaClO4 TP0001502_rep3 || ## Curve Fitting Completed! ## Calculation time: 2.8 secs sc_raiu_pos_sum &lt;- toxplot::summary_tcpl(sc_raiu_pos_md) ##plot AC50 for pos controls together st &lt;- sc_raiu_pos_sum %&gt;% dplyr::select(AC50_prim, absEC50_prim, spid) %&gt;% rename(AC50 = AC50_prim, absEC50 = absEC50_prim) %&gt;% gather(key=Metric, value= value, AC50, absEC50) ggplot(st, aes(spid, value)) + geom_point(aes(color=Metric), alpha=0.8, size=3)+ #facet_grid(Metric~., scale=&quot;free&quot;)+ scale_x_discrete(labels=NULL)+ ggtitle(&quot;AC50 &amp; absEC50 of Positive Control(NaClO4) in Single-Con Assay&quot;)+ xlab(&quot;Assay Plate ID&quot;) + ylab(&quot;Concentration (logM)&quot;) + theme(plot.title = element_text(hjust=0.5)) + theme_bw() #theme(legend.position = &quot;none&quot;) #summary library(psych) sc_pos_sum_raiu &lt;- sc_raiu_pos_sum %&gt;% dplyr::select(AC50_prim, absEC50_prim) %&gt;% rename(AC50=AC50_prim, absEC50 = absEC50_prim) %&gt;% describe knitr::kable(sc_pos_sum_raiu, digits = 2, caption=&quot;Summary of single-con RAIU positive control IC50s&quot;) Table 4.3: Summary of single-con RAIU positive control IC50s vars n mean sd median trimmed mad min max range skew kurtosis se AC50 1 15 -6.44 0.11 -6.45 -6.46 0.05 -6.57 -6.06 0.51 2.28 5.19 0.03 absEC50 2 15 -6.42 0.11 -6.43 -6.44 0.05 -6.55 -6.06 0.49 2.18 4.85 0.03 4.6.2 Single-Con Controls #only take the NaClO4 wells at 1E-4M s1 &lt;- dt_sc_norm %&gt;% filter(wllt!=&quot;t&quot;, spid!=&quot;NaClO4&quot;) s2 &lt;- dt_sc_norm %&gt;% filter(spid==&quot;NaClO4&quot;, conc== 1E-4) s3 &lt;- bind_rows(s1, s2) sc_ctrl_sum &lt;- s3 %&gt;% filter(wllt !=&quot;t&quot;) %&gt;% mutate(resp=nval_median) %&gt;% #rename(&quot;NaClO4(1E-4M)F&quot;=NaClO4) %&gt;% group_by(spid) %&gt;% summarize(mean = mean(resp), sd = sd(resp), min = min(resp), max = max(resp), CV = sd/mean*100) knitr::kable(sc_ctrl_sum, digits =2, caption=&quot;Single-Con control summary stats&quot;) Table 4.4: Single-Con control summary stats spid mean sd min max CV 2,4-D 92.41 4.24 83.91 100.71 4.59 DMSO 100.63 7.11 71.69 116.19 7.06 NaClO4 2.85 0.36 2.08 3.84 12.60 NaNO3 81.25 7.56 63.47 93.21 9.31 NaSCN 20.64 1.12 18.56 23.05 5.41 # plot all sc controls ggplot(filter(s3, wllt !=&quot;t&quot;), aes(apid, nval_median)) + geom_point(aes(color=apid),alpha=0.6) + facet_grid(spid~.) + scale_y_continuous(limits= c(-20,140), breaks= seq(from=-20, to=140, by=20)) + #scale_x_discrete(breaks=NULL)+ scale_x_discrete(labels=NULL)+ ylab(&quot;Normalized Response&quot;) + xlab(&quot;Assay Plate ID&quot;)+ ggtitle(&quot;Response of controls in 15 Single-Conc assay plates&quot;)+ theme_bw()+ theme(legend.position = &quot;none&quot;) + theme(plot.title=element_text(hjust=0.5)) 4.7 Visualize the single concentration data A total of 310 chemical samples was tested in the single-con and 169 were further tested in multi-concentration. The plot below showed the median, max, and min value for each tested chemical, and coloring shows which chemical were carried on to the multi-con assay. Because the assay has 3 replicates, so all three replicate’s data are actually plotted in this figure. #calculate median, max and min value sc_median &lt;- dt_sc_norm %&gt;% ungroup() %&gt;% filter(str_detect(dt_sc_norm$spid, &quot;^TP*&quot;)) %&gt;% mutate(welltype = &quot;sample&quot;) %&gt;% group_by(pid, spid) %&gt;% summarize( median = median(nval_median), up_range = max(nval_median), lo_range = min(nval_median), range = max(nval_median) - min(nval_median) ) %&gt;% ungroup() %&gt;% mutate(mc_test = ifelse(median &lt; 80, &quot;Yes&quot;, &quot;No&quot;)) %&gt;% arrange(median) #saveRDS(sc_median, &quot;../../NIS project Phase II/Phase 2 data analysis/ph1_single.rds&quot;) ##Plot single con median+range plot. library(RColorBrewer) fig2 &lt;- ggplot(sc_median, aes(x=reorder(spid, -median), y=median, color=mc_test)) + geom_point(size=1.5, alpha=0.6) + geom_errorbar(aes(ymax=up_range, ymin=lo_range), alpha=0.8, size = 0.5) + xlab(&quot;Chemicals, ordered by increasing iodide uptake inhibition&quot;) + ylab(&quot;Iodide Uptake (% of control)&quot;)+scale_x_discrete(breaks=NULL) + #ggtitle(&quot;Median and Response of Test Chemicals&quot;)+ geom_hline(yintercept = 80, linetype=&quot;dashed&quot;, color=&quot;violetred1&quot;) + geom_hline(yintercept = 100, alpha=0.8) + geom_text(data = NULL, x = 270, y = 103, label = &quot;DMSO Control&quot;, color = &quot;grey30&quot;)+ geom_text(data = NULL, x = 270, y = 83, label = &quot;20% Inhibition&quot;, color = &quot;grey30&quot;)+ scale_y_continuous(breaks = seq(from = 0, to =100, by=20))+ scale_color_brewer(palette=&quot;Set1&quot;, name= &quot;Multi-Conc Assay&quot;, labels= c(&quot;No&quot;, &quot;Yes&quot;)) + theme_few(base_size = 12) + theme(legend.position = c(0.15, 0.1), legend.background = element_blank()) fig2 #ggsave(&quot;./output plots/fig2.tiff&quot;, fig2, dpi = 900, width = 7, height = 5, compression = &quot;lzw&quot;) "],
["multi-conc-results-analysis.html", "5 Multi-Conc Results Analysis 5.1 Import MC data 5.2 Normalization 5.3 3bMAD of MC 5.4 Multi-Con QC 5.5 Test Chemical Dose-response Modeling", " 5 Multi-Conc Results Analysis 5.1 Import MC data #Get the spid of the 169 chemicals entering multi-con test. dt_mc_ls &lt;- read_csv(&quot;./input data files/NIS_ph1_v2_mc_lvl0_for_tcpl_raiu.csv&quot;, na = &quot;NA&quot;) %&gt;% select(spid) mc_chem_list &lt;- unique(dt_mc_ls$spid)[-(1:6)] ls169 &lt;- sc_median %&gt;% filter(mc_test==&quot;Yes&quot;) %&gt;% dplyr::select(spid) ls11 &lt;- data.frame(mc_chem_list) %&gt;% mutate(flag = (mc_chem_list %in% ls169$spid)) %&gt;% filter(flag==FALSE) %&gt;% dplyr::select(mc_chem_list) %&gt;% rename(spid=mc_chem_list) spid_chnm_table &lt;- read_excel(&quot;./raw data files/EPA_11700_EPA-SLaws_ph1v2_150ul_20170125_key.xlsx&quot;) spid_chnm_table &lt;- spid_chnm_table %&gt;% dplyr::select(EPA_Sample_ID, CASRN, Preferred_Name) # rename the column title to be compatible with tcpl package. names(spid_chnm_table) &lt;- c(&quot;spid&quot;, &quot;casn&quot;, &quot;chnm&quot;) # Import MC data (look at the 169 chemicals) mc_lvl0_raiu_update &lt;- read_csv(&quot;./input data files/NIS_ph1_v2_mc_lvl0_for_tcpl_raiu.csv&quot;) %&gt;% filter(!(spid %in% ls11$spid)) mc_lvl0_cyto_update &lt;- read_csv(&quot;./input data files/NIS_ph1_v2_mc_lvl0_for_tcpl_cytotox.csv&quot;) %&gt;% filter(!(spid %in% ls11$spid)) dt_mc &lt;- bind_rows(mc_lvl0_cyto_update, mc_lvl0_raiu_update) 5.2 Normalization Normalize raw response to the median of DMSO controls, calculated per plate. dt_mc_norm &lt;- toxplot::normalize_per_plate(dt_mc) 5.3 3bMAD of MC #create concentration index dt_mc_norm &lt;- dt_mc_norm %&gt;% group_by(spid) %&gt;% mutate(cndx = generate_index(conc)) %&gt;% ungroup sig_mc &lt;- dt_mc_norm %&gt;% mutate(neg_nval_median= 100 - nval_median) %&gt;% group_by(assay) %&gt;% dplyr::filter(wllt == &quot;t&quot;) %&gt;% dplyr::filter(cndx == 1 | cndx == 2) %&gt;% summarise(bMAD = mad(neg_nval_median, na.rm = TRUE), three_bMAD=3*mad(neg_nval_median, na.rm = TRUE)) knitr::kable(sig_mc, digits =2) assay bMAD three_bMAD Cytotox 5.89 17.68 RAIU 7.93 23.78 5.4 Multi-Con QC 5.4.1 Quality Control To assesss the quality of assay for each 96 well plate, the following metrics were used . * CV of DMSO controls * Z&#39; score The negative control DMSO wells’ raw readings were used to calculate mean, standard deviation and CV for each plate. Z’ score and SSMD were calculated for each plate as well using the raw data of DMSO negative control, RAIU or cytotox positive control readings. Note the positive control values are taken from the highest concentration wells, which represent the maximum RAIU inhibition or toxic inhibition observed on the positive control chemicals. Z’ factor is calculated as follows: \\[Z&#39;=1-\\frac{3\\sigma_{positive\\ control} + 3\\sigma_{DMSO\\ control}}{|\\mu_{positive\\ control} - \\mu_{DMSO\\ control}|}\\] **Note that in Z’ calculation, because we only had one well of cytotox positive control, therefore sigma wasn’t calculatable. This make the cytotox Z’ score looks better than the RAIU. # function to calculate CV_DMSO, Z&#39; and SSMD for each plate # Note the calculation is based on raw/unnormalized data. #dt_mc_norm &lt;- readRDS(&quot;dt_mc_norm.rds&quot;) qc_mc &lt;- qc_per_plate(dt_mc_norm, assay_info, resp = &quot;nval_median&quot;) #qc_l &lt;- qc %&gt;% gather(metric, value, CV_DMSO:SSMD) # qplot(unique_id, SSMD, data=qc, color = assay_name) + theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) qplot(unique_id, CV_DMSO, data=qc_mc$qc, color = assay) + ggtitle(&quot;CV of DMSO in Multi-Con Assay&quot;) + xlab(&quot;Assay Plate ID&quot;)+ scale_x_discrete(labels=NULL)+ theme_bw() #theme(axis.text.x=element_blank(),axis.ticks.x=element_blank()) qplot(unique_id, Z_prime, data=qc_mc$qc, color = assay) + ggtitle(&quot;Z&#39; Score in Multi-Con Assay&quot;) + xlab(&quot;Assay Plate ID&quot;)+ scale_x_discrete(labels=NULL) + theme_bw() #theme(axis.text.x=element_blank(),axis.ticks.x=element_blank()) The summary of qulaity control metrics for Multi-conc Cell Viability Assay: qc_mc_cyto &lt;- qc_mc$qc %&gt;% filter(assay == &quot;Cytotox&quot;) %&gt;% dplyr::select(CV_DMSO, Z_prime) %&gt;% describe knitr::kable(qc_mc_cyto[2:3,], digits = 2, caption = &quot;Summary of Multi-Conc Cell Viability Assay QC Metrics&quot;) Table 5.1: Summary of Multi-Conc Cell Viability Assay QC Metrics vars n mean sd median trimmed mad min max range skew kurtosis se CV_DMSO 2 54 5.42 1.47 5.14 5.32 1.40 2.8 9.54 6.74 0.64 -0.09 0.20 Z_prime 3 54 0.83 0.05 0.84 0.83 0.04 0.7 0.91 0.21 -0.63 -0.10 0.01 Summary of qc metrics for Multi-conc RAIU assay: qc_mc_r &lt;- qc_mc$qc %&gt;% filter(assay == &quot;RAIU&quot;) %&gt;% dplyr::select(CV_DMSO, Z_prime) %&gt;% describe ## Adding missing grouping variables: `apid` ## Warning: NAs introduced by coercion ## Warning in FUN(newX[, i], ...): no non-missing arguments to min; returning ## Inf ## Warning in FUN(newX[, i], ...): no non-missing arguments to max; returning ## -Inf knitr::kable(qc_mc_r[2:3,], caption=&quot;Summary Multi-Conc RAIU Assay QC Metrics&quot;) Table 5.2: Summary Multi-Conc RAIU Assay QC Metrics vars n mean sd median trimmed mad min max range skew kurtosis se CV_DMSO 2 54 8.6167424 1.014914 8.6613033 8.598188 1.0016105 6.704893 11.4977674 4.7928743 0.2629207 0.0569357 0.1381124 Z_prime 3 54 0.7244648 0.031661 0.7202322 0.725418 0.0337723 0.637237 0.7846036 0.1473666 -0.2947822 -0.0649648 0.0043085 All qc metrics in a table: knitr::kable(dplyr::select(qc_mc$qc, apid, assay, CV_DMSO, Z_prime), digits = 2, longtable = TRUE, col.names = c(&quot;Plate&quot;, &quot;assay&quot;,&quot;CV of DMSO&quot;, &quot;Z&#39;&quot;), caption = &quot;Plate-wise quality control metrics in Multi-Conc Assays&quot;) (#tab:qc table)Plate-wise quality control metrics in Multi-Conc Assays Plate assay CV of DMSO Z’ Plate_1_rep1 RAIU 6.70 0.78 Plate_1_rep2 RAIU 6.78 0.78 Plate_1_rep3 RAIU 7.33 0.77 Plate_10_rep1 RAIU 9.50 0.70 Plate_10_rep2 RAIU 8.34 0.73 Plate_10_rep3 RAIU 10.84 0.66 Plate_11_rep1 RAIU 8.00 0.75 Plate_11_rep2 RAIU 9.28 0.70 Plate_11_rep3 RAIU 8.66 0.72 Plate_12_rep1 RAIU 8.93 0.72 Plate_12_rep2 RAIU 8.59 0.72 Plate_12_rep3 RAIU 9.50 0.70 Plate_13_rep1 RAIU 7.68 0.75 Plate_13_rep2 RAIU 8.95 0.71 Plate_13_rep3 RAIU 7.97 0.75 Plate_14_rep1 RAIU 8.02 0.75 Plate_14_rep2 RAIU 11.50 0.64 Plate_14_rep3 RAIU 9.01 0.71 Plate_15_rep1 RAIU 9.65 0.69 Plate_15_rep2 RAIU 7.50 0.76 Plate_15_rep3 RAIU 7.28 0.76 Plate_16_rep1 RAIU 7.85 0.75 Plate_16_rep2 RAIU 8.13 0.74 Plate_16_rep3 RAIU 8.06 0.75 Plate_17_rep1 RAIU 9.37 0.70 Plate_17_rep2 RAIU 8.46 0.73 Plate_17_rep3 RAIU 8.87 0.72 Plate_18_rep1 RAIU 7.51 0.76 Plate_18_rep2 RAIU 7.52 0.76 Plate_18_rep3 RAIU 8.98 0.71 Plate_2_rep1 RAIU 6.80 0.78 Plate_2_rep2 RAIU 7.58 0.75 Plate_2_rep3 RAIU 9.12 0.71 Plate_3_rep1 RAIU 8.90 0.72 Plate_3_rep2 RAIU 9.66 0.69 Plate_3_rep3 RAIU 10.34 0.67 Plate_4_rep1 RAIU 8.96 0.71 Plate_4_rep2 RAIU 9.59 0.69 Plate_4_rep3 RAIU 9.11 0.71 Plate_5_rep1 RAIU 9.34 0.70 Plate_5_rep2 RAIU 8.66 0.72 Plate_5_rep3 RAIU 8.07 0.74 Plate_6_rep1 RAIU 7.94 0.75 Plate_6_rep2 RAIU 9.61 0.69 Plate_6_rep3 RAIU 8.69 0.73 Plate_7_rep1 RAIU 7.99 0.75 Plate_7_rep2 RAIU 9.49 0.70 Plate_7_rep3 RAIU 10.23 0.67 Plate_8_rep1 RAIU 8.61 0.72 Plate_8_rep2 RAIU 6.85 0.77 Plate_8_rep3 RAIU 8.93 0.72 Plate_9_rep1 RAIU 8.52 0.72 Plate_9_rep2 RAIU 9.20 0.70 Plate_9_rep3 RAIU 8.33 0.73 Plate_1_rep1 Cytotox 5.75 0.82 Plate_1_rep2 Cytotox 6.06 0.81 Plate_1_rep3 Cytotox 7.05 0.78 Plate_10_rep1 Cytotox 5.14 0.84 Plate_10_rep2 Cytotox 5.52 0.83 Plate_10_rep3 Cytotox 3.21 0.90 Plate_11_rep1 Cytotox 4.19 0.87 Plate_11_rep2 Cytotox 5.67 0.82 Plate_11_rep3 Cytotox 4.75 0.85 Plate_12_rep1 Cytotox 6.50 0.80 Plate_12_rep2 Cytotox 4.66 0.86 Plate_12_rep3 Cytotox 3.89 0.88 Plate_13_rep1 Cytotox 4.62 0.86 Plate_13_rep2 Cytotox 4.68 0.85 Plate_13_rep3 Cytotox 5.98 0.81 Plate_14_rep1 Cytotox 6.08 0.81 Plate_14_rep2 Cytotox 4.74 0.85 Plate_14_rep3 Cytotox 4.19 0.87 Plate_15_rep1 Cytotox 6.10 0.81 Plate_15_rep2 Cytotox 4.50 0.86 Plate_15_rep3 Cytotox 4.27 0.87 Plate_16_rep1 Cytotox 6.46 0.80 Plate_16_rep2 Cytotox 4.05 0.87 Plate_16_rep3 Cytotox 4.28 0.87 Plate_17_rep1 Cytotox 8.56 0.73 Plate_17_rep2 Cytotox 7.81 0.76 Plate_17_rep3 Cytotox 4.45 0.86 Plate_18_rep1 Cytotox 8.21 0.74 Plate_18_rep2 Cytotox 7.37 0.77 Plate_18_rep3 Cytotox 4.92 0.85 Plate_2_rep1 Cytotox 3.29 0.90 Plate_2_rep2 Cytotox 7.04 0.78 Plate_2_rep3 Cytotox 5.14 0.84 Plate_3_rep1 Cytotox 6.45 0.80 Plate_3_rep2 Cytotox 5.35 0.83 Plate_3_rep3 Cytotox 2.80 0.91 Plate_4_rep1 Cytotox 4.54 0.86 Plate_4_rep2 Cytotox 4.55 0.86 Plate_4_rep3 Cytotox 6.17 0.81 Plate_5_rep1 Cytotox 6.25 0.80 Plate_5_rep2 Cytotox 4.01 0.88 Plate_5_rep3 Cytotox 5.82 0.82 Plate_6_rep1 Cytotox 4.15 0.87 Plate_6_rep2 Cytotox 6.07 0.81 Plate_6_rep3 Cytotox 6.23 0.81 Plate_7_rep1 Cytotox 9.54 0.70 Plate_7_rep2 Cytotox 7.48 0.77 Plate_7_rep3 Cytotox 8.16 0.75 Plate_8_rep1 Cytotox 4.48 0.86 Plate_8_rep2 Cytotox 3.52 0.89 Plate_8_rep3 Cytotox 5.13 0.84 Plate_9_rep1 Cytotox 4.19 0.87 Plate_9_rep2 Cytotox 5.21 0.84 Plate_9_rep3 Cytotox 3.56 0.89 5.4.2 Sodium Perchlorate &amp; DCNQ On each assay plate, sodium perchlorate and DCNQ were included in six concentrations to serve as positive controls for RAIU and Cytotox assay. Here they are modelled separately by each assay plate. ##extract mc related data frame d_pos_cyto &lt;- dt_mc_norm %&gt;% filter(assay == &quot;Cytotox&quot;, wllt== &quot;pc&quot;) d_pos_raiu &lt;- dt_mc_norm %&gt;% filter(assay == &quot;RAIU&quot;, wllt==&quot;pr&quot;) d_neg_cyto &lt;- dt_mc_norm %&gt;% filter(assay == &quot;Cytotox&quot;, wllt==&quot;nrc&quot;) d_neg_raiu &lt;- dt_mc_norm %&gt;% filter(assay == &quot;RAIU&quot;, wllt==&quot;nrc&quot;) d_ec80_raiu &lt;- dt_mc_norm %&gt;% filter(assay == &quot;RAIU&quot;, wllt==&quot;pr_ec80&quot;) d_ec20_raiu &lt;- dt_mc_norm %&gt;% filter(assay == &quot;RAIU&quot;, wllt==&quot;pr_ec20&quot;) ##plot all DCNQ in multi-con g_cyto_pos &lt;- qplot(data=d_pos_cyto, x=log10(conc), y=nval_median) + labs( #title = paste(&quot;SPID: &quot; , spid, &quot;\\nNAME: &quot;, chnm, &quot;\\nCAS NO: &quot;, casn, sep = &quot;&quot;), x = &quot;Concentration (logM)&quot;, y = &quot;% Control Activity&quot; ) + geom_point( color = &quot;#F8766D&quot;, shape = 1, alpha = 0.5, size = 1.8 ) + coord_fixed( ylim = c(0, 125), xlim = c(-9, -4), ratio = 2 / 70 ) + scale_y_continuous(breaks = seq( from = 0, to = 120, by = 20 )) + theme_bw() + # scale_color_manual(values=c(&quot;red&quot;,&quot;blue&quot;))+ theme(legend.title = element_blank())+ theme(plot.title=element_text(hjust=0.5)) g_cyto_pos ##plot all NaClO4 in multi-con g_raiu_pos &lt;- qplot(data=d_pos_raiu, x=log10(conc), y=nval_median) + labs( #title = paste(&quot;SPID: &quot; , spid, &quot;\\nNAME: &quot;, chnm, &quot;\\nCAS NO: &quot;, casn, sep = &quot;&quot;), x = &quot;Concentration (logM)&quot;, y = &quot;% Control Activity&quot; ) + geom_point( color = &quot;#00BFC4&quot;, shape = 1, alpha = 0.5, size = 1 ) + coord_fixed( ylim = c(0, 125), xlim = c(-9, -4), ratio = 2 / 70 ) + scale_y_continuous(breaks = seq( from = 0, to = 120, by = 20 )) + theme_bw() + theme(legend.title = element_blank())+ theme(plot.title=element_text(hjust=0.5)) g_raiu_pos # Obtain AC50 and absEC50 for the positive controls d_pos_raiu &lt;- mutate(d_pos_raiu, spid = paste(spid, apid, sep = &quot;_&quot;)) pos_raiu_md &lt;- toxplot::fit_curve_tcpl(df = d_pos_raiu, assay_info = list(prim_assay = &quot;RAIU&quot;, toxi_assay = NULL)) ## Processing 54 samples(spid).... ## NaClO4_Plate_1_rep1 ||NaClO4_Plate_1_rep2 ||NaClO4_Plate_1_rep3 ||NaClO4_Plate_10_rep1 ||NaClO4_Plate_10_rep2 ||NaClO4_Plate_10_rep3 ||NaClO4_Plate_11_rep1 ||NaClO4_Plate_11_rep2 ||NaClO4_Plate_11_rep3 ||NaClO4_Plate_12_rep1 ||NaClO4_Plate_12_rep2 ||NaClO4_Plate_12_rep3 ||NaClO4_Plate_13_rep1 ||NaClO4_Plate_13_rep2 ||NaClO4_Plate_13_rep3 ||NaClO4_Plate_14_rep1 ||NaClO4_Plate_14_rep2 ||NaClO4_Plate_14_rep3 ||NaClO4_Plate_15_rep1 ||NaClO4_Plate_15_rep2 ||NaClO4_Plate_15_rep3 ||NaClO4_Plate_16_rep1 ||NaClO4_Plate_16_rep2 ||NaClO4_Plate_16_rep3 ||NaClO4_Plate_17_rep1 ||NaClO4_Plate_17_rep2 ||NaClO4_Plate_17_rep3 ||NaClO4_Plate_18_rep1 ||NaClO4_Plate_18_rep2 ||NaClO4_Plate_18_rep3 ||NaClO4_Plate_2_rep1 ||NaClO4_Plate_2_rep2 ||NaClO4_Plate_2_rep3 ||NaClO4_Plate_3_rep1 ||NaClO4_Plate_3_rep2 ||NaClO4_Plate_3_rep3 ||NaClO4_Plate_4_rep1 ||NaClO4_Plate_4_rep2 ||NaClO4_Plate_4_rep3 ||NaClO4_Plate_5_rep1 ||NaClO4_Plate_5_rep2 ||NaClO4_Plate_5_rep3 ||NaClO4_Plate_6_rep1 ||NaClO4_Plate_6_rep2 ||NaClO4_Plate_6_rep3 ||NaClO4_Plate_7_rep1 ||NaClO4_Plate_7_rep2 ||NaClO4_Plate_7_rep3 ||NaClO4_Plate_8_rep1 ||NaClO4_Plate_8_rep2 ||NaClO4_Plate_8_rep3 ||NaClO4_Plate_9_rep1 ||NaClO4_Plate_9_rep2 ||NaClO4_Plate_9_rep3 || ## Curve Fitting Completed! ## Calculation time: 9.1 secs raiu_pos_tbl &lt;- toxplot::summary_tcpl(pos_raiu_md) d_pos_cyto &lt;- mutate(d_pos_cyto, spid = paste(spid, apid, sep = &quot;_&quot;)) pos_cyto_md &lt;- toxplot::fit_curve_tcpl(df = d_pos_cyto, assay_info = list(prim_assay = NULL, toxi_assay = &quot;Cytotox&quot;)) ## Processing 54 samples(spid).... ## DCNQ_Plate_1_rep1 ||DCNQ_Plate_1_rep2 ||DCNQ_Plate_1_rep3 ||DCNQ_Plate_10_rep1 ||DCNQ_Plate_10_rep2 ||DCNQ_Plate_10_rep3 ||DCNQ_Plate_11_rep1 ||DCNQ_Plate_11_rep2 ||DCNQ_Plate_11_rep3 ||DCNQ_Plate_12_rep1 ||DCNQ_Plate_12_rep2 ||DCNQ_Plate_12_rep3 ||DCNQ_Plate_13_rep1 ||DCNQ_Plate_13_rep2 ||DCNQ_Plate_13_rep3 ||DCNQ_Plate_14_rep1 ||DCNQ_Plate_14_rep2 ||DCNQ_Plate_14_rep3 ||DCNQ_Plate_15_rep1 ||DCNQ_Plate_15_rep2 ||DCNQ_Plate_15_rep3 ||DCNQ_Plate_16_rep1 ||DCNQ_Plate_16_rep2 ||DCNQ_Plate_16_rep3 ||DCNQ_Plate_17_rep1 ||DCNQ_Plate_17_rep2 ||DCNQ_Plate_17_rep3 ||DCNQ_Plate_18_rep1 ||DCNQ_Plate_18_rep2 ||DCNQ_Plate_18_rep3 ||DCNQ_Plate_2_rep1 ||DCNQ_Plate_2_rep2 ||DCNQ_Plate_2_rep3 ||DCNQ_Plate_3_rep1 ||DCNQ_Plate_3_rep2 ||DCNQ_Plate_3_rep3 ||DCNQ_Plate_4_rep1 ||DCNQ_Plate_4_rep2 ||DCNQ_Plate_4_rep3 ||DCNQ_Plate_5_rep1 ||DCNQ_Plate_5_rep2 ||DCNQ_Plate_5_rep3 ||DCNQ_Plate_6_rep1 ||DCNQ_Plate_6_rep2 ||DCNQ_Plate_6_rep3 ||DCNQ_Plate_7_rep1 ||DCNQ_Plate_7_rep2 ||DCNQ_Plate_7_rep3 ||DCNQ_Plate_8_rep1 ||DCNQ_Plate_8_rep2 ||DCNQ_Plate_8_rep3 ||DCNQ_Plate_9_rep1 ||DCNQ_Plate_9_rep2 ||DCNQ_Plate_9_rep3 || ## Curve Fitting Completed! ## Calculation time: 5.4 secs cyto_pos_tbl &lt;- toxplot::summary_tcpl(pos_cyto_md) pos_tbl &lt;- bind_rows(cyto_pos_tbl, raiu_pos_tbl) #this is the modelling results for all mc positive 5.4.2.1 Visualize AC50s ggplot(raiu_pos_tbl, aes(spid, AC50_prim)) + geom_point(alpha=0.8, size=3)+ scale_x_discrete(labels=NULL)+ ggtitle(&quot;AC50 of RAIU Positive Control (NaClO4) in Multi-Conc Assay&quot;)+ xlab(&quot;Assay Plate ID&quot;) + ylab(&quot;Concentration (logM)&quot;) + theme(plot.title = element_text(hjust=0.5)) + theme_bw() ggplot(cyto_pos_tbl, aes(spid, AC50_toxi)) + geom_point(alpha=0.8, size=3)+ #facet_grid(Metric~., scale=&quot;free&quot;)+ scale_x_discrete(labels=NULL)+ ggtitle(&quot;AC50 of Cell Viability Positive Control (DCNQ) in Multi-Conc Assay&quot;)+ xlab(&quot;Assay Plate ID&quot;) + ylab(&quot;Concentration (logM)&quot;) + theme(plot.title = element_text(hjust=0.5)) + theme_bw() 5.4.2.2 Summarize AC50s of positive controls in multi-conc assays ##summarizing AC50s of positive controls. library(psych) pos_sum_raiu &lt;- raiu_pos_tbl %&gt;% dplyr::select(AC50_prim, absEC50_prim) %&gt;% describe pos_sum_cyto &lt;- cyto_pos_tbl %&gt;% dplyr::select(AC50_toxi, absEC50_toxi) %&gt;% describe knitr::kable(pos_sum_raiu, digits = 2, caption=&quot;Summary of RAIU positive control IC50s&quot;) Table 5.3: Summary of RAIU positive control IC50s vars n mean sd median trimmed mad min max range skew kurtosis se AC50_prim 1 54 -6.38 0.13 -6.41 -6.40 0.11 -6.57 -6.04 0.53 1.04 0.83 0.02 absEC50_prim 2 54 -6.36 0.13 -6.39 -6.38 0.10 -6.54 -6.04 0.51 0.89 0.52 0.02 knitr::kable(pos_sum_cyto, digits = 2, caption=&quot;Summary of Cytotox positive control IC50s&quot;) Table 5.4: Summary of Cytotox positive control IC50s vars n mean sd median trimmed mad min max range skew kurtosis se AC50_toxi 1 54 -4.83 0.12 -4.88 -4.86 0.03 -4.92 -4.47 0.45 1.98 2.87 0.02 absEC50_toxi 2 54 -4.83 0.10 -4.88 -4.85 0.03 -4.92 -4.55 0.37 1.75 1.74 0.01 5.4.2.3 Dose-Response of Positive Controls on each plate # perchlorate dt_perchlorate &lt;- dt_mc_norm %&gt;% filter(spid == &quot;NaClO4&quot;) %&gt;% mutate(spid = paste(spid, pid, rep, sep = &quot;_&quot;)) #dt_perchlorate &lt;- dt_mc_norm %&gt;% filter(spid == &quot;NaClO4&quot;) perchlorate_md &lt;- fit_curve_tcpl(dt_perchlorate, assay_info = list(prim_assay = &quot;RAIU&quot;, toxi_assay = &quot;Cytotox&quot;), prim_cutoff = 23.78165, toxi_cutoff = 17.68251) ## Processing 54 samples(spid).... ## NaClO4_Plate_1_rep1 ||NaClO4_Plate_1_rep2 ||NaClO4_Plate_1_rep3 ||NaClO4_Plate_10_rep1 ||NaClO4_Plate_10_rep2 ||NaClO4_Plate_10_rep3 ||NaClO4_Plate_11_rep1 ||NaClO4_Plate_11_rep2 ||NaClO4_Plate_11_rep3 ||NaClO4_Plate_12_rep1 ||NaClO4_Plate_12_rep2 ||NaClO4_Plate_12_rep3 ||NaClO4_Plate_13_rep1 ||NaClO4_Plate_13_rep2 ||NaClO4_Plate_13_rep3 ||NaClO4_Plate_14_rep1 ||NaClO4_Plate_14_rep2 ||NaClO4_Plate_14_rep3 ||NaClO4_Plate_15_rep1 ||NaClO4_Plate_15_rep2 ||NaClO4_Plate_15_rep3 ||NaClO4_Plate_16_rep1 ||NaClO4_Plate_16_rep2 ||NaClO4_Plate_16_rep3 ||NaClO4_Plate_17_rep1 ||NaClO4_Plate_17_rep2 ||NaClO4_Plate_17_rep3 ||NaClO4_Plate_18_rep1 ||NaClO4_Plate_18_rep2 ||NaClO4_Plate_18_rep3 ||NaClO4_Plate_2_rep1 ||NaClO4_Plate_2_rep2 ||NaClO4_Plate_2_rep3 ||NaClO4_Plate_3_rep1 ||NaClO4_Plate_3_rep2 ||NaClO4_Plate_3_rep3 ||NaClO4_Plate_4_rep1 ||NaClO4_Plate_4_rep2 ||NaClO4_Plate_4_rep3 ||NaClO4_Plate_5_rep1 ||NaClO4_Plate_5_rep2 ||NaClO4_Plate_5_rep3 ||NaClO4_Plate_6_rep1 ||NaClO4_Plate_6_rep2 ||NaClO4_Plate_6_rep3 ||NaClO4_Plate_7_rep1 ||NaClO4_Plate_7_rep2 ||NaClO4_Plate_7_rep3 ||NaClO4_Plate_8_rep1 ||NaClO4_Plate_8_rep2 ||NaClO4_Plate_8_rep3 ||NaClO4_Plate_9_rep1 ||NaClO4_Plate_9_rep2 ||NaClO4_Plate_9_rep3 || ## Curve Fitting Completed! ## Calculation time: 13.4 secs perchlorate_rank &lt;- rank_tcpl(perchlorate_md) #perchlorate_rank$taa %&gt;% median perchlorate_plots &lt;- plot_tcpl(perchlorate_md, perchlorate_rank, notation = T) perchlorate_plots[[1]] # DCNQ dt_dcnq &lt;- dt_mc_norm %&gt;% filter(spid == &quot;DCNQ&quot;) %&gt;% mutate(spid = paste(spid, pid, rep, sep = &quot;_&quot;)) dcnq_md &lt;- fit_curve_tcpl(dt_dcnq, assay_info = list(prim_assay = &quot;RAIU&quot;, toxi_assay = &quot;Cytotox&quot;), prim_cutoff = 23.78165, toxi_cutoff = 17.68251) ## Processing 54 samples(spid).... ## DCNQ_Plate_1_rep1 ||DCNQ_Plate_1_rep2 ||DCNQ_Plate_1_rep3 ||DCNQ_Plate_10_rep1 ||DCNQ_Plate_10_rep2 ||DCNQ_Plate_10_rep3 ||DCNQ_Plate_11_rep1 ||DCNQ_Plate_11_rep2 ||DCNQ_Plate_11_rep3 ||DCNQ_Plate_12_rep1 ||DCNQ_Plate_12_rep2 ||DCNQ_Plate_12_rep3 ||DCNQ_Plate_13_rep1 ||DCNQ_Plate_13_rep2 ||DCNQ_Plate_13_rep3 ||DCNQ_Plate_14_rep1 ||DCNQ_Plate_14_rep2 ||DCNQ_Plate_14_rep3 ||DCNQ_Plate_15_rep1 ||DCNQ_Plate_15_rep2 ||DCNQ_Plate_15_rep3 ||DCNQ_Plate_16_rep1 ||DCNQ_Plate_16_rep2 ||DCNQ_Plate_16_rep3 ||DCNQ_Plate_17_rep1 ||DCNQ_Plate_17_rep2 ||DCNQ_Plate_17_rep3 ||DCNQ_Plate_18_rep1 ||DCNQ_Plate_18_rep2 ||DCNQ_Plate_18_rep3 ||DCNQ_Plate_2_rep1 ||DCNQ_Plate_2_rep2 ||DCNQ_Plate_2_rep3 ||DCNQ_Plate_3_rep1 ||DCNQ_Plate_3_rep2 ||DCNQ_Plate_3_rep3 ||DCNQ_Plate_4_rep1 ||DCNQ_Plate_4_rep2 ||DCNQ_Plate_4_rep3 ||DCNQ_Plate_5_rep1 ||DCNQ_Plate_5_rep2 ||DCNQ_Plate_5_rep3 ||DCNQ_Plate_6_rep1 ||DCNQ_Plate_6_rep2 ||DCNQ_Plate_6_rep3 ||DCNQ_Plate_7_rep1 ||DCNQ_Plate_7_rep2 ||DCNQ_Plate_7_rep3 ||DCNQ_Plate_8_rep1 ||DCNQ_Plate_8_rep2 ||DCNQ_Plate_8_rep3 ||DCNQ_Plate_9_rep1 ||DCNQ_Plate_9_rep2 ||DCNQ_Plate_9_rep3 || ## Curve Fitting Completed! ## Calculation time: 13.5 secs dcnq_rank &lt;- rank_tcpl(dcnq_md) dcnq_plots &lt;- plot_tcpl(dcnq_md, dcnq_rank, notation = T) dcnq_plots[[1]] # Export all Sodium Perchlorate and DCNQ plots into one pdf supplemental file l3 &lt;- append(perchlorate_plots, dcnq_plots) # save_plot_pdf(l3, &quot;./output plots/perchlorate_dcnq_curves.pdf&quot;) # bind_rows(dt_perchlorate, dt_dcnq) %&gt;% # select(spid, assay, conc, nval_median) %&gt;% # write_csv(&quot;./output figure&#39;s source data/supplemental_fig.3_data.csv&quot;) 5.4.3 Visualize all Multi-Con Controls Visualize all other controls (DMSO, 2,4-D 100uM, DCNQ 100uM, NaNO3 100uM, NaSCN 100uM) included on each test plate. NaClO4 and DCNQ are plotted using the 100uM concentration wells. m3 &lt;- dt_mc_norm %&gt;% filter(!wllt %in% c(&quot;t&quot;)) %&gt;% filter(!(spid %in% c(&quot;NaClO4&quot;, &quot;DCNQ&quot;))) m4 &lt;- dt_mc_norm %&gt;% filter(spid %in% c(&quot;NaClO4&quot;, &quot;DCNQ&quot;)) %&gt;% filter(conc == 1e-4) m31 &lt;- bind_rows(m3, m4) ## facet plots of all controls&#39; data points ggplot(m31, aes(apid, nval_median)) + geom_point(aes(color=apid),alpha=0.7) + facet_grid(spid~assay) + scale_y_continuous(limits= c(-20,140), breaks= seq(from=-20, to=140, by=20)) + #scale_x_discrete(breaks=NULL)+ scale_x_discrete(labels=NULL)+ ylab(&quot;% Control Activity&quot;) + xlab(&quot;Assay Plate ID&quot;)+ ggtitle(&quot;Response of controls in all 54 multi-conc assay plates&quot;)+ theme_bw()+ theme(legend.position = &quot;none&quot;, plot.title=element_text(hjust=0.5)) ##print the control stats table. mc_ctrl_sum &lt;- m31 %&gt;% filter(wllt != &quot;t&quot;) %&gt;% #mutate(assay= if_else(aeid==1, &quot;Cytotox&quot;, &quot;RAIU&quot;)) %&gt;% #add &quot;assay&quot; variable mutate(resp=nval_median) %&gt;% group_by(assay, spid) %&gt;% summarize(mean = mean(resp), sd = sd(resp), min = min(resp), max = max(resp), CV = sd/mean*100) knitr::kable(mc_ctrl_sum, digits = 2, caption = &quot;Multi-Conc Control Summary Stats&quot;) Table 5.5: Multi-Conc Control Summary Stats assay spid mean sd min max CV Cytotox 2,4-D 99.34 4.21 90.92 113.31 4.24 Cytotox DCNQ 3.72 0.38 2.62 4.76 10.33 Cytotox DMSO 100.92 5.41 87.82 123.66 5.36 Cytotox NaClO4 99.19 4.69 89.12 112.51 4.73 Cytotox NaNO3 98.95 5.43 88.64 112.92 5.49 Cytotox NaSCN 104.30 3.98 94.83 117.03 3.81 RAIU 2,4-D 90.86 4.49 76.22 101.30 4.94 RAIU DCNQ 3.92 3.37 2.58 27.36 85.98 RAIU DMSO 99.50 8.28 80.77 119.46 8.32 RAIU NaClO4 3.28 0.38 2.30 4.33 11.47 RAIU NaNO3 83.08 7.17 69.45 98.80 8.63 RAIU NaSCN 24.69 2.71 20.47 43.17 10.99 5.5 Test Chemical Dose-response Modeling The model used here is the Hill model provided in tcpl R package. \\[f(x) = \\frac{tp}{1+10^{(ga-x)gw}}\\] Where x is the log concentration, tp is the top asymptote, ga is the AC50 (the log concentration where the modeled activity equals 50% of the top asymptote), and gw is the hill coefficient. The Hill model provided in the tcpl R package constrains the three parameters as following: 0 &lt;= tp &lt;= 1.2 times the maximum response value (minimum log concentration minus 2) &lt;= ga &lt;= (maximum log concentration plus 0.5) 0.3 &lt;= gw &lt;= 8 The modelling is done using a wrapper function fit_curve_tcpl in ToxPlot package, which serves as an convenient interface to use the tcplFit function in the tcpl package, and returns a list object containing all data and modeling results. mc_model &lt;- fit_curve_tcpl(df = filter(dt_mc_norm, wllt == &quot;t&quot;), assay_info = list(prim_assay = &quot;RAIU&quot;, toxi_assay = &quot;Cytotox&quot;), prim_cutoff = 23.78165, toxi_cutoff = 17.68251) ## Processing 169 samples(spid).... ## TP0001498A01 ||TP0001498B02 ||TP0001498B05 ||TP0001498B07 ||TP0001498B08 ||TP0001498B09 ||TP0001498B11 ||TP0001498C01 ||TP0001498C03 ||TP0001498C04 ||TP0001501E03 ||TP0001501E05 ||TP0001501E07 ||TP0001501E11 ||TP0001501F01 ||TP0001501F04 ||TP0001501F07 ||TP0001501G02 ||TP0001501G03 ||TP0001501G04 ||TP0001501G09 ||TP0001501G10 ||TP0001501G11 ||TP0001502A01 ||TP0001502B01 ||TP0001502B03 ||TP0001502B04 ||TP0001502B05 ||TP0001502B07 ||TP0001502B10 ||TP0001502C04 ||TP0001502C07 ||TP0001502C09 ||TP0001502C11 ||TP0001502D03 ||TP0001502D04 ||TP0001502D09 ||TP0001502D11 ||TP0001502E01 ||TP0001502E02 ||TP0001502E03 ||TP0001502E04 ||TP0001502E07 ||TP0001502E08 ||TP0001502E10 ||TP0001502F02 ||TP0001502F03 ||TP0001502F04 ||TP0001502F05 ||TP0001502F07 ||TP0001502F09 ||TP0001502F10 ||TP0001502G01 ||TP0001502G02 ||TP0001502G03 ||TP0001502G04 ||TP0001502G07 ||TP0001502G09 ||TP0001502G11 ||TP0001500A01 ||TP0001500B02 ||TP0001500B05 ||TP0001500B07 ||TP0001500B08 ||TP0001500B09 ||TP0001500C04 ||TP0001500C05 ||TP0001500C09 ||TP0001500D03 ||TP0001500D04 ||TP0001500D05 ||TP0001500D07 ||TP0001500D09 ||TP0001500D11 ||TP0001500E01 ||TP0001500E05 ||TP0001500E07 ||TP0001500E08 ||TP0001500E09 ||TP0001500E10 ||TP0001500E11 ||TP0001500F01 ||TP0001500F02 ||TP0001500F03 ||TP0001500F04 ||TP0001500F07 ||TP0001500F09 ||TP0001500F11 ||TP0001500G01 ||TP0001500G02 ||TP0001500G03 ||TP0001500G04 ||TP0001500G05 ||TP0001500G07 ||TP0001500G08 ||TP0001500G09 ||TP0001500G11 ||TP0001498C09 ||TP0001498C10 ||TP0001498C11 ||TP0001498D01 ||TP0001498D02 ||TP0001498D03 ||TP0001498D05 ||TP0001498D07 ||TP0001498D08 ||TP0001498D10 ||TP0001498D11 ||TP0001498E01 ||TP0001498E04 ||TP0001498E08 ||TP0001498E11 ||TP0001498F01 ||TP0001498F03 ||TP0001498F05 ||TP0001498F07 ||TP0001498G01 ||TP0001498G02 ||TP0001498G03 ||TP0001498G05 ||TP0001498G08 ||TP0001498G09 ||TP0001498H12 ||TP0001499A01 ||TP0001499B01 ||TP0001499B03 ||TP0001499B05 ||TP0001499B07 ||TP0001499B11 ||TP0001499C01 ||TP0001499C07 ||TP0001499C08 ||TP0001499C09 ||TP0001499D01 ||TP0001499D02 ||TP0001499D08 ||TP0001499E01 ||TP0001499E02 ||TP0001499E03 ||TP0001499E09 ||TP0001499E10 ||TP0001499E11 ||TP0001499F01 ||TP0001499F10 ||TP0001499G01 ||TP0001499G02 ||TP0001499G03 ||TP0001499G10 ||TP0001499G11 ||TP0001501A01 ||TP0001501B01 ||TP0001501B05 ||TP0001501B08 ||TP0001501B10 ||TP0001501B11 ||TP0001501C01 ||TP0001501C02 ||TP0001501C03 ||TP0001501C04 ||TP0001501C09 ||TP0001501C11 ||TP0001501D01 ||TP0001501D02 ||TP0001501D03 ||TP0001501D04 ||TP0001501D05 ||TP0001501D10 ||TP0001501E01 ||TP0001501E02 || ## Curve Fitting Completed! ## Calculation time: 37.7 secs "],
["rank-chemicals.html", "6 Rank Chemicals 6.1 Ranking Plot 6.2 Results Table for publication", " 6 Rank Chemicals To prioritize the chemicals for potential NIS inhibition activity, a ranking score was calculated using two metrics that take into account the potential confounding impact of cytotoxicity on identifying RAIU inhibition activity: 1) toxicity-adjusted area (TAA) and 2) the difference of median responses of RAIU and cytotoxicity at maximum tested concentration (Median-Difference). TAA was defined by the maximum concentration vertical line (right border), the significant threshold horizontal line for RAIU assay (top border), and the dose-response curves of RAIU and cell viability results. The numeric value of TAA is penalized when a chemical demonstrates strong cytotoxicity. Median-Difference was calculated using the median of cell viability responses minus the median of RAIU responses at the maximum testing concentration (usually 100 µM). Larger separations between RAIU and cytotoxicity are reflected in larger Median-Difference values. To rank test chemicals, NaClO4 was used as the reference to normalize the TAA and Median-Difference of each test chemical. Specifically, the TAA and Median-Difference values of NaClO4 positive control included on each of the 54 multi-concentration testing plates were first calculated to obtain the median of NaClO4 TAA and Median-Difference (150.03 and 95.67 respectively). Then the TAA and Median-Difference of test chemicals were normalized as the percentage of the median NaClO4 TAA and Median-Difference separately and then summed to obtain a chemical ranking score. The ranking score of 200 represents the potency of the referenced NaClO4. Demonstration of TAA and Median-Difference median(perchlorate_rank$taa) ## [1] 151.0348 median(perchlorate_rank$med_diff) ## [1] 95.66618 # calculate ranking metrics, normalize to sodium perchlorate sum_tbl &lt;- toxplot::rank_tcpl(mc_model, spid_chnm_table, med_taa = median(perchlorate_rank$taa), med_med_diff = median(perchlorate_rank$med_diff)) #write_csv(sum_tbl, &quot;./output data files/Phase1_rank_table.csv&quot;) 6.1 Ranking Plot Use color to indicate chemicals that have significant RAIU but no significant cytotoxicity at any given concentration. #check each concentration, and find concentrations that have sig RAIU but no sig cytotoxicity. #get the median response for each chemical on each concentration median_responses &lt;- dt_mc_norm %&gt;% filter(wllt == &quot;t&quot;) %&gt;% group_by(spid, conc, assay) %&gt;% summarize(med = median(nval_median)) %&gt;% ungroup cyto_positives &lt;- median_responses %&gt;% filter(assay == &#39;Cytotox&#39;) %&gt;% mutate(positive_cyto = ifelse((med &lt; 100 - sig_mc[[1,3]]), 1, 0)) raiu_positives &lt;- median_responses %&gt;% filter(assay == &#39;RAIU&#39;) %&gt;% mutate(positive_raiu = ifelse((med &lt; 100 - sig_mc[[2,3]]), 1, 0)) raiu_1_cyto_0 &lt;- left_join(cyto_positives, raiu_positives, by = c(&quot;spid&quot;, &quot;conc&quot;)) %&gt;% mutate(separation = ifelse((positive_raiu == 1 &amp; positive_cyto == 0), 1, 0)) separation_spid &lt;- raiu_1_cyto_0 %&gt;% filter(separation == 1) %&gt;% select(spid) %&gt;% unique %&gt;% mutate(sep = &quot;Yes&quot;) sum_tbl5 &lt;- left_join(sum_tbl, separation_spid, by = &quot;spid&quot;) %&gt;% mutate(sep = ifelse(is.na(sep), &quot;No&quot;, &quot;Yes&quot;)) %&gt;% filter(!(is.na(taa_norm))) sum_tbl6 &lt;- left_join(sum_tbl, separation_spid, by = &quot;spid&quot;) %&gt;% mutate(sep = ifelse(is.na(sep), &quot;-&quot;, &quot;+&quot;)) %&gt;% filter(!(is.na(taa_norm))) rs_plot2 &lt;- ggplot(sum_tbl5) + geom_col(aes(x=reorder(spid, ranking_score), y = ranking_score, fill = sep), alpha = 0.9, linetype = &quot;solid&quot;) + theme_light(base_size = 14) + xlab(&quot;Chemicals, ordered by ranking scores&quot;) + ylab(&quot;Ranking Score&quot;) + geom_hline(yintercept = 200, alpha = 0.8, size = 0.8, linetype = &quot;dashed&quot;, color = &quot;gray32&quot;) + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) + scale_fill_manual(name = &quot;&quot;, values = c(&quot;gray20&quot;, &quot;#21B321&quot;), breaks = c(&quot;&quot;,&quot;Yes&quot;), labels = c(&quot;No&quot;, &quot;Non-cytotoxic RAIU inhibition\\nat 1 or 2 concentrations&quot;) )+ theme(legend.justification = c(0,1), legend.position = c(0.28, 0.18), legend.title = element_text(size = rel(0.7)), legend.text = element_text(size = rel(0.6)), legend.background = element_blank()) + coord_flip() + scale_x_discrete(breaks = NULL) + scale_y_continuous(breaks = seq(-25, 200, by = 25)) rs_plot2 # ggsave(&quot;./output plots/ranking_score.png&quot;, rs_plot2, dpi = 600, width = 4.5, height = 5.2, units = &quot;in&quot;) # rs_plot3 &lt;- rs_plot2 + # theme(legend.text = element_text(size = rel(0.7)), # axis.title = element_text(size =rel(1.6))) # rs_plot3 # ggsave(&quot;./output plots/ranking_score_slim.png&quot;, rs_plot3, dpi = 900, width = 4.0, height = 10, units = &quot;in&quot;) 6.2 Results Table for publication 6.2.1 Table 1 in ES&amp;T paper multi_results &lt;- sum_tbl6 %&gt;% dplyr::select(spid, chnm, casn, AC50_prim, absEC50_prim, cyto_lim, ranking_score, sep) ## merge sum-tbl with spid_chnm_table, to include all single and multi-con results spid_chnm_table &lt;- read_excel(&quot;./raw data files/EPA_11700_EPA-SLaws_ph1v2_150ul_20170125_key.xlsx&quot;) #rename the column title to be compatible with tcpl package. spid_chnm_table &lt;- spid_chnm_table %&gt;% dplyr::select(EPA_Sample_ID, Aliquot_Concentration, CASRN, Preferred_Name) names(spid_chnm_table) &lt;- c(&quot;spid&quot;, &quot;aliquot_conc&quot;, &quot;casn&quot;, &quot;chnm&quot;) #calculate the actual cocnentration tested in single-con screening #the unit will be convert from mM to Molar spid_chnm_table &lt;- spid_chnm_table %&gt;% mutate(test_conc = aliquot_conc / 2E5) colnames(spid_chnm_table) ## [1] &quot;spid&quot; &quot;aliquot_conc&quot; &quot;casn&quot; &quot;chnm&quot; ## [5] &quot;test_conc&quot; single_con_results &lt;- spid_chnm_table %&gt;% mutate(hitc = ifelse(spid %in% ls169$spid, &quot;+&quot;, &quot;-&quot;)) final_sum_tbl &lt;- full_join(single_con_results, multi_results, by = c(&quot;spid&quot;, &quot;chnm&quot;, &quot;casn&quot;)) %&gt;% dplyr::select(spid, chnm, casn, test_conc, hitc, everything()) %&gt;% dplyr::select(-aliquot_conc) %&gt;% arrange(desc(ranking_score), desc(hitc)) colnames(final_sum_tbl) &lt;- c(&quot;SPID&quot;, &quot;Chemical&quot;, &quot;CAS NO.&quot;, &quot;Max Conc(M)&quot;, &quot;Tested in Multi-Conc&quot;, &quot;AC50&quot;, &quot;absEC50&quot;, &quot;Cytotox Point&quot;, &quot;Ranking Score&quot;, &quot;Non-cytotoxic RAIU inhibition at 1 or 2 concentrations&quot;) knitr::kable(final_sum_tbl[1:20,], caption = &quot;Results for the top 20 ranked chemical samples that demonstrated significant RAIU inhibition in multi-concentration screening&quot; ) Table 6.1: Results for the top 20 ranked chemical samples that demonstrated significant RAIU inhibition in multi-concentration screening SPID Chemical CAS NO. Max Conc(M) Tested in Multi-Conc AC50 absEC50 Cytotox Point Ranking Score Non-cytotoxic RAIU inhibition at 1 or 2 concentrations TP0001500G04 Etoxazole 153233-91-1 1.0e-04 + -5.917875 -5.882295 -4.324598 150.40664 + TP0001502E10 Triphenyltin hydroxide 76-87-9 1.0e-04 + -5.386793 -5.388907 -5.169301 114.69714 - TP0001501D03 Niclosamide 50-65-7 5.0e-05 + -6.954288 -6.787996 -6.914861 109.37954 - TP0001502G01 3-Iodo-2-propynyl-N-butylcarbamate 55406-53-6 1.0e-04 + -5.089050 -5.301357 -4.795430 107.60665 + TP0001501E07 PFOS 1763-23-1 8.0e-05 + -4.746544 -4.776923 -4.090921 94.75458 + TP0001498G01 PFOS 1763-23-1 8.0e-05 + -4.722963 -4.740131 NA 93.63201 + TP0001498B02 Cyprodinil 121552-61-2 1.0e-04 + -4.428222 -4.429650 NA 89.11580 + TP0001501G03 Rotenone 83-79-4 1.0e-04 + -7.149873 -6.219251 -7.303662 86.15161 + TP0001501C09 Pyridaben 96489-71-3 1.0e-04 + -8.635381 -7.488271 -7.596914 78.17340 - TP0001500E11 Methoxyfenozide 161050-58-4 1.0e-04 + -4.784047 -4.722900 -4.676226 76.97244 + TP0001500E05 2-(Thiocyanomethylthio)benzothiazole 21564-17-0 1.0e-04 + -4.325152 -4.370695 -4.908035 71.47611 - TP0001500D09 Oxyfluorfen 42874-03-3 1.0e-04 + -4.554565 -4.385772 NA 68.26704 + TP0001499D08 Captan 133-06-2 9.5e-05 + -4.494527 -4.501728 -4.807092 65.78758 - TP0001502F03 Fipronil 120068-37-3 1.0e-04 + -4.569726 -4.630450 -4.922140 64.31604 + TP0001502E07 Fluroxypyr-meptyl 81406-37-3 1.0e-04 + -4.765877 -4.735046 -4.735038 64.09509 + TP0001500D03 Cyhalofop-butyl 122008-85-9 9.5e-05 + -5.469458 -4.749693 -5.071778 58.46669 - TP0001499A01 Fenpyroximate (Z,E) 111812-58-9 1.0e-04 + -6.788967 -6.072622 -7.091646 57.34488 - TP0001498C01 Thiobencarb 28249-77-6 1.0e-04 + -4.375865 -4.335303 -4.704910 55.19915 - TP0001500E07 Emamectin benzoate 155569-91-8 1.0e-04 + -4.876405 -4.991496 -5.177326 54.81987 - TP0001499C08 Diphenylamine 122-39-4 1.0e-04 + -4.739166 -4.281879 -5.591725 54.01489 - #write_csv(final_sum_tbl, &quot;./output data files/sum_tble_for_paper_new_ranking.txt&quot;) # make sure use the excel text import tool to open this file, otherwise CAS NO. will be read wrong by excel as date. 6.2.2 Table S1 in ES&amp;T paper Export supplemental summary table that includes all potency metrics. sup_sum_tbl &lt;- full_join(single_con_results, sum_tbl6, by = c(&quot;spid&quot;, &quot;chnm&quot;, &quot;casn&quot;)) %&gt;% dplyr::select(spid, chnm, casn, test_conc, hitc, everything()) %&gt;% dplyr::select(-aliquot_conc, -index) %&gt;% arrange(desc(ranking_score), desc(hitc)) colnames(sup_sum_tbl) &lt;- c(&quot;Sample ID&quot;, &quot;Chemical&quot;, &quot;CAS NO.&quot;, &quot;Max Conc(M)&quot;, &quot;Multi-Con Test&quot;, &quot;TAA&quot;, &quot;Median Difference&quot;, &quot;AC50 Cytotox&quot;, &quot;AC50 RAIU&quot;, &quot;absEC80 Cytotox&quot;, &quot;absEC50 Cytotox&quot;, &quot;absEC80 RAIU&quot;, &quot;absEC50 RAIU&quot;, &quot;Cytotox point&quot;, &quot;TAA Normalized&quot;, &quot;Median_Difference Normalized&quot;, &quot;Ranking Score&quot;, &quot;Non-cytotoxic RAIU inhibition at 1 or 2 concentrations&quot;) write_csv(sup_sum_tbl, &quot;./output data files/Supplemental_summary_table.csv&quot;) "],
["toxcast-internal-replicates.html", "7 ToxCast Internal Replicates", " 7 ToxCast Internal Replicates 7.0.1 Single-con internal Replicate performance ToxCast Ph1_v2 library included internal replicates. They are the same chemical but under different sample id, therefore tested blindly with each sample repliated three times. . There are 12 chemicals been repeated, showed in the following table name_code &lt;- spid_chnm_table %&gt;% dplyr::select(spid, casn, chnm) #check which chemical is repeated in toxcast ph1_v2 library chnm_freq &lt;- data.frame(table(name_code$chnm)) %&gt;% arrange(desc(Freq)) internal_rep &lt;- head(chnm_freq, 12) knitr::kable(internal_rep) Var1 Freq 2,4-Dichlorophenoxyacetic acid 3 Azoxystrobin 3 Bisphenol A 3 Mancozeb 3 Triclosan 3 Allethrin 2 Bensulide 2 Clorophene 2 Dibutyl phthalate 2 Oryzalin 2 PFOS 2 Triadimenol 2 #spid_chnm_table %&gt;% filter(chnm %in% internal_rep$Var1) %&gt;% View() ##add chnm to sc data sc_unblind &lt;- left_join(dt_sc_norm, name_code, by= &quot;spid&quot;) ## get sc data for interval replicates sc_rep &lt;- sc_unblind %&gt;% dplyr::filter(chnm %in% internal_rep$Var1) sc_rep$chnm &lt;- str_replace(sc_rep$chnm, &quot;2,4-Dichlorophenoxyacetic acid&quot;, &quot;2,4-D&quot;) sc_rep %&gt;% dplyr::select(chnm, pid, nval_median) %&gt;% write_csv(&quot;./output figure&#39;s source data/Fig.3a.data.csv&quot;) library(RColorBrewer) ir1 &lt;- ggplot(sc_rep, aes(x=reorder(chnm, -nval_median), y=nval_median) ) + geom_point(size=2, alpha = 0.8, aes(shape=pid, color=chnm), position = position_jitter(width=0.3)) + xlab(&quot;&quot;) + ylab(&quot;Iodide Uptake (% of Control)&quot;)+ geom_hline(yintercept = 80, linetype=&quot;dashed&quot;, color=&quot;violetred1&quot;) + geom_hline(yintercept = 100, alpha=0.8) + scale_y_continuous(breaks = seq(from = 0, to =100, by=20))+ theme_bw(base_size = 12) + theme(axis.text.x = element_text(angle=35, vjust=1, hjust=1), #axis.text.y = element_text(size = 12))+ axis.title = element_text(size = rel(0.8)))+ #theme(plot.margin = NULL) + theme(legend.position=&quot;none&quot;) ir1 # dev.off() 7.0.2 Multi-con internal controls replication performance ##add chnm to mc data mc_unblind &lt;- left_join(dt_mc_norm, name_code, by= c(&quot;spid&quot;=&quot;spid&quot;)) ##gettting reps&#39;s metrics mc_rep_sum &lt;- sum_tbl %&gt;% filter(chnm %in% internal_rep$Var1) ## getting range of ac50s mc_rep_sum %&gt;% filter(!is.na(AC50_prim)) %&gt;% group_by(chnm) %&gt;% summarize(min = min(AC50_prim), max= max(AC50_prim), range = min - max) %&gt;% arrange(desc(range)) %&gt;% knitr::kable(digits = 2, caption = &quot;Range of AC50 for internal replicates&quot;) Table 7.1: Range of AC50 for internal replicates chnm min max range Dibutyl phthalate -4.54 -4.53 -0.02 PFOS -4.75 -4.72 -0.02 Oryzalin -4.38 -4.35 -0.03 Bisphenol A -4.36 -4.30 -0.06 Bensulide -4.42 -4.31 -0.11 Triclosan -5.06 -4.92 -0.14 Mancozeb -4.92 -4.75 -0.17 Azoxystrobin -4.58 -4.39 -0.19 Clorophene -4.87 -4.64 -0.22 Allethrin -4.52 -4.27 -0.24 # mc_rep_sum %&gt;% # dplyr::select(chnm, AC50_prim) %&gt;% # write_csv(&quot;./output figure&#39;s source data/Fig.3b.data.csv&quot;) # write_csv(&quot;./output data files/internal_rep_ac50_range.csv&quot;) ##plot all points of ac50 ir2 &lt;- ggplot(mc_rep_sum, aes(x=reorder(chnm, AC50_prim), y=AC50_prim) ) + geom_point(size = 2, alpha = 0.6, shape = 16) + xlab(&quot;&quot;) + ylab(&quot;AC50 (logM)&quot;)+ ylim(-6, -4)+ theme_bw(base_size = 12) + theme(axis.text.x = element_text(angle=30, vjust=1, hjust=1), #axis.text.y = element_text(size = 5), legend.position = &quot;none&quot;, axis.title = element_text(size = rel(0.8)) #plot.margin = NULL ) ir2 ## Warning: Removed 1 rows containing missing values (geom_point). # dev.off() ir &lt;- arrangeGrob(ir1, ir2) ## Warning: Removed 1 rows containing missing values (geom_point). # ggsave(&quot;./output plots/Fig3.png&quot;, ir, dpi=900, width=5, height=6) % filter(CASRN %in% sum_tbl5$casn) %>% select(ChemName) %>% unique %>% nrow --> % filter(CASRN %in% name_code$casn) %>% select(ChemName) %>% unique %>% nrow --> % unique %>% length --> "],
["export-dose-response-curve.html", "8 Export Dose-Response Curve 8.1 Make plots 8.2 Export dose-response plots as PDF 8.3 Fig.1 8.4 Fig. 3", " 8 Export Dose-Response Curve 8.1 Make plots #plot all allplot &lt;- toxplot::plot_tcpl(mc_model, sum_tbl, spid_chnm_table, notation = T) # allplot[[1]] + scale_color_manual(values=c(&quot;#e02929&quot;, &quot;#377eb8&quot;), # labels = c(&quot;Cell Viability&quot;, &quot;RAIU&quot;)) for (i in 1:length(allplot)) { allplot[[i]] &lt;- allplot[[i]] + scale_color_manual(values=c(&quot;#e02929&quot;, &quot;#377eb8&quot;), labels = c(&quot;Cell Viability&quot;, &quot;RAIU&quot;)) } allplot[[1]] 8.2 Export dose-response plots as PDF # Export plots as pdf file save_plot_pdf(allplot,&quot;./output plots/ranked_dose_response_plots.pdf&quot;) # export dataset for all the plots. # left_join(filter(dt_mc_norm, wllt==&quot;t&quot;), spid_chnm_table, by=&quot;spid&quot;) %&gt;% write_csv(&quot;./output figure&#39;s source data/supplemental_fig2_data.txt&quot;) 8.3 Fig.1 Dose-response curves to demonstrate ranking score. # Multiple plot function # Credit: this function was obtained from http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2) # # ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects) # - cols: Number of columns in layout # - layout: A matrix specifying the layout. If present, &#39;cols&#39; is ignored. # # If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE), # then plot 1 will go in the upper left, 2 will go in the upper right, and # 3 will go all the way across the bottom. # multiplot &lt;- function(..., plotlist=NULL, file, cols=1, layout=NULL) { library(grid) # Make a list from the ... arguments and plotlist plots &lt;- c(list(...), plotlist) numPlots = length(plots) # If layout is NULL, then use &#39;cols&#39; to determine layout if (is.null(layout)) { # Make the panel # ncol: Number of columns of plots # nrow: Number of rows needed, calculated from # of cols layout &lt;- matrix(seq(1, cols * ceiling(numPlots/cols)), ncol = cols, nrow = ceiling(numPlots/cols)) } if (numPlots==1) { print(plots[[1]]) } else { # Set up the page grid.newpage() pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout)))) # Make each plot, in the correct location for (i in 1:numPlots) { # Get the i,j matrix positions of the regions that contain this subplot matchidx &lt;- as.data.frame(which(layout == i, arr.ind = TRUE)) print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col)) } } } ## make Fig.1 perchlorate_plots_minimal &lt;- plot_tcpl(perchlorate_md) #png(&#39;./output plots/perchlorate_demo.png&#39;, units=&quot;px&quot;, width=450*8.33, height=300*8.33, res=600) p1 &lt;- perchlorate_plots_minimal[[19]]+ #ggtitle(&quot;NaClO4&quot;) + ggtitle(&quot;A. NaClO4&quot;) + coord_fixed(ylim = c(0, 125), xlim = c(-9, -4), ratio = 2 / 70 #used to be 2/70, when x axis was from -9 to -4. ) + xlab(&quot;&quot;) + ylab(&quot;&quot;) + #theme(axis.title = element_blank()) + theme(legend.position = &quot;none&quot;) #p1 #dev.off() ap &lt;- toxplot::plot_tcpl(mc_model, sum_tbl, spid_chnm_table) #png(&#39;./output plots/taa_demo.png&#39;, units=&quot;px&quot;, width=450*8.33, height=300*8.33, res=600) p2 &lt;- ap[[2]] + ggtitle(&quot;B&quot;) + #ggtitle(&quot;Example 1&quot;) + coord_fixed(ylim = c(0, 125), xlim = c(-9, -4), ratio = 2 / 70 #used to be 2/70, when x axis was from -9 to -4. ) + xlab(&quot;&quot;) + ylab(&quot;&quot;) + theme(legend.position = &quot;none&quot;) # p2 # dev.off() # png(&#39;./output plots/mid_taa_demo.png&#39;, units=&quot;px&quot;, width=450*8.33, height=300*8.33, res=600) p3 &lt;- ap[[21]] + ggtitle(&quot;C&quot;) + #ggtitle(&quot;Example 2&quot;) + coord_fixed(ylim = c(0, 125), xlim = c(-9, -4), ratio = 2 / 70 #used to be 2/70, when x axis was from -9 to -4. ) + xlab(&quot;&quot;) + ylab(&quot;&quot;) + theme(legend.position = &quot;none&quot;) # p3 # dev.off() # png(&#39;./output plots/low_taa_demo.png&#39;, units=&quot;px&quot;, width=450*8.33, height=300*8.33, res=600) p4 &lt;- ap[[118]] + ggtitle(&quot;D&quot;) + coord_fixed(ylim = c(0, 125), xlim = c(-9, -4), ratio = 2 / 70 #used to be 2/70, when x axis was from -9 to -4. ) + xlab(&quot;&quot;) + ylab(&quot;&quot;) + theme(legend.position = &quot;none&quot;) # p4 # dev.off() # grid.arrange(p1,p2,p3,p4, ncol=2) # fig1 &lt;- arrangeGrob(p1,p2,p3, ncol = 1) # ggsave(&quot;./output plots/fig1_new.png&quot;, fig1, dpi=900, width=9, height = 6.5 ) #ggsave(&quot;./output plots/legend.png&quot;, ap[[116]], dpi=900) #export data for figure 1 # fig1a &lt;- perchlorate_plots_minimal[[19]]$data %&gt;% mutate(subfigure = &quot;A&quot;) # fig1b &lt;- ap[[2]]$data %&gt;% mutate(subfigure = &quot;B&quot;) # fig1c &lt;- ap[[21]]$data %&gt;% mutate(subfigure = &quot;C&quot;) # fig1d &lt;- ap[[118]]$data %&gt;% mutate(subfigure = &quot;D&quot;) # fig1_data &lt;- bind_rows(fig1a, fig1b, fig1c, fig1d) %&gt;% # select(subfigure,assay, spid, conc, resp) %&gt;% # write_csv(&quot;./output figure&#39;s source data/Fig.1.data.csv&quot;) 8.4 Fig. 3 # Top 15 samples graphs group ap_mini &lt;- toxplot::plot_tcpl_minimal(mc_model, sum_tbl, spid_chnm_table, notation = T) tiff(&#39;./output plots/top15v6.tiff&#39;, units=&quot;px&quot;, width=750*12.5, height=1000*12.5, res=900, compression = &quot;lzw&quot;) multiplot(ap_mini[[1]],ap_mini[[2]],ap_mini[[3]], ap_mini[[4]],ap_mini[[5]],ap_mini[[6]], ap_mini[[7]],ap_mini[[8]],ap_mini[[9]], ap_mini[[10]],ap_mini[[11]],ap_mini[[12]], ap_mini[[13]],ap_mini[[14]],ap_mini[[15]], layout = matrix(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), nrow=5, byrow=TRUE)) dev.off() # # three graphs for ETC disruption tiff(&#39;./output plots/3_ETC_Disruption.tiff&#39;, units=&quot;px&quot;, width=750*12.5, height=200*12.5, res=900, compression = &quot;lzw&quot;) multiplot(ap_mini[[17]],ap_mini[[58]], ap_mini[[42]], layout = matrix(c(1,2,3), nrow=1, byrow=TRUE)) dev.off() # # three graphs for no ranking scores # tiff(&#39;./output plots/no_score_update.tiff&#39;, units=&quot;px&quot;, width=750*12.5, height=200*12.5, res=900, compression = &quot;lzw&quot;) # multiplot(ap_mini[[146]],ap_mini[[151]], ap_mini[[144]], layout = matrix(c(1,2,3), nrow=1, byrow=TRUE)) # dev.off() # export fig.3. data # selected &lt;- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,146,151,144) # fig5_chem &lt;- sum_tbl %&gt;% # mutate(rownames = rownames(sum_tbl)) %&gt;% # filter(rownames %in% selected) %&gt;% # dplyr::select(spid, chnm) # # fig5_dt &lt;- dt_mc_norm %&gt;% # filter(spid %in% fig5_chem$spid) %&gt;% # select(spid, assay, conc, nval_median) # left_join(fig5_dt, fig5_chem, by=&quot;spid&quot;) %&gt;% # select(chnm, everything()) %&gt;% # write_csv(&quot;./output figure&#39;s source data/Fig.5.data-1.csv&quot;) # sum_tbl %&gt;% # filter(spid %in% fig5_chem$spid) %&gt;% # dplyr::select(spid, chnm, AC50_prim, absEC50_prim, ranking_score) %&gt;% # write_csv(&quot;./output figure&#39;s source data/Fig.5.data-2.csv&quot;) "],
["source.html", "9 R source code in ToxPlot package", " 9 R source code in ToxPlot package Main R functions written for this analysis were compiled as an R package ToxPlot, and version 0.1.0 is available on CRAN. For the most up-to-date version please go to the github link. Below is the source code of ToxPlot ver.0.1.0 used in this analysis. #&#39; normalize per plate #&#39; #&#39; normalize raw readings as percent of median vehicle control wells #&#39; #&#39; @param dt data.frame contains essential columns with the raw data. #&#39; @param nctrl the name (spid) of the vehicle/solvent control used for calculation #&#39; #&#39; @return data.frame with normalized value columns. &#39;nval_mean&#39; column is the normalized value #&#39; calculated using the mean of vehicle control wells, &#39;nval_median&#39; column is the normalized value #&#39; calculated using the median of vehicle control wells. #&#39; @import dplyr #&#39; #&#39; @examples #&#39; ## normalize demo data #&#39; demo_mc_norm &lt;- normalize_per_plate(demo_mc, nctrl = &quot;DMSO&quot;) #&#39; #&#39; @export normalize_per_plate &lt;- function(dt, nctrl = &quot;DMSO&quot;) { # claim variables for passing R CMD Check assay &lt;- spid &lt;- apid &lt;- rval &lt;- NULL output &lt;- data.frame() #iterate through each assay, calculate separately for (as in unique(dt$assay)) { df_t &lt;- normalize_single_assay(dplyr::filter(dt, assay == as), nctrl) output &lt;- dplyr::bind_rows(output, df_t) } return(output) } #&#39; normalize per plate (from single assay data) #&#39; #&#39; normalize raw readings as percent of median/mean vehicle control wells, per assay, per plate. #&#39; This function is called by normalize_per_plate, should not be called directly by user. #&#39; #&#39; #&#39; @param dt data.frame contains essential columns with the raw data. #&#39; @param nctrl the name (spid) of the vehicle/solvent control used for calculation #&#39; #&#39; @return data.frame with normalized value columns. &#39;nval_mean&#39; column is the normalized value #&#39; calculated using the mean of vehicle control wells, &#39;nval_median&#39; column is the normalized value #&#39; calculated using the median of vehicle control wells. #&#39; @import dplyr # normalize_single_assay &lt;- function(dt, nctrl) { # claim variables for passing R CMD Check assay &lt;- spid &lt;- apid &lt;- rval &lt;- NULL #calculate the mean and median value for negative control ctrl_avg &lt;- dt %&gt;% dplyr::filter(spid == nctrl) %&gt;% dplyr::group_by(apid) %&gt;% dplyr::summarize(mean_DMSO = mean(rval, na.rm = TRUE), median_DMSO = stats::median(rval, na.rm = TRUE)) #iterate through the data table to calculate normalized percent activity #normalization was done using both mean and median separately. temp &lt;- data.frame() for (id in ctrl_avg$apid){ med &lt;- dplyr::filter(ctrl_avg, apid == id)$median_DMSO avg &lt;- dplyr::filter(ctrl_avg, apid == id)$mean_DMSO t &lt;- dplyr::filter(dt, apid == id) %&gt;% mutate(nval_mean = 100 * rval/avg, nval_median = 100 * rval/med) temp &lt;- bind_rows(temp, t) } return(temp) } #&#39; Quality-control metrics calculation #&#39; #&#39; Calculate QC metrics, includin Z&#39; score, CV of DMSO negative control, per assay plate. #&#39; #&#39; @param d data.frame contains essential columns with the raw data. #&#39; @param resp response type, specify either &#39;nval_median&#39; or &#39;nval_mean&#39; for QC calculation #&#39; @param assay_info assay_info list, contains names of primary and cytotox assay, names must match #&#39; what are provided in the raw data, under the column &#39;assay&#39;. #&#39; #&#39; @examples #&#39; ## calculate QC measures from demo data #&#39; assay_info &lt;- list(prim_assay = &quot;Primary&quot;,toxi_assay = &quot;Cytotox&quot;) #&#39; demo_mc_norm &lt;- normalize_per_plate(demo_mc, nctrl = &quot;DMSO&quot;) #&#39; qc &lt;- qc_per_plate(demo_mc_norm, assay_info) #&#39; #&#39; @return three dataframe each representing negative control stats, positive control stats and QC metrics (CV_DMSO, Z&#39; score, SSMD) for each assay plate #&#39; @export # QC measures are calculated per 96-well palte. &#39;apid&#39; plus &#39;assay&#39; column can serve as the ID to distinguish each plate. qc_per_plate &lt;- function(d, assay_info, resp = &quot;nval_median&quot;) { # claim variables for passing R CMD Check assay &lt;- apid &lt;- wllt &lt;- conc &lt;- CV_DMSO &lt;- SSMD &lt;- Z_prime &lt;- logc &lt;- mean_DMSO &lt;- mean_positive &lt;- NULL sd_positive &lt;- sd_DMSO &lt;- unique_id &lt;- NULL # choose which normalized value to use (median based or mean based) if (resp == &quot;nval_mean&quot;) { d$resp &lt;- d$nval_mean } else if (resp == &quot;nval_median&quot;) { d$resp &lt;- d$nval_median } else { stop(&quot;specify either nval_median or nval_mean for QC calculation&quot;) } # create unique ID for each plate (apid + assay) # (can also distinguish between primary and cytotox assays) # group by the unique ID. d &lt;- d %&gt;% #dplyr::mutate(uid = paste(apid, assay)) %&gt;% # dplyr::group_by(pid, assay, repi) dplyr::group_by(apid, assay) # calculate vehicle control (e.g., DMSO etc.) qc stats # use welltype = n to identify vehicle control n_ctrl_sum &lt;- d %&gt;% dplyr::filter(wllt == &quot;n&quot;) %&gt;% dplyr::summarize(count_DMSO = n(), #count of DMSO control wells on each plate count_DMSO_NA = sum(is.na(resp)), #count of DMSO control wells with missing values mean_DMSO = mean(resp, na.rm = TRUE), sd_DMSO = stats::sd(resp, na.rm = TRUE), CV_DMSO = 100 * stats::sd(resp, na.rm = TRUE) / mean(resp, na.rm = TRUE) # median_DMSO= median(resp, na.rm=TRUE), # mad_DMSO= mad(resp, constant = 1, na.rm=TRUE), # bmad_DMSO= mad(resp, constant = 1.4826, na.rm=TRUE), # three_bmad = 3*bmad_DMSO ) # calculate positive control stats pctrl_prim &lt;- d %&gt;% dplyr::filter(assay == assay_info$prim_assay, wllt == &quot;pr&quot;) %&gt;% dplyr::filter(conc == max(conc)) %&gt;% dplyr::summarize(sd_positive = stats::sd(resp, na.rm = TRUE), mean_positive= mean(resp, na.rm = TRUE)) pctrl_toxi &lt;- d %&gt;% dplyr::filter(assay == assay_info$toxi_assay, wllt == &quot;pc&quot;) %&gt;% dplyr::filter(conc == max(conc)) %&gt;% dplyr::summarize(sd_positive = stats::sd(resp, na.rm = TRUE), mean_positive = mean(resp, na.rm = TRUE)) p_ctrl_sum &lt;- bind_rows(pctrl_prim, pctrl_toxi) remove(pctrl_toxi, pctrl_prim) # calculate Z&#39;, SSMD qc &lt;- dplyr::left_join(p_ctrl_sum, n_ctrl_sum, by=c(&quot;apid&quot;=&quot;apid&quot;, &quot;assay&quot;=&quot;assay&quot;)) %&gt;% #replace NaN with 0 in sd_positive dplyr::mutate(sd_positive = (ifelse(is.na(sd_positive), 0, sd_positive))) %&gt;% dplyr::mutate(Z_prime = 1 - 3*(sd_positive + sd_DMSO) / (abs(mean_positive - mean_DMSO)), SSMD = (abs(mean_positive - mean_DMSO) / sqrt(sd_positive^2 + sd_DMSO^2))) %&gt;% dplyr::mutate(unique_id = paste(apid, assay, sep = &quot;_&quot;)) %&gt;% dplyr::select(unique_id, apid, assay, CV_DMSO, Z_prime, SSMD) list(neg_ctrl_sum = n_ctrl_sum, pos_ctrl_sum = p_ctrl_sum, qc = qc) } #&#39; hill mode in ToxCast tcpl package #&#39; #&#39; @param p a vector containing the Hill model parameters: top, log AC50, hill coefficient #&#39; @param x a vector of log concentrations #&#39; @return calculated y value based on the x and model parameters #&#39; hill_model &lt;- function(p, x) { y &lt;- p[1] / (1 + 10 ^ ((p[2] - x) * p[3])) return(y) } # ##========inversed hill model (using 100- the Y value)=======## # hill_model_inverse &lt;- function(p, x) { # ### p: a numeric vector of length 4 containg the starting values for # ### the hill model, in order: top, log AC50, hill # ### coefficient # ### x: a numeric vector containing the log concentration values # # y &lt;- 100 - (p[1] / (1 + 10 ^ ((p[2] - x) * p[3]))) # return(y) # } #&#39; calculate absolute EC_anything based on tcpl hill model #&#39; #&#39; @param p a vector containing the Hill model parameters: top, log AC50, hill coefficient #&#39; @param y the y value #&#39; @return calculated x value log_abs_ec &lt;- function(p, y) { ## y value is the absolute response value ##p[1] is top parameter ##p[2] is ga, logac50 ##p[3] is gw, hillslope suppressWarnings(x &lt;- p[2] - log10((p[1] - y) / y) / p[3]) if (is.nan(x)) {x &lt;- NA} return(x) } #&#39; function to calculate Area Under the Curve (AUC) of the hill model #&#39; #&#39; @param p a vector containing the Hill model parameters: top, log AC50, hill coefficient #&#39; @param lower lower boundary of x for integration #&#39; @param upper upper boundary of x for integration #&#39; @return calculated area under the curve (AUC) value #&#39; auc_hill_tcpl &lt;- function(p, lower, upper) { #define the hill model function hill &lt;- function(x) { p[1] / (1 + 10 ^ ((p[2] - x) * p[3])) } a &lt;- stats::integrate(hill, lower = lower, upper = upper) return(a[[1]]) } #&#39; fit dose-resopnse curve using tcpl hill model #&#39; #&#39; Curve fitting using the tcplFit function in `tcpl` package. #&#39; Chemicals are modelled based on spid. #&#39; If you want to model the same chemical (e.g. positive controls), #&#39; then assign different spid to this chemical so the function can separate them out. #&#39; Absolute IC20 and absolute IC50 are calculated as well. #&#39; #&#39; @param df input data contain normalized assay readings #&#39; @param assay_info predefined names for primary and cytotoxicity assays, #&#39; use NULL if either one of the assay does not need to be modeled. #&#39; @param prim_cutoff significance cutoff for primary assay (eg. 3sigma or 3bMAD) #&#39; @param toxi_cutoff significance cutoff for cytotoxicity assay (eg. 3sigma or 3bMAD) #&#39; #&#39; @return A list object containing modeling results, the corresponding data for each chemical. #&#39; #&#39; @examples #&#39; ## fit curve with default significant threshold 20 #&#39; #&#39; demo_md &lt;- fit_curve_tcpl(mc_norm, assay_info = #&#39; list(prim_assay = &quot;Primary&quot;, toxi_assay = &quot;Cytotox&quot;)) #&#39; #&#39; ## start from raw data #&#39; # define assay #&#39; assay_info &lt;- list(prim_assay = &quot;Primary&quot;,toxi_assay = &quot;Cytotox&quot;) #&#39; # data normalization #&#39; demo_mc_norm &lt;- normalize_per_plate(demo_mc, nctrl = &quot;DMSO&quot;) #&#39; # filter out test chemicals only #&#39; demo_mc_norm &lt;- dplyr::filter(demo_mc_norm, wllt == &quot;t&quot;) #&#39; # fit curve with default 20% threshold #&#39; demo_md &lt;- fit_curve_tcpl(demo_mc_norm, assay_info) #&#39; #&#39; ## fit curve with specified significance threshold #&#39; demo_md &lt;- fit_curve_tcpl(demo_mc_norm, assay_info, prim_cutoff = 25, toxi_cutoff = 25) #&#39; #&#39; #&#39; @import dplyr #&#39; @export fit_curve_tcpl &lt;- function(df, assay_info, prim_cutoff = 20, toxi_cutoff = 20) { # claim variables for passing R CMD Check conc &lt;- spid &lt;- assay &lt;- apid &lt;- NULL st_time &lt;- Sys.time() r_list &lt;- list() c_list &lt;- list() bmad_prim &lt;- prim_cutoff/3 bmad_toxi &lt;- toxi_cutoff/3 # get log concentration df &lt;- df %&gt;% dplyr::mutate(logc = log10(conc)) spid_list &lt;- unique(df$spid) if (is.null(assay_info$prim) &amp; is.null(assay_info$toxi_assay)) { stop(&quot;assay_info cannot be NULL for both primary and cytotoxicity assay&quot;) } n &lt;- 1 prim_md &lt;- toxi_md &lt;- model_list &lt;- list() cat(&quot;Processing&quot;, length(unique(df$spid)), &quot;samples(spid)....\\n&quot;) # process by each spid for (id in unique(df$spid)) { #d &lt;- df %&gt;% dplyr::filter(spid == i) cat(id, &quot;||&quot;) # model raiu data # check if toxi assay data is available, if not, skip modeling if (is.null(assay_info$prim_assay)) { prim_md &lt;- NA prim_dt &lt;- NA } else { prim_dt &lt;- df %&gt;% dplyr::filter(spid == id, assay == assay_info$prim_assay) m &lt;- tcpl::tcplFit(logc = prim_dt$logc, resp = 100 - prim_dt$nval_median, bmad_prim) absIC50 &lt;- log_abs_ec(c(m$hill_tp, m$hill_ga, m$hill_gw), 50) absIC20 &lt;- log_abs_ec(c(m$hill_tp, m$hill_ga, m$hill_gw), 20) m[[&quot;absIC20&quot;]] &lt;- absIC20 m[[&quot;absIC50&quot;]] &lt;- absIC50 m[[&quot;apid&quot;]] &lt;- prim_dt[[1,1]] m[[&quot;assay&quot;]] &lt;- assay_info$prim_assay m[[&quot;spid&quot;]] &lt;- id #prim_md &lt;- dplyr::bind_rows(prim_md, m) # print(m) prim_md &lt;- data.frame(m) %&gt;% dplyr::select(apid, assay, spid, everything()) } # model cytotox data # check if toxi assay data is available, if not, skip modeling if (is.null(assay_info$toxi_assay)) { toxi_md &lt;- NA toxi_dt &lt;- NA } else { toxi_dt &lt;- df %&gt;% dplyr::filter(spid == id, assay==assay_info$toxi_assay) m &lt;- tcpl::tcplFit(logc = toxi_dt$logc, resp = 100 - toxi_dt$nval_median, bmad_toxi) absIC50 &lt;- log_abs_ec(c(m$hill_tp, m$hill_ga, m$hill_gw), 50) absIC20 &lt;- log_abs_ec(c(m$hill_tp, m$hill_ga, m$hill_gw), 20) m[[&quot;absIC20&quot;]] &lt;- absIC20 m[[&quot;absIC50&quot;]] &lt;- absIC50 m[[&quot;apid&quot;]] &lt;- toxi_dt[[1,1]] m[[&quot;assay&quot;]] &lt;- assay_info$toxi_assay m[[&quot;spid&quot;]] &lt;- id #toxi_md &lt;- dplyr::bind_rows(toxi_md, m) toxi_md &lt;- data.frame(m) %&gt;% dplyr::select(apid, assay, spid, everything()) } #build final model list model_list[[n]] &lt;- list(spid = id, model_prim = prim_md, model_toxi = toxi_md, data_prim = prim_dt, data_toxi = toxi_dt, cutoff_prim = prim_cutoff, cutoff_toxi = toxi_cutoff, assay_info = assay_info) n &lt;- n + 1 } time &lt;- difftime(Sys.time(), st_time) %&gt;% round(1) cat(&quot;\\nCurve Fitting Completed!\\nCalculation time:&quot;, paste(unclass(time), units(time)), &quot;\\n\\n&quot;) return(model_list) } #&#39; function to calculate ranking score, TAA, med_diff, EC values based on tcpl hill model #&#39; #&#39; calculate ranking score, TAA, med_diff, absolute EC values, AC50, based on the hill model in tcpl package #&#39; #&#39; @param tcpl_models the list object returned by &#39;fit_curve_tcpl&#39; function #&#39; @param spid_chnm_table a reference table with &#39;spid&#39; and the corresponding chemical name &#39;chnm&#39; column, #&#39; and the CAS number &#39;casn&#39; column. #&#39; @param med_taa the median TAA value from reference chemical, if not supplied, then ranking score won&#39;t be calculated. #&#39; @param med_med_diff the median Median-Difference from reference chemical, if not supplied, then ranking score won&#39;t be calculated. #&#39; @return a dataframe containing ranking metrics for each chemical (spid) #&#39; #&#39; @examples #&#39; ## start with normalized data #&#39; demo_md &lt;- fit_curve_tcpl(mc_norm, assay_info = #&#39; list(prim_assay = &quot;Primary&quot;, toxi_assay = &quot;Cytotox&quot;)) #&#39; demo_rank &lt;- rank_tcpl(demo_md) #&#39; #&#39; #&#39; ## start from raw data #&#39; # define assay #&#39; assay_info &lt;- list(prim_assay = &quot;Primary&quot;,toxi_assay = &quot;Cytotox&quot;) #&#39; # data normalization #&#39; demo_mc_norm &lt;- normalize_per_plate(demo_mc, nctrl = &quot;DMSO&quot;) #&#39; # filter out test chemicals only #&#39; demo_mc_norm &lt;- dplyr::filter(demo_mc_norm, wllt == &quot;t&quot;) #&#39; # fit curve with default 20% threshold #&#39; demo_md &lt;- fit_curve_tcpl(demo_mc_norm, assay_info) #&#39; # calculate TAA and Med_diff only #&#39; demo_rank &lt;- rank_tcpl(demo_md, med_taa = NULL, med_med_diff = NULL) #&#39; #&#39; ## calculate ranking score with specified median TAA and meidan Med_Difference #&#39; demo_rank &lt;- rank_tcpl(demo_md, med_taa = 150, med_med_diff = 92) #&#39; #&#39; @export #&#39; rank_tcpl &lt;- function(tcpl_models, spid_chnm_table = NULL, med_taa = NULL, med_med_diff = NULL) { # claim variables for passing R CMD Check taa_norm &lt;- med_diff_norm &lt;- ranking_score &lt;- spid &lt;- logc &lt;- nval_median &lt;- NULL df &lt;- data.frame() ##iterate through each spid for (i in seq_along(tcpl_models)) { #get chemical sample id &#39;spid&#39; .spid &lt;- tcpl_models[[i]]$spid # print(i) # print(.spid) #get chnm if (!is.null(spid_chnm_table)) { chnm &lt;- dplyr::filter(spid_chnm_table, spid == .spid)$chnm casn &lt;- dplyr::filter(spid_chnm_table, spid == .spid)$casn } else { chnm &lt;- NA casn &lt;- NA } assay_info &lt;- tcpl_models[[i]]$assay_info if (is.null(assay_info$toxi_assay)) { stop(&quot;No toxi_assay, ranking score is not calculable!&quot;) } #extract modelling results m_toxi &lt;- tcpl_models[[i]]$model_toxi m_prim &lt;- tcpl_models[[i]]$model_prim #cutoff cutoff_prim &lt;- tcpl_models[[i]]$cutoff_prim cutoff_toxi &lt;- tcpl_models[[i]]$cutoff_toxi # #calculate med_diff at max(logc) max_prim &lt;- tcpl_models[[i]]$data_prim %&gt;% dplyr::filter(logc == max(logc)) %&gt;% dplyr::summarize(median = stats::median(nval_median)) max_toxi &lt;- tcpl_models[[i]]$data_toxi %&gt;% dplyr::filter(logc == max(logc)) %&gt;% dplyr::summarize(median = stats::median(nval_median)) med_diff &lt;- max_toxi$median - max_prim$median ##get auc, logEC_3bmadprim, for prim if (!is.na(m_prim$hill) &amp; m_prim$hill == 1) { para_prim &lt;- c(m_prim$hill_tp, m_prim$hill_ga, m_prim$hill_gw) #get auc lr &lt;- log_abs_ec(para_prim, cutoff_prim) aa_prim &lt;- auc_hill_tcpl(para_prim, lower = lr, upper = m_prim$logc_max) - cutoff_prim * (m_prim$logc_max - lr) #get AC50 AC50_prim &lt;- m_prim$hill_ga #get absEC if (hill_model(para_prim,m_prim$logc_max) &gt; 50) { absEC50_prim &lt;- log_abs_ec(para_prim, 50) absEC80_prim &lt;- log_abs_ec(para_prim, 20) } else if (hill_model(para_prim,m_prim$logc_max) &gt; 20) { absEC50_prim &lt;- NA absEC80_prim &lt;- log_abs_ec(para_prim, 20) } else { absEC80_prim &lt;- NA absEC50_prim &lt;- NA } } else { aa_prim &lt;- NA lr &lt;- NA absEC80_prim &lt;- NA absEC50_prim &lt;- NA AC50_prim &lt;- NA } ##get auc, logEC_3bmadprim, for toxitox if (!is.na(m_toxi$hill) &amp; m_toxi$hill == 1) { para_toxi &lt;- c(m_toxi$hill_tp, m_toxi$hill_ga, m_toxi$hill_gw) #get AC50 AC50_toxi &lt;- m_toxi$hill_ga #get aa_toxi if (hill_model(para_toxi,m_prim$logc_max) &gt; cutoff_prim) { lc &lt;- log_abs_ec(para_toxi, cutoff_prim) aa_toxi &lt;- auc_hill_tcpl(para_toxi,lower = lc, upper = m_prim$logc_max) - cutoff_prim * (m_prim$logc_max - lc) } else { aa_toxi &lt;- NA lc &lt;- -3 } #calculate absEC if (hill_model(para_toxi,m_prim$logc_max) &gt; 50) { absEC50_toxi &lt;- log_abs_ec(para_toxi, 50) absEC80_toxi &lt;- log_abs_ec(para_toxi, 20) } else if (hill_model(para_toxi,m_prim$logc_max) &gt; 20) { absEC50_toxi &lt;- NA absEC80_toxi &lt;- log_abs_ec(para_toxi, 20) } else { absEC80_toxi &lt;- NA absEC50_toxi &lt;- NA } #get cytotox limit (absEC_cutoff_toxi) absEC_ct_toxi &lt;- log_abs_ec(para_toxi, cutoff_toxi) } else { aa_toxi &lt;- NA lc &lt;- -3 absEC80_toxi &lt;- NA absEC50_toxi &lt;- NA AC50_toxi &lt;- NA absEC_ct_toxi &lt;- NA } ##calculate taa if (is.na(aa_prim)) { taa &lt;- NA } else if (is.na(aa_toxi)) { taa &lt;- aa_prim } else { taa &lt;- aa_prim - aa_toxi } ##calculate selectivity based logEC value at 3bmad of prim assay. if (is.na(lr)) { selectivity_3bmad &lt;- NA } else { selectivity_3bmad &lt;- lc - lr } ##calculate selectivity based on logAC50 (original method) if (is.na(m_prim$hill_ga)) { selectivity_AC50 &lt;- NA } else if (is.na(m_toxi$hill_ga)) { selectivity_AC50 &lt;- -3 - m_prim$hill_ga } else { selectivity_AC50 &lt;- m_toxi$hill_ga - m_prim$hill_ga } ##gather taa and selectivity into one table t &lt;- data.frame( index = i, spid = .spid, chnm = chnm, casn = casn, # aa_toxi = aa_toxi, # aa_prim = aa_prim, taa = taa, # sel_3bMAD = selectivity_3bmad, # sel_AC50 = selectivity_AC50, med_diff = med_diff, AC50_toxi = AC50_toxi, AC50_prim = AC50_prim, absEC80_toxi = absEC80_toxi, absEC50_toxi = absEC50_toxi, absEC80_prim = absEC80_prim, absEC50_prim = absEC50_prim, cyto_lim = absEC_ct_toxi ) df &lt;- base::rbind(df, t) } #calculate ranking_score #this done by adding 0-100 rescaled TAA value an med_diff value # df &lt;- df %&gt;% # dplyr::mutate(taa_rescale = rescale_0_100(taa), # med_diff_rescale = rescale_0_100(med_diff), # ranking_score = taa_rescale + med_diff_rescale ) %&gt;% # dplyr::arrange(desc(ranking_score)) if (is.null(med_taa)&amp;is.null(med_med_diff)) { df &lt;- df %&gt;% dplyr::mutate(ranking_score = NA) } else { df &lt;- df %&gt;% dplyr::mutate(taa_norm = taa/med_taa*100, med_diff_norm = med_diff/med_med_diff*100, ranking_score = taa_norm + med_diff_norm ) %&gt;% dplyr::arrange(desc(ranking_score)) } return(df) } #&#39; function to summarize curve fitting results #&#39; #&#39; @param tcpl_models the list object returned by &#39;fit_curve_tcpl&#39; function #&#39; @param spid_chnm_table a reference table with &#39;spid&#39; and the corresponding chemical name &#39;chnm&#39; column, #&#39; and the CAS number &#39;casn&#39; column. #&#39; @return a data.frame contains summarized metrics for each chemical (spid) #&#39; #&#39; @examples #&#39; ## supply models as the essential argument. spid_chnm_table is optional. #&#39; demo_md &lt;- fit_curve_tcpl(mc_norm, assay_info = #&#39; list(prim_assay = &quot;Primary&quot;, toxi_assay = &quot;Cytotox&quot;)) #&#39; demo_sum &lt;- summary_tcpl(demo_md) #&#39; #&#39; #&#39; ## start from raw data #&#39; # define assay #&#39; assay_info &lt;- list(prim_assay = &quot;Primary&quot;,toxi_assay = &quot;Cytotox&quot;) #&#39; # data normalization #&#39; demo_mc_norm &lt;- normalize_per_plate(demo_mc, nctrl = &quot;DMSO&quot;) #&#39; # filter out test chemicals only #&#39; demo_mc_norm &lt;- dplyr::filter(demo_mc_norm, wllt == &quot;t&quot;) #&#39; # fit curve with default 20% threshold #&#39; demo_md &lt;- fit_curve_tcpl(demo_mc_norm, assay_info) #&#39; # obtain summary table #&#39; demo_sum &lt;- summary_tcpl(demo_md) #&#39; #&#39; @export #&#39; summary_tcpl &lt;- function(tcpl_models, spid_chnm_table = NULL) { # claim variables for passing R CMD Check spid &lt;- NULL df &lt;- data.frame() ##iterate through each spid for (i in seq_along(tcpl_models)) { #get chemical sample id &#39;spid&#39; .spid &lt;- tcpl_models[[i]]$spid # print(i) # print(.spid) #get chnm if (!is.null(spid_chnm_table)) { chnm &lt;- dplyr::filter(spid_chnm_table, spid == .spid)$chnm casn &lt;- dplyr::filter(spid_chnm_table, spid == .spid)$chnm } else { chnm &lt;- NA } #extract modelling results m_toxi &lt;- tcpl_models[[i]]$model_toxi m_prim &lt;- tcpl_models[[i]]$model_prim #cutoff cutoff_prim &lt;- tcpl_models[[i]]$cutoff_prim cutoff_toxi &lt;- tcpl_models[[i]]$cutoff_toxi #get assay_info assay_info &lt;- tcpl_models[[i]]$assay_info ##get metrics for prim if (is.null(assay_info$prim_assay)) { absEC80_prim &lt;- NA absEC50_prim &lt;- NA AC50_prim &lt;- NA } else { if (!is.na(m_prim$hill) &amp; m_prim$hill == 1) { para_prim &lt;- c(m_prim$hill_tp, m_prim$hill_ga, m_prim$hill_gw) #get AC50 AC50_prim &lt;- m_prim$hill_ga #get absEC if (hill_model(para_prim, m_prim$logc_max) &gt; 50) { absEC50_prim &lt;- log_abs_ec(para_prim, 50) absEC80_prim &lt;- log_abs_ec(para_prim, 20) } else if (hill_model(para_prim,m_prim$logc_max) &gt; 20) { absEC50_prim &lt;- NA absEC80_prim &lt;- log_abs_ec(para_prim, 20) } else { absEC80_prim &lt;- NA absEC50_prim &lt;- NA } } else { absEC80_prim &lt;- NA absEC50_prim &lt;- NA AC50_prim &lt;- NA } } ##get metrics for toxi if (is.null(assay_info$toxi_assay)) { absEC80_toxi &lt;- NA absEC50_toxi &lt;- NA AC50_toxi &lt;- NA } else { if (!is.na(m_toxi$hill) &amp; m_toxi$hill == 1) { para_toxi &lt;- c(m_toxi$hill_tp, m_toxi$hill_ga, m_toxi$hill_gw) #get AC50 AC50_toxi &lt;- m_toxi$hill_ga #calculate absEC if (hill_model(para_toxi,m_toxi$logc_max) &gt; 50) { absEC50_toxi &lt;- log_abs_ec(para_toxi, 50) absEC80_toxi &lt;- log_abs_ec(para_toxi, 20) } else if (hill_model(para_toxi,m_toxi$logc_max) &gt; 20) { absEC50_toxi &lt;- NA absEC80_toxi &lt;- log_abs_ec(para_toxi, 20) } else { absEC80_toxi &lt;- NA absEC50_toxi &lt;- NA } } else { absEC80_toxi &lt;- NA absEC50_toxi &lt;- NA AC50_toxi &lt;- NA } } ##gather taa and selectivity into one table t &lt;- data.frame( index = i, spid = .spid, chnm = chnm, AC50_toxi = AC50_toxi, AC50_prim = AC50_prim, absEC80_toxi = absEC80_toxi, absEC50_toxi = absEC50_toxi, absEC80_prim = absEC80_prim, absEC50_prim = absEC50_prim ) df &lt;- base::rbind(df, t) } return(df) } #&#39; Plot dose-resonse curves based on the tcpl hill model #&#39; #&#39; Produce the plot for the dose-response curves and data points for both primary and toxicity assay. #&#39; The direction of the data and dose-resonse curves are presented as the original data, rather than #&#39; the uptrend direction required by the &#39;tcpl&#39; function. Plots are sorted by the ranking_score. #&#39; #&#39; @param tcpl_models the list object created by &#39;fit_curve_tcpl&#39; function #&#39; @param rank_table the data.frame output from &#39;rank_tcpl&#39; function #&#39; @param spid_chnm_table the spid, chnm, casn info table #&#39; @param notation value can be TRUE or FALSE, determine whehter to show potency metrics on the plot #&#39; @param cunit the unit of concentration, on default is &quot;M&quot; (molar). #&#39; #&#39; @return list of ggplot2 objects, each corresponding to one spid. #&#39; @import ggthemes ggplot2 #&#39; #&#39; @examples #&#39; ## produce plots without notations #&#39; demo_md &lt;- fit_curve_tcpl(mc_norm, assay_info = #&#39; list(prim_assay = &quot;Primary&quot;, toxi_assay = &quot;Cytotox&quot;)) #&#39; plots &lt;- plot_tcpl(demo_md) #&#39; #&#39; #&#39; ## start from raw data #&#39; # define assay #&#39; assay_info &lt;- list(prim_assay = &quot;Primary&quot;,toxi_assay = &quot;Cytotox&quot;) #&#39; # data normalization #&#39; demo_mc_norm &lt;- normalize_per_plate(demo_mc, nctrl = &quot;DMSO&quot;) #&#39; # filter out test chemicals only #&#39; demo_mc_norm &lt;- dplyr::filter(demo_mc_norm, wllt == &quot;t&quot;) #&#39; # fit curve with default 20% threshold #&#39; demo_md &lt;- fit_curve_tcpl(demo_mc_norm, assay_info) #&#39; # calculate TAA and Med_diff only #&#39; demo_rank &lt;- rank_tcpl(demo_md, med_taa = NULL, med_med_diff = NULL) #&#39; #produce plots with notations #&#39; demo_plots &lt;- plot_tcpl(demo_md, demo_rank, notation = TRUE) #&#39; #&#39; ##produce plots with notations, with changed concentration unit displayed on the plot #&#39; demo_plots &lt;- plot_tcpl(demo_md, demo_rank, notation = TRUE, cunit = &quot;uM&quot;) #&#39; #&#39; @export #&#39; #&#39; plot_tcpl &lt;- function(tcpl_models, rank_table=NULL, spid_chnm_table = NULL, notation = FALSE, cunit = &quot;M&quot;) { # claim variables for passing R CMD Check spid &lt;- nval_median &lt;- logc &lt;- resp &lt;- pred &lt;- assay &lt;- NULL #initiate empty output plot list plot_list &lt;- list() #reorder if rank is available if (!is.null(rank_table)) { tcpl_models &lt;- tcpl_models[rank_table$index] } #loop through tcpl_models&#39;s unique spid. #note tcpl_models is the level 4 output from tcpl package, including all the modelling results for (i in seq_along(tcpl_models)) { #get chemical sample id and chemical name .spid &lt;- tcpl_models[[i]]$spid #print(.spid) if (!is.null(spid_chnm_table)) { chnm &lt;- dplyr::filter(spid_chnm_table, spid == .spid)$chnm casn &lt;- dplyr::filter(spid_chnm_table, spid == .spid)$casn } else { chnm &lt;- NA casn &lt;- NA } #cutoff cutoff_prim &lt;- tcpl_models[[i]]$cutoff_prim cutoff_toxi &lt;- tcpl_models[[i]]$cutoff_toxi #assay_info assay_info &lt;- tcpl_models[[i]]$assay_info #get normalized resonse value (cytotox and raiu together) #and use 100 minus the response value (inverse the plot) d &lt;- dplyr::bind_rows(tcpl_models[[i]]$data_prim, tcpl_models[[i]]$data_toxi) %&gt;% dplyr::mutate(resp = nval_median) #%&gt;% #mutate(assay = ifelse(aeid == 1, assay_info$toxi_assay, assay_info$prim_assay)) #determine left and right x boundary of the plot if ( round(max(d$logc)) &lt; max(d$logc) ) { rb &lt;- round(max(d$logc)) + 1 } else { rb &lt;- round(max(d$logc))} lb &lt;- round(min(d$logc))-1 #initiate basic plot with data points. g &lt;- ggplot(d, aes(x = logc, y = resp)) if (!is.null(spid_chnm_table)){ g &lt;- g + labs( title = paste(i, &quot;. SPID: &quot;, .spid, &quot;\\nNAME: &quot;, chnm, &quot;\\nCAS NO: &quot;, casn, sep = &quot;&quot;), x = paste(&quot;Concentration (log&quot;, cunit, &quot;)&quot;, sep = &quot;&quot;), y = &quot;% Control Activity&quot; ) } else { g &lt;- g + labs( title = paste(i, &quot;. SPID:&quot; , .spid), x = paste(&quot;Concentration (log&quot;, cunit, &quot;)&quot;, sep = &quot;&quot;), y = &quot;% Control Activity&quot; ) } # labs( # title = paste(i, &quot;\\nSPID: &quot; , .spid, &quot;\\nNAME: &quot;, chnm, &quot;\\nCAS NO: &quot;, casn, sep = &quot;&quot;), # x = &quot;Concentration (logM)&quot;, # y = &quot;% Control Activity&quot; # ) #extract modelling results m_toxi &lt;- tcpl_models[[i]]$model_toxi m_prim &lt;- tcpl_models[[i]]$model_prim #create 100 concentrations s &lt;- expand.grid(logc = seq(lb, rb, length = 130)) #test and plot cytotox model if (!is.na(m_toxi$hill) &amp; m_toxi$hill == 1) { para_cyto &lt;- c(m_toxi$hill_tp, m_toxi$hill_ga, m_toxi$hill_gw) p1 &lt;- 100 - hill_model(para_cyto, s) p1 &lt;- dplyr::bind_cols(s, data.frame(p1)) names(p1) &lt;- c(&quot;logc&quot;, &quot;pred&quot;) g &lt;- g + geom_line( data = p1, aes(x = logc, y = pred), size = 2, alpha = 0.9, color = &quot;#e02929&quot; ) #plot the vertical line at 3bmad cutoff #g &lt;- g+ geom_vline(xintercept = log_abs_ec(para_cyto, 3*m_toxi$bmad) ) } #test and plot raiu model if (!is.na(m_prim$hill) &amp; m_prim$hill == 1) { para_raiu &lt;- c(m_prim$hill_tp, m_prim$hill_ga, m_prim$hill_gw) p2 &lt;- 100 - hill_model(para_raiu, s) p2 &lt;- bind_cols(s, data.frame(p2)) names(p2) &lt;- c(&quot;logc&quot;, &quot;pred&quot;) g &lt;- g + geom_line( data = p2, aes(x = logc, y = pred), size = 2, alpha = 0.9, color = &quot;#377eb8&quot; ) } #draw 3bmad cutoff line for cytotox and raiu respectively g &lt;- g + geom_hline( yintercept = 100 - cutoff_toxi, alpha = 0.5, size = 0.5, linetype = &quot;dashed&quot;, color = &quot;#e02929&quot; ) g &lt;- g + geom_hline( yintercept = 100 - cutoff_prim, alpha = 0.5, size = 0.5, linetype = &quot;dashed&quot;, color = &quot;#377eb8&quot; ) #plot data points #aesthetics fixes g &lt;- g + geom_point( aes(color = assay), shape = 21, alpha = 0.9, size = 3 ) + coord_fixed( ylim = c(0, 125), #xlim = c(-10, -4), ratio = 4 / 120 #used to be 2/70, when x axis was from -9 to -4. ) + scale_y_continuous(breaks = seq( from = 0, to = 120, by = 20 )) + scale_x_continuous(breaks = seq( from = lb, to = rb, by = 1 )) + theme_few() + theme(legend.title = element_blank()) + scale_color_manual(values=c(&quot;#e02929&quot;, &quot;#377eb8&quot;))+ theme(plot.title=element_text(hjust=0.5)) ##adding annotations if (!is.null(rank_table) &amp; notation == TRUE) { #Get ec and ranking info ds &lt;- rank_table %&gt;% dplyr::filter(spid==.spid) ds &lt;- round_df(ds, digits=2) #annotate with text info if (is.na(ds$ranking_score)) { line1 &lt;- &quot;&quot;} else { line1 &lt;- paste(&quot;Ranking_Score:&quot;, ds$ranking_score) } line2 &lt;- paste(&quot;TAA:&quot;, ds$taa) line3 &lt;- paste(&quot;Med_Diff:&quot;, ds$med_diff) line4 &lt;- paste(assay_info$prim_assay, &quot;_AC50: &quot;, ds$AC50_prim, sep = &quot;&quot;) line5 &lt;- paste(assay_info$prim_assay, &quot;_absEC50: &quot;, ds$absEC50_prim, sep = &quot;&quot;) #line6 &lt;- paste(assay_info$prim_assay, &quot;_absEC80: &quot;, ds$absEC80_prim, sep = &quot;&quot;) g &lt;- g + annotate(&quot;text&quot;, x= lb + 0.8, y = 30, alpha = 0.8, hjust=0, label=line1) + annotate(&quot;text&quot;, x= lb + 0.8, y = 25, alpha = 0.8, hjust=0, label= line2) + annotate(&quot;text&quot;, x= lb + 0.8, y = 20, alpha = 0.8, hjust=0, label= line3) + annotate(&quot;text&quot;, x= lb + 0.8, y = 15, alpha = 0.8, hjust=0, label= line4) + annotate(&quot;text&quot;, x= lb + 0.8, y = 10, alpha = 0.8, hjust=0, label= line5) #annotate(&quot;text&quot;, x= lb + 0.8, y = 5, alpha = 0.8, hjust=0, label= line6) } #collect all plots into a list plot_list[[i]] &lt;- g } return(plot_list) } #&#39; Plot dose-resonse curves with minimal text annotation #&#39; This funciton plots dose-response curve with minimal text annotation, #&#39; no x and y axis label, 0 borders. Useful when need to present several plots #&#39; together. #&#39; @param tcpl_models the list object created by &#39;fit_curve_tcpl&#39; function #&#39; @param rank_table the data.frame output from &#39;rank_tcpl&#39; function #&#39; @param spid_chnm_table the spid, chnm, casn info table #&#39; @param notation value can be TRUE or FALSE, determine whehter to show potency metrics on the plot #&#39; @param cunit the unit of concentration, on default is &quot;M&quot; (molar). #&#39; #&#39; @return list of ggplot2 objects, each corresponding to one spid. #&#39; @import ggthemes ggplot2 #&#39; #&#39; @examples #&#39; ## produce plots without notations #&#39; demo_md &lt;- fit_curve_tcpl(mc_norm, assay_info = #&#39; list(prim_assay = &quot;Primary&quot;, toxi_assay = &quot;Cytotox&quot;)) #&#39; plots_minimal &lt;- plot_tcpl_minimal(demo_md) #&#39; #&#39; ## start from raw data #&#39; # define assay #&#39; assay_info &lt;- list(prim_assay = &quot;Primary&quot;,toxi_assay = &quot;Cytotox&quot;) #&#39; # data normalization #&#39; demo_mc_norm &lt;- normalize_per_plate(demo_mc, nctrl = &quot;DMSO&quot;) #&#39; # filter out test chemicals only #&#39; demo_mc_norm &lt;- dplyr::filter(demo_mc_norm, wllt == &quot;t&quot;) #&#39; # fit curve with default 20% threshold #&#39; demo_md &lt;- fit_curve_tcpl(demo_mc_norm, assay_info) #&#39; # calculate TAA and Med_diff only #&#39; demo_rank &lt;- rank_tcpl(demo_md, med_taa = NULL, med_med_diff = NULL) #&#39; #produce plots with notations #&#39; demo_plots &lt;- plot_tcpl_minimal(demo_md, demo_rank, notation = TRUE) #&#39; #&#39; ##produce plots with notations, with changed concentration unit displayed on the plot #&#39; demo_plots &lt;- plot_tcpl_minimal(demo_md, demo_rank, notation = TRUE, cunit = &quot;uM&quot;) #&#39; #&#39; #&#39; #&#39; #&#39; @export #&#39; #&#39; plot_tcpl_minimal &lt;- function(tcpl_models, rank_table = NULL, spid_chnm_table = NULL, notation = FALSE, cunit = &quot;M&quot;) { # claim variables for passing R CMD Check spid &lt;- nval_median &lt;- logc &lt;- resp &lt;- pred &lt;- assay &lt;- NULL #initiate empty output plot list plot_list &lt;- list() #reorder if rank is available if (!is.null(rank_table)) { tcpl_models &lt;- tcpl_models[rank_table$index] } #loop through tcpl_models&#39;s unique spid. #note tcpl_models is the level 4 output from tcpl package, including all the modelling results for (i in seq_along(tcpl_models)) { #get chemical sample id and chemical name .spid &lt;- tcpl_models[[i]]$spid #print(.spid) if (!is.null(spid_chnm_table)) { chnm &lt;- dplyr::filter(spid_chnm_table, spid == .spid)$chnm casn &lt;- dplyr::filter(spid_chnm_table, spid == .spid)$casn } else { chnm &lt;- NA casn &lt;- NA } #cutoff cutoff_prim &lt;- tcpl_models[[i]]$cutoff_prim cutoff_toxi &lt;- tcpl_models[[i]]$cutoff_toxi #assay_info assay_info &lt;- tcpl_models[[i]]$assay_info #get normalized resonse value (cytotox and raiu together) #and use 100 minus the response value (inverse the plot) d &lt;- dplyr::bind_rows(tcpl_models[[i]]$data_prim, tcpl_models[[i]]$data_toxi) %&gt;% dplyr::mutate(resp = nval_median) #%&gt;% #mutate(assay = ifelse(aeid == 1, assay_info$toxi_assay, assay_info$prim_assay)) #determine left and right x boundary of the plot if ( round(max(d$logc)) &lt; max(d$logc) ) { rb &lt;- round(max(d$logc)) + 1 } else { rb &lt;- round(max(d$logc))} lb &lt;- round(min(d$logc))-1 #initiate basic plot with data points. g &lt;- ggplot(d, aes(x = logc, y = resp)) if (!is.null(spid_chnm_table)){ g &lt;- g + labs( title = paste(chnm, sep = &quot;&quot;), x = paste(&quot;Concentration (log&quot;, cunit, &quot;)&quot;, sep = &quot;&quot;), y = &quot;% Control Activity&quot; ) } else { g &lt;- g + labs( title = paste(i, &quot;. SPID:&quot; , .spid), x = paste(&quot;Concentration (log&quot;, cunit, &quot;)&quot;, sep = &quot;&quot;), y = &quot;% Control Activity&quot; ) } # labs( # title = paste(i, &quot;\\nSPID: &quot; , .spid, &quot;\\nNAME: &quot;, chnm, &quot;\\nCAS NO: &quot;, casn, sep = &quot;&quot;), # x = &quot;Concentration (logM)&quot;, # y = &quot;% Control Activity&quot; # ) #extract modelling results m_toxi &lt;- tcpl_models[[i]]$model_toxi m_prim &lt;- tcpl_models[[i]]$model_prim #create 100 concentrations s &lt;- expand.grid(logc = seq(lb, rb, length = 130)) #test and plot cytotox model if (!is.na(m_toxi$hill) &amp; m_toxi$hill == 1) { para_cyto &lt;- c(m_toxi$hill_tp, m_toxi$hill_ga, m_toxi$hill_gw) p1 &lt;- 100 - hill_model(para_cyto, s) p1 &lt;- dplyr::bind_cols(s, data.frame(p1)) names(p1) &lt;- c(&quot;logc&quot;, &quot;pred&quot;) g &lt;- g + geom_line( data = p1, aes(x = logc, y = pred), size = 2, alpha = 0.9, color = &quot;#e02929&quot; ) #plot the vertical line at 3bmad cutoff #g &lt;- g+ geom_vline(xintercept = log_abs_ec(para_cyto, 3*m_toxi$bmad) ) } #test and plot raiu model if (!is.na(m_prim$hill) &amp; m_prim$hill == 1) { para_raiu &lt;- c(m_prim$hill_tp, m_prim$hill_ga, m_prim$hill_gw) p2 &lt;- 100 - hill_model(para_raiu, s) p2 &lt;- bind_cols(s, data.frame(p2)) names(p2) &lt;- c(&quot;logc&quot;, &quot;pred&quot;) g &lt;- g + geom_line( data = p2, aes(x = logc, y = pred), size = 2, alpha = 0.9, color = &quot;#377eb8&quot; ) } #draw 3bmad cutoff line for cytotox and raiu respectively g &lt;- g + geom_hline( yintercept = 100 - cutoff_toxi, alpha = 0.5, size = 0.5, linetype = &quot;dashed&quot;, color = &quot;#e02929&quot; ) g &lt;- g + geom_hline( yintercept = 100 - cutoff_prim, alpha = 0.5, size = 0.5, linetype = &quot;dashed&quot;, color = &quot;#377eb8&quot; ) #plot data points #aesthetics fixes g &lt;- g + geom_point( aes(color = assay), shape = 21, alpha = 0.9, size = 3 ) + coord_fixed( ylim = c(0, 125), xlim = c(-9, -4), ratio = 2 / 70 #used to be 2/70, when x axis was from -9 to -4. ) + scale_y_continuous(breaks = seq( from = 0, to = 120, by = 20 )) + scale_x_continuous(breaks = seq( from = lb, to = rb, by = 1 )) + theme_few() + theme(axis.title.x = element_blank()) + theme(axis.title.y = element_blank()) + theme(legend.title = element_blank(), legend.position = &quot;none&quot;) + theme(legend.margin=unit(0, &quot;null&quot;)) + scale_color_manual(values=c(&quot;#e02929&quot;, &quot;#377eb8&quot;))+ theme(plot.title=element_text(hjust=0.5, size = 16)) ##adding annotations if (!is.null(rank_table) &amp; notation == TRUE) { #Get ec and ranking info ds &lt;- rank_table %&gt;% dplyr::filter(spid==.spid) ds &lt;- round_df(ds, digits=2) #annotate with text info line1 &lt;- paste(&quot;Ranking_Score:&quot;, ds$ranking_score) # line2 &lt;- paste(&quot;TAA:&quot;, ds$taa) # line3 &lt;- paste(&quot;Med_Diff:&quot;, ds$med_diff) line4 &lt;- paste(&quot;AC50: &quot;, ds$AC50_prim, sep = &quot;&quot;) line5 &lt;- paste(&quot;absEC50: &quot;, ds$absEC50_prim, sep = &quot;&quot;) # line6 &lt;- paste(assay_info$prim_assay, &quot;_absEC80: &quot;, ds$absEC80_prim, sep = &quot;&quot;) g &lt;- g + annotate(&quot;text&quot;, x= lb + 0.8, y = 34, alpha = 0.8, hjust=0, label=line1) + # annotate(&quot;text&quot;, x= lb + 0.8, y = 25, alpha = 0.8, hjust=0, label= line2) + # annotate(&quot;text&quot;, x= lb + 0.8, y = 20, alpha = 0.8, hjust=0, label= line3) + annotate(&quot;text&quot;, x= lb + 0.8, y = 22, alpha = 0.8, hjust=0, label= line4) + annotate(&quot;text&quot;, x= lb + 0.8, y = 10, alpha = 0.8, hjust=0, label= line5) # annotate(&quot;text&quot;, x= lb + 0.8, y = 5, alpha = 0.8, hjust=0, label= line6) } #collect all plots into a list plot_list[[i]] &lt;- g } return(plot_list) } #&#39; save plots in pdf #&#39; #&#39; save ggplot2 plots generated in a list to a pdf file #&#39; #&#39; @param plot_list the r list object contains all ggplot2 objects #&#39; @param filename the output file name, including the file directory #&#39; #&#39; @examples #&#39; ## start from raw data #&#39; # define assay #&#39; assay_info &lt;- list(prim_assay = &quot;Primary&quot;,toxi_assay = &quot;Cytotox&quot;) #&#39; # data normalization #&#39; demo_mc_norm &lt;- normalize_per_plate(demo_mc, nctrl = &quot;DMSO&quot;) #&#39; # filter out test chemicals only #&#39; demo_mc_norm &lt;- dplyr::filter(demo_mc_norm, wllt == &quot;t&quot;) #&#39; # fit curve with default 20% threshold #&#39; demo_md &lt;- fit_curve_tcpl(demo_mc_norm, assay_info) #&#39; # calculate TAA and Med_diff only #&#39; demo_rank &lt;- rank_tcpl(demo_md, med_taa = NULL, med_med_diff = NULL) #&#39; #produce plots with notations #&#39; demo_plots &lt;- plot_tcpl_minimal(demo_md, demo_rank, notation = TRUE) #&#39; #&#39; ## save all the plots as pdf #&#39; # save_plot_pdf(demo_plots, &quot;.\\output plots\\all_plots.pdf&quot;) #&#39; #&#39; ## save the 1st plot as pdf #&#39; # save_plot_pdf(demo_plots[1], &quot;.\\output plots\\plot1.pdf&quot;) #&#39; #&#39; #&#39; #&#39; @export #&#39; save_plot_pdf &lt;- function(plot_list, filename) { # claim variables for passing R CMD Check assay &lt;- spid &lt;- apid &lt;- rval &lt;- NULL grDevices::pdf(filename) cat(&quot;Preparing file...\\n&quot;) invisible(lapply(plot_list, print)) grDevices::dev.off() cat(&quot;Finished!&quot;) } #&#39; round digits of numbers #&#39; #&#39; round numbers in a datafram to specified digits #&#39; #&#39; @param df the dataframe input #&#39; @param digits the specified number of digits #&#39; @return a dataframe #&#39; #&#39; round_df &lt;- function(df, digits) { nums &lt;- vapply(df, is.numeric, FUN.VALUE = logical(1)) df[,nums] &lt;- round(df[,nums], digits = digits) df } "]
]
