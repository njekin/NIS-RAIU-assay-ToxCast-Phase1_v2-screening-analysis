[
["index.html", "Analysis of ToxCast Ph1_v2 Chemical Screening Results from NIS RAIU bioassay in R 1 Introduction", " Analysis of ToxCast Ph1_v2 Chemical Screening Results from NIS RAIU bioassay in R Jun Wang July 19, 2017 1 Introduction This report includes all the R code in the analysis of ToxCast Phase 1_v2 chemical library screening results from the NIS radioactive iodide uptake (RAIU) assay. With the aim of reproducible data analysis, this document was written in rmarkdown format and generated by R’s knitr and bookdown package. A web book version of this document (easier to navigate), in addition with interactive dose-response plots is also available at this link. Key R functions written in this analysis were gathered as an R package ToxPlot. To install or view the most up-to-date source code please go to github link. At the end of this document the source code of these functions used in this analysis is also provided. "],
["data-import-and-preprocessing.html", "2 Data Import and Preprocessing 2.1 Preprocess Single-Concentration Data 2.2 Import and Preprocess Multi-Concentration Data", " 2 Data Import and Preprocessing This section preprocess and import raw data (in separate excel .xlsx files provided by Dan Hallinger) into R. rm(list=ls()) library(plotly) library(tidyverse) library(ggthemes) library(stringr) library(readxl) library(devtools) load_all(&quot;../../toxplot&quot;) session_info() ## setting value ## version R version 3.3.0 (2016-05-03) ## system x86_64, mingw32 ## ui RTerm ## language (EN) ## collate English_United States.1252 ## tz America/New_York ## date 2017-07-21 ## ## package * version date source ## assertthat 0.1 2013-12-06 CRAN (R 3.3.1) ## backports 1.0.5 2017-01-18 CRAN (R 3.3.2) ## bindr 0.1 2016-11-13 CRAN (R 3.3.3) ## bindrcpp * 0.2 2017-06-17 CRAN (R 3.3.3) ## bookdown 0.3.20 2017-05-15 Github (rstudio/bookdown@86026cf) ## broom 0.4.1 2016-06-24 CRAN (R 3.3.1) ## car 2.1-3 2016-08-11 CRAN (R 3.3.1) ## chron 2.3-47 2015-06-24 CRAN (R 3.3.1) ## codetools 0.2-15 2016-10-05 CRAN (R 3.3.2) ## colorspace 1.3-0 2016-11-10 CRAN (R 3.3.2) ## commonmark 1.2 2017-03-01 CRAN (R 3.3.3) ## crayon 1.3.2 2016-06-28 CRAN (R 3.3.2) ## crosstalk 1.0.0 2016-12-21 CRAN (R 3.3.3) ## data.table 1.9.6 2015-09-19 CRAN (R 3.3.1) ## DBI 0.5-1 2016-09-10 CRAN (R 3.3.1) ## devtools * 1.12.0 2016-06-24 CRAN (R 3.3.1) ## digest 0.6.12 2017-01-27 CRAN (R 3.3.3) ## dplyr * 0.7.1 2017-06-22 CRAN (R 3.3.3) ## drc 3.0-1 2016-08-30 CRAN (R 3.3.1) ## evaluate 0.10 2016-10-11 CRAN (R 3.3.2) ## forcats 0.2.0 2017-01-23 CRAN (R 3.3.3) ## foreign 0.8-67 2016-09-13 CRAN (R 3.3.2) ## ggplot2 * 2.2.1 2016-12-30 CRAN (R 3.3.3) ## ggthemes * 3.4.0 2017-02-19 CRAN (R 3.3.3) ## glue 1.1.1 2017-06-21 CRAN (R 3.3.3) ## gtable 0.2.0 2016-02-26 CRAN (R 3.3.1) ## gtools 3.5.0 2015-05-29 CRAN (R 3.3.1) ## haven 1.0.0 2016-09-23 CRAN (R 3.3.2) ## highr 0.6 2016-05-09 CRAN (R 3.3.1) ## hms 0.3 2016-11-22 CRAN (R 3.3.2) ## htmltools 0.3.6 2017-04-28 CRAN (R 3.3.3) ## htmlwidgets 0.8 2016-11-09 CRAN (R 3.3.2) ## httpuv 1.3.3 2015-08-04 CRAN (R 3.3.2) ## httr 1.2.1 2016-07-03 CRAN (R 3.3.1) ## jsonlite 1.4 2017-04-08 CRAN (R 3.3.3) ## knitr 1.15.20 2017-05-15 Github (yihui/knitr@f3a490b) ## labeling 0.3 2014-08-23 CRAN (R 3.3.1) ## lattice 0.20-34 2016-09-06 CRAN (R 3.3.2) ## lazyeval 0.2.0 2016-06-12 CRAN (R 3.3.1) ## lme4 1.1-12 2016-04-16 CRAN (R 3.3.1) ## lubridate 1.6.0 2016-09-13 CRAN (R 3.3.3) ## magrittr 1.5 2014-11-22 CRAN (R 3.3.1) ## MASS 7.3-45 2016-04-21 CRAN (R 3.3.0) ## Matrix 1.2-7.1 2016-09-01 CRAN (R 3.3.2) ## MatrixModels 0.4-1 2015-08-22 CRAN (R 3.3.1) ## memoise 1.0.0 2016-01-29 CRAN (R 3.3.1) ## mgcv 1.8-16 2016-11-07 CRAN (R 3.3.2) ## mime 0.5 2016-07-07 CRAN (R 3.3.1) ## minqa 1.2.4 2014-10-09 CRAN (R 3.3.1) ## mnormt 1.5-5 2016-10-15 CRAN (R 3.3.2) ## modelr 0.1.0 2016-08-31 CRAN (R 3.3.2) ## multcomp 1.4-6 2016-07-14 CRAN (R 3.3.1) ## munsell 0.4.3 2016-02-13 CRAN (R 3.3.1) ## mvtnorm 1.0-5 2016-02-02 CRAN (R 3.3.1) ## nlme 3.1-128 2016-05-10 CRAN (R 3.3.2) ## nloptr 1.0.4 2014-08-04 CRAN (R 3.3.1) ## nnet 7.3-12 2016-02-02 CRAN (R 3.3.0) ## numDeriv 2016.8-1 2016-08-27 CRAN (R 3.3.1) ## pbkrtest 0.4-6 2016-01-27 CRAN (R 3.3.1) ## pkgconfig 2.0.1 2017-03-21 CRAN (R 3.3.3) ## plotly * 4.7.0 2017-05-28 CRAN (R 3.3.3) ## plotrix 3.6-3 2016-07-21 CRAN (R 3.3.1) ## plyr 1.8.4 2016-06-08 CRAN (R 3.3.1) ## psych * 1.6.9 2016-09-17 CRAN (R 3.3.2) ## purrr * 0.2.2 2016-06-18 CRAN (R 3.3.1) ## quantreg 5.29 2016-09-04 CRAN (R 3.3.1) ## R6 2.2.2 2017-06-17 CRAN (R 3.3.3) ## RColorBrewer * 1.1-2 2014-12-07 CRAN (R 3.3.1) ## Rcpp 0.12.8 2016-11-17 CRAN (R 3.3.2) ## readr * 1.0.0 2016-08-03 CRAN (R 3.3.1) ## readxl * 0.1.1 2016-03-28 CRAN (R 3.3.1) ## reshape2 1.4.2 2016-10-22 CRAN (R 3.3.2) ## rlang 0.1.1 2017-05-18 CRAN (R 3.3.3) ## rmarkdown 1.5 2017-04-26 CRAN (R 3.3.3) ## RMySQL 0.10.9 2016-05-08 CRAN (R 3.3.1) ## roxygen2 6.0.1 2017-02-06 CRAN (R 3.3.3) ## rprojroot 1.2 2017-01-16 CRAN (R 3.3.2) ## RSQLite 1.0.0 2014-10-25 CRAN (R 3.3.1) ## rstudioapi 0.6 2016-06-27 CRAN (R 3.3.1) ## rvest 0.3.2 2016-06-17 CRAN (R 3.3.2) ## sandwich 2.3-4 2015-09-24 CRAN (R 3.3.1) ## scales 0.4.1 2016-11-09 CRAN (R 3.3.2) ## shiny 0.14.2 2016-11-01 CRAN (R 3.3.2) ## SparseM 1.74 2016-11-10 CRAN (R 3.3.2) ## stringi 1.1.2 2016-10-01 CRAN (R 3.3.1) ## stringr * 1.2.0 2017-02-18 CRAN (R 3.3.3) ## survival 2.40-1 2016-10-30 CRAN (R 3.3.2) ## tcpl 1.2.2 2016-05-18 CRAN (R 3.3.3) ## testthat 1.0.2 2016-04-23 CRAN (R 3.3.3) ## TH.data 1.0-7 2016-01-28 CRAN (R 3.3.1) ## tibble * 1.3.3 2017-05-28 CRAN (R 3.3.3) ## tidyr * 0.6.3 2017-05-15 CRAN (R 3.3.3) ## tidyverse * 1.1.1 2017-01-27 CRAN (R 3.3.3) ## toxplot * 0.1.0 &lt;NA&gt; local ## viridisLite 0.1.3 2016-03-12 CRAN (R 3.3.1) ## withr 1.0.2 2016-06-20 CRAN (R 3.3.1) ## xml2 1.0.0 2016-06-24 CRAN (R 3.3.2) ## xtable 1.8-2 2016-02-05 CRAN (R 3.3.2) ## yaml 2.1.14 2016-11-12 CRAN (R 3.3.2) ## zoo 1.7-13 2016-05-03 CRAN (R 3.3.1) 2.1 Preprocess Single-Concentration Data For single concentration data, Dan Hallinger has already gathered all the data and made the level0 compatible file already in .xlsx (see file ./raw data files/sc data from Dan.xlsx). Here just need to do some clean up to make the data ready for analysis. dt_sc &lt;- read_excel(&quot;./raw data files/sc data from Dan.xlsx&quot;, sheet = 2 ) # rename columns, following ToxCast Pipeline naming requirement. names(dt_sc) &lt;- c(&quot;pid&quot;, &quot;rowi&quot;, &quot;coli&quot;, &quot;spid&quot;, &quot;conc&quot;, &quot;unit&quot;, &quot;rep1&quot;, &quot;rep2&quot;, &quot;rep3&quot;) dt_sc %&lt;&gt;% gather(rep, rval, rep1:rep3) %&gt;% mutate(apid = paste(pid, rep, sep=&quot;_&quot;), wllq = 1L, acsn = &quot;raiu&quot;, assay = &quot;RAIU&quot;, srcf = &quot;NIS_ph1_v2_sc_lvl0_for_tcpl.csv&quot; ) %&gt;% dplyr::select(apid, everything()) #head(dt_sc, 2) # add well type d1 &lt;- dt_sc %&gt;% filter(grepl(&quot;^TP*&quot;, dt_sc$spid)) %&gt;% mutate(wllt = &quot;t&quot;) # clean up spid. non_t &lt;- dt_sc %&gt;% filter(!grepl(&quot;^TP*&quot;, dt_sc$spid)) %&gt;% separate(spid, c(&quot;delete&quot;, &quot;spid&quot;), sep = &quot; &quot;) %&gt;% dplyr::select(-delete) # continue assign well type d2 &lt;- non_t %&gt;% filter(spid == &quot;NaNO3&quot;) %&gt;% mutate(wllt = &quot;pr_ec80&quot;) d3 &lt;- non_t %&gt;% filter(spid == &quot;NaClO4&quot;) %&gt;% mutate(wllt = &quot;pr&quot;) d4 &lt;- non_t %&gt;% filter(spid == &quot;2,4-D&quot;) %&gt;% mutate(wllt = &quot;nrc&quot;) d5 &lt;- non_t %&gt;% filter(spid == &quot;DMSO&quot;) %&gt;% mutate(wllt = &quot;n&quot;) d6 &lt;- non_t %&gt;% filter(spid == &quot;NaSCN&quot;) %&gt;% mutate(wllt = &quot;pr_ec20&quot;) dt_sc_update &lt;- rbind(d1, d2, d3, d4, d5,d6) # convert concentration as numeric dt_sc_update$conc &lt;- as.numeric(dt_sc_update$conc) # convert row id from letters to numbers dt_sc_update$rowi &lt;- stringr::str_replace_all(dt_sc_update$rowi, c(&quot;A&quot; = &quot;1&quot;, &quot;B&quot; = &quot;2&quot;, &quot;C&quot; = &quot;3&quot;, &quot;D&quot; = &quot;4&quot;, &quot;E&quot; = &quot;5&quot;, &quot;F&quot; = &quot;6&quot;, &quot;G&quot; = &quot;7&quot;, &quot;H&quot; = &quot;8&quot;)) 2.1.1 Update Testing Concentration After we finished the testing, NCCT provided the actual aliquot_concentration in the chemical unblind file, which contains the actual CAS number, chemical name corresponding to each sample id. Some chemicals were not delivered as 20mM as we initially requested. Therefore it is necessary to update the level 0 file with the actual concentration. # =================================== # import unblinded chemical name, aliquoted_concentration, cas number and rename the col names to keep only chnm, casn, spid, conc. spid_chnm_table &lt;- read_excel(&quot;./raw data files/EPA_11700_EPA-SLaws_ph1v2_150ul_20170125_key.xlsx&quot;) spid_chnm_table &lt;- spid_chnm_table %&gt;% dplyr::select(EPA_Sample_ID, Aliquot_Concentration, CASRN, Preferred_Name) #rename the column title to be compatible with tcpl package. names(spid_chnm_table) &lt;- c(&quot;spid&quot;, &quot;aliquot_conc&quot;, &quot;casn&quot;, &quot;chnm&quot;) #calculate the actual cocnentration tested in single-con screening #the unit will be convert from mM to Molar spid_chnm_table &lt;- spid_chnm_table %&gt;% mutate(test_conc = aliquot_conc / 2E5) # convert to data.table format (only necessary for using tcpl package) # spid_chnm_table &lt;- data.table(spid_chnm_table) # update singel-con level0 data frame with updated concentration # the concentration unit is converted from uM to M. s1 &lt;- filter(dt_sc_update, wllt == &quot;t&quot;) s2 &lt;- filter(dt_sc_update, wllt != &quot;t&quot;) %&gt;% mutate(conc = conc / 1E6, unit = &quot;M&quot;) s1 &lt;- left_join(s1, dplyr::select(spid_chnm_table, spid, test_conc), by = &quot;spid&quot;) %&gt;% mutate(conc = test_conc, unit = &quot;M&quot;) %&gt;% dplyr::select(-test_conc) dt_sc_update &lt;- bind_rows(s2, s1) # sc_lv0_update &lt;- data.table(sc_lv0_update) 2.1.2 Export Sinlge-Con level0 file with updated concentration # export to .csv file write_csv(dt_sc_update, &quot;./input data files/NIS_ph1_v2_sc_lvl0_for_tcpl.csv&quot; ) 2.2 Import and Preprocess Multi-Concentration Data For multi-concentration data, Dan Hallinger made the .xlsx file as the summary file of all three bioreplicates of RAIU/cytotox assay. Therefore to read the data into R, this code needs to specify the row and column position of the data on the excel sheet. To make the parsing succesful, make sure the excel data file (for example: “Combined RAIU Data (MC Plate 1).xlsx”, see fig below) contains three bioreplicates of the raw readings in 96well layout, with the first one range from Row 1-9, 2nd one from row 11-19, 3rd one from row 21-29. The 12 columns of the 96 well should start from Column C to N. On row 30, col D-M, list sample_id of the chemicals tested. on row 1,2,3 of col O, list MC or SC, Plate number, RAIU or Cytotox repsectively. The screenshot below shows how the data should be organized and labelled: summary file layout 2.2.1 Functions for data retrieving To properly read the raw data into R and ToxCast pipline compatible level 0 file, three functions named: read_parse, create_platemap, and annotate_data are written and described below. 2.2.1.1 read_parse function to read and parse excel data file This function takes the data file name as the argument, and returns a list object containing all assay info and readouts. Notice the row index used here is different from what is in the xlsx file, this is because when read_excel read in the file, blank rows are automatically deleted. Therefore row 28, instead of row 30 contains the correct sample_ID. read_parse &lt;- function(file_name) { d &lt;- read_excel(file_name, sheet =1, col_names = FALSE) d[] &lt;- lapply(d, as.character) #convert all columns to character rep1 &lt;- data.matrix(d[2:9,3:14]) rep2 &lt;- data.matrix(d[11:18,3:14]) rep3 &lt;- data.matrix(d[20:27,3:14]) assay_form &lt;-d[[1,15]] #MC or SC (multicon or single con) #plate 1,2,3 and go on, this is plate id Dan Hallinger assigned, #for the same plate id and assay_form, the plate layout is the same, #whether its raiu or cytotox. plate_id &lt;- d[[2,15]] #name of the assay, RAIU or Cytotox #assay_plate_id &lt;- paste(d[[1,15]], d[[2,15]], sep=&quot;_&quot;) #plate_id and assay_type should merge together, such as mc_plate1 assay_name &lt;- d[[3,15]] #this is the sample_id used to identify each tested chemical(blinded id) sample_id &lt;- d[28,4:13, drop=TRUE] if (is.na(assay_form)|| is.na(plate_id)||is.na(assay_name)||is.na(sample_id)) { stop(&quot;missing info for assay type, plate id or sample id!\\n Go back and check your .xlsx data file.&quot;) } else { results &lt;- list(assay_name, assay_form, plate_id, sample_id, rep1, rep2, rep3) } return(results) } 2.2.1.2 create_platemap function to create the assay plate map with correct sample_ID To add info for each well of the assay, I created a plate map .csv file with 3 blocks of 96-well layout providing: chemical names concentration (unit: M) well type(type of control or sample) The file for multi concetration assay is named mc_platemap.csv. To read single concentration results, similar plate map needs to be created and named as sc_platemap.csv The screen shot below is the mc_platemap used in NIS phase 1 data. Note that there are NAs in the name map (row 1-8), these positions will be filled with the correct sample_id in the processing. The code below is the function to parse the plate map (for mc or sc) csv file, and fill in the sample_id in to the right position in 96well layout. create_platemap &lt;- function(map_file, sample_id) { #check validity of sample_id if (!complete.cases(sample_id)) {stop(&quot;missing sample_id, check data file.&quot;)} #readin chemical name map name_map &lt;- read.table(map_file, sep=&quot;,&quot;, nrows=8, na.strings=&quot;na&quot;,stringsAsFactors=FALSE) #readin concentration map conc_map &lt;- read.table(map_file, sep=&quot;,&quot;, nrows=8, skip=8, na.strings=&quot;na&quot;) #readin welltype map welltype_map &lt;- read.table(map_file, sep=&quot;,&quot;, nrows=8, skip=16, na.strings=&quot;na&quot;, stringsAsFactors=FALSE) #fill in the NAs in name_map with the correct sample_id that was read from the assay data file(.xlsx) #The loop here fills NAs on the mc_platemap for (i in 1:10) { name_map[2:7,i+1] &lt;- rep(sample_id[[i]],6) i &lt;- i+1 } #put all three map together in a list. map &lt;- list(name_map, conc_map, welltype_map) return(map) } 2.2.1.3 annotate_data function to convert all data into tidy tabular form (level 0 compatible) This function requires 1) the proper assay map generated by create_platemap function, 2) parsed data generated by read_parse function. The function convert all the data into a dataframe with columns of: assay: name of the assay. cytotox or raiu apid: assay plate id. apid shoud be a unique id for each 96 well plate, can distinguish replicate, but doesn’t distinguish Cytotox and RAIU assay pid: plate id. used to represent mother plate id, doesn’t distinguish replicate,nor Cytotox or RAIU assay. spid: sample ID, the TP*** ID assigned by NCCT representing each tested chemical sample rowi: row position on 96 well plate coli: column position on 96 well plate repi: replicate id, (1 to 3) conc: molar concentration (M) wllt: well type. define whether a well contains a control or a test sample annotate_data &lt;- function(map, results) { name_map &lt;- map[[1]] conc_map &lt;- map[[2]] welltype_map &lt;- map[[3]] assay_name &lt;- results[[1]] assay_form &lt;- results[[2]] plate_id &lt;- results[[3]] #sample_id &lt;- results[[4]] rep1 &lt;- results[[5]] rep2 &lt;- results[[6]] rep3 &lt;- results[[7]] #initialize empty dataframe d &lt;- data.frame() #loop through 96 wells to gather all variables together for (i in 1:8) { for (j in 1:12) { t &lt;- data.frame(assay=assay_name, pid=plate_id, spid=name_map[[i,j]], rowi=i, coli=j, rep1=rep1[i,j], rep2=rep2[i,j], rep3=rep3[i,j], conc=conc_map[[i,j]], wllt=welltype_map[[i,j]] ) d &lt;- rbind(d,t) j &lt;- j+1 } i &lt;- i+1 } #sort rows by sample_id, then concentration d &lt;- arrange(d, spid, desc(conc)) return(d) } 2.2.2 Parse all excel data files and generate tidy table file_directory &lt;- &quot;./raw data files/phase 1 mc data/&quot; flist &lt;- list.files(file_directory) print(paste(&quot;A total of&quot;,length(flist), &quot;files in the directory to be read:&quot;)) ## [1] &quot;A total of 36 files in the directory to be read:&quot; print(flist) ## [1] &quot;Combined Cytotox Data (MC Plate 1).xlsx&quot; ## [2] &quot;Combined Cytotox Data (MC Plate 10).xlsx&quot; ## [3] &quot;Combined Cytotox Data (MC Plate 11).xlsx&quot; ## [4] &quot;Combined Cytotox Data (MC Plate 12).xlsx&quot; ## [5] &quot;Combined Cytotox Data (MC Plate 13).xlsx&quot; ## [6] &quot;Combined Cytotox Data (MC Plate 14).xlsx&quot; ## [7] &quot;Combined Cytotox Data (MC Plate 15).xlsx&quot; ## [8] &quot;Combined Cytotox Data (MC Plate 16).xlsx&quot; ## [9] &quot;Combined Cytotox Data (MC Plate 17).xlsx&quot; ## [10] &quot;Combined Cytotox Data (MC Plate 18).xlsx&quot; ## [11] &quot;Combined Cytotox Data (MC Plate 2).xlsx&quot; ## [12] &quot;Combined Cytotox Data (MC Plate 3).xlsx&quot; ## [13] &quot;Combined Cytotox Data (MC Plate 4).xlsx&quot; ## [14] &quot;Combined Cytotox Data (MC Plate 5).xlsx&quot; ## [15] &quot;Combined Cytotox Data (MC Plate 6).xlsx&quot; ## [16] &quot;Combined Cytotox Data (MC Plate 7).xlsx&quot; ## [17] &quot;Combined Cytotox Data (MC Plate 8).xlsx&quot; ## [18] &quot;Combined Cytotox Data (MC Plate 9).xlsx&quot; ## [19] &quot;Combined RAIU Data (MC Plate 1).xlsx&quot; ## [20] &quot;Combined RAIU Data (MC Plate 10).xlsx&quot; ## [21] &quot;Combined RAIU Data (MC Plate 11).xlsx&quot; ## [22] &quot;Combined RAIU Data (MC Plate 12).xlsx&quot; ## [23] &quot;Combined RAIU Data (MC Plate 13).xlsx&quot; ## [24] &quot;Combined RAIU Data (MC Plate 14).xlsx&quot; ## [25] &quot;Combined RAIU Data (MC Plate 15).xlsx&quot; ## [26] &quot;Combined RAIU Data (MC Plate 16).xlsx&quot; ## [27] &quot;Combined RAIU Data (MC Plate 17).xlsx&quot; ## [28] &quot;Combined RAIU Data (MC Plate 18).xlsx&quot; ## [29] &quot;Combined RAIU Data (MC Plate 2).xlsx&quot; ## [30] &quot;Combined RAIU Data (MC Plate 3).xlsx&quot; ## [31] &quot;Combined RAIU Data (MC Plate 4).xlsx&quot; ## [32] &quot;Combined RAIU Data (MC Plate 5).xlsx&quot; ## [33] &quot;Combined RAIU Data (MC Plate 6).xlsx&quot; ## [34] &quot;Combined RAIU Data (MC Plate 7).xlsx&quot; ## [35] &quot;Combined RAIU Data (MC Plate 8).xlsx&quot; ## [36] &quot;Combined RAIU Data (MC Plate 9).xlsx&quot; #combine directory and file name fl &lt;- paste(file_directory, flist, sep=&quot;&quot;) #name of plate map file map_file &lt;- &quot;./raw data files/mc_platemap.csv&quot; # read all files df_mc &lt;- data.frame() for (i in 1:length(fl)) { results &lt;- read_parse(fl[[i]]) print(paste(&quot;Reading file&quot;, i, &quot;:&quot;, flist[[i]])) #print(sapply(results[1:4], paste, sep=&quot; &quot;)) sample_id &lt;- results[[4]] map &lt;- create_platemap(map_file, sample_id) temp &lt;- annotate_data(map, results) df_mc &lt;- rbind(df_mc, temp) i &lt;- i+1 } ## [1] &quot;Reading file 1 : Combined Cytotox Data (MC Plate 1).xlsx&quot; ## [1] &quot;Reading file 2 : Combined Cytotox Data (MC Plate 10).xlsx&quot; ## [1] &quot;Reading file 3 : Combined Cytotox Data (MC Plate 11).xlsx&quot; ## [1] &quot;Reading file 4 : Combined Cytotox Data (MC Plate 12).xlsx&quot; ## [1] &quot;Reading file 5 : Combined Cytotox Data (MC Plate 13).xlsx&quot; ## [1] &quot;Reading file 6 : Combined Cytotox Data (MC Plate 14).xlsx&quot; ## [1] &quot;Reading file 7 : Combined Cytotox Data (MC Plate 15).xlsx&quot; ## [1] &quot;Reading file 8 : Combined Cytotox Data (MC Plate 16).xlsx&quot; ## [1] &quot;Reading file 9 : Combined Cytotox Data (MC Plate 17).xlsx&quot; ## [1] &quot;Reading file 10 : Combined Cytotox Data (MC Plate 18).xlsx&quot; ## [1] &quot;Reading file 11 : Combined Cytotox Data (MC Plate 2).xlsx&quot; ## [1] &quot;Reading file 12 : Combined Cytotox Data (MC Plate 3).xlsx&quot; ## [1] &quot;Reading file 13 : Combined Cytotox Data (MC Plate 4).xlsx&quot; ## [1] &quot;Reading file 14 : Combined Cytotox Data (MC Plate 5).xlsx&quot; ## [1] &quot;Reading file 15 : Combined Cytotox Data (MC Plate 6).xlsx&quot; ## [1] &quot;Reading file 16 : Combined Cytotox Data (MC Plate 7).xlsx&quot; ## [1] &quot;Reading file 17 : Combined Cytotox Data (MC Plate 8).xlsx&quot; ## [1] &quot;Reading file 18 : Combined Cytotox Data (MC Plate 9).xlsx&quot; ## [1] &quot;Reading file 19 : Combined RAIU Data (MC Plate 1).xlsx&quot; ## [1] &quot;Reading file 20 : Combined RAIU Data (MC Plate 10).xlsx&quot; ## [1] &quot;Reading file 21 : Combined RAIU Data (MC Plate 11).xlsx&quot; ## [1] &quot;Reading file 22 : Combined RAIU Data (MC Plate 12).xlsx&quot; ## [1] &quot;Reading file 23 : Combined RAIU Data (MC Plate 13).xlsx&quot; ## [1] &quot;Reading file 24 : Combined RAIU Data (MC Plate 14).xlsx&quot; ## [1] &quot;Reading file 25 : Combined RAIU Data (MC Plate 15).xlsx&quot; ## [1] &quot;Reading file 26 : Combined RAIU Data (MC Plate 16).xlsx&quot; ## [1] &quot;Reading file 27 : Combined RAIU Data (MC Plate 17).xlsx&quot; ## [1] &quot;Reading file 28 : Combined RAIU Data (MC Plate 18).xlsx&quot; ## [1] &quot;Reading file 29 : Combined RAIU Data (MC Plate 2).xlsx&quot; ## [1] &quot;Reading file 30 : Combined RAIU Data (MC Plate 3).xlsx&quot; ## [1] &quot;Reading file 31 : Combined RAIU Data (MC Plate 4).xlsx&quot; ## [1] &quot;Reading file 32 : Combined RAIU Data (MC Plate 5).xlsx&quot; ## [1] &quot;Reading file 33 : Combined RAIU Data (MC Plate 6).xlsx&quot; ## [1] &quot;Reading file 34 : Combined RAIU Data (MC Plate 7).xlsx&quot; ## [1] &quot;Reading file 35 : Combined RAIU Data (MC Plate 8).xlsx&quot; ## [1] &quot;Reading file 36 : Combined RAIU Data (MC Plate 9).xlsx&quot; # add info columns df_mc &lt;- df_mc %&gt;% mutate(acsn = stringr::str_to_lower(assay), wllq = 1L, unit = &#39;M&#39;) %&gt;% gather(rep, rval, rep1:rep3) %&gt;% mutate(apid = paste(pid, rep, sep = &quot;_&quot;)) 2.2.3 Update Testing Concentrations After we finished the testing, NCCT provided the actual aliquot_concentration in the chemical unblind file, which contains the actual CAS number, chemical name corresponding to each sample id. Some chemicals were not delivered as 20mM as we initially requested due to solubility limit. Therefore it is necessary to update the level 0 file with the actual concentration. mc_conc_ratio &lt;- spid_chnm_table %&gt;% mutate(conc_ratio = aliquot_conc/2E5/1E-4) %&gt;% dplyr::select(spid, conc_ratio) # update cyto data #iterate through each spid to get the updated conc. mc_t_cyto &lt;- df_mc %&gt;% filter(assay == &quot;Cytotox&quot;) %&gt;% filter(wllt == &quot;t&quot;) mc_non_t_cyto &lt;- df_mc %&gt;% filter(assay == &quot;Cytotox&quot;) %&gt;% filter(wllt != &quot;t&quot;) mc_t_cyto_update &lt;- data.frame() for (id in unique(mc_t_cyto$spid)) { #print(id) d_spid &lt;- filter(mc_t_cyto, spid == id) ratio &lt;- filter(mc_conc_ratio, spid == id)[[2]] d_spid &lt;- d_spid %&gt;% mutate(conc = conc * ratio) mc_t_cyto_update &lt;- bind_rows(mc_t_cyto_update, d_spid) } # Here is the udpated mc_lvl0 data table. mc_lvl0_cyto_update &lt;- bind_rows(mc_non_t_cyto, mc_t_cyto_update) # mc_lvl0_cyto_update &lt;- data.table(mc_lvl0_cyto_update) #update raiu data mc_t_raiu &lt;- df_mc %&gt;% filter(assay == &quot;RAIU&quot;) %&gt;% filter(wllt == &quot;t&quot;) mc_non_t_raiu &lt;- df_mc %&gt;% filter(assay == &quot;RAIU&quot;) %&gt;% filter(wllt != &quot;t&quot;) mc_t_raiu_update &lt;- data.frame() for (id in unique(mc_t_raiu$spid)) { #print(id) d_spid &lt;- filter(mc_t_raiu, spid == id) ratio &lt;- filter(mc_conc_ratio, spid == id)[[2]] d_spid &lt;- d_spid %&gt;% mutate(conc = conc * ratio) mc_t_raiu_update &lt;- bind_rows(mc_t_raiu_update, d_spid) } #Here is the udpated mc_lvl0 data table. mc_lvl0_raiu_update &lt;- bind_rows(mc_non_t_raiu, mc_t_raiu_update) # mc_lvl0_raiu_update &lt;- data.table(mc_lvl0_raiu_update) 2.2.4 Export Multi-conc data to file mc_lvl0_raiu_update %&gt;% mutate(srcf = &quot;NIS_ph1_v2_mc_lvl0_for_tcpl_raiu.csv&quot;) %&gt;% write_csv(&quot;./input data files/NIS_ph1_v2_mc_lvl0_for_tcpl_raiu.csv&quot;) mc_lvl0_cyto_update %&gt;% mutate(srcf = &quot;NIS_ph1_v2_mc_lvl0_for_tcpl_cytotox.csv&quot;) %&gt;% write_csv(&quot;./input data files/NIS_ph1_v2_mc_lvl0_for_tcpl_cytotox.csv&quot;) "],
["single-conc-analysis.html", "3 Single-Conc Analysis 3.1 Define basic assay info 3.2 Data Import 3.3 Normalization 3.4 Threshold of Significance 3.5 QC of Single-conc assay 3.6 QC Summary of Single-Con assay 3.7 Visualize the single concentration data", " 3 Single-Conc Analysis 3.1 Define basic assay info #define the names of the primary and toxicity assay. #names should match what&#39;s provided in the &lt;assay&gt; column of the input dataframe assay_info &lt;- list( prim_assay = &quot;RAIU&quot;, toxi_assay = &quot;Cytotox&quot; ) 3.2 Data Import dt_sc &lt;- read_csv(&quot;./input data files/NIS_ph1_v2_sc_lvl0_for_tcpl.csv&quot;) 3.3 Normalization Each sample well is normalized as percentage of the DMSO median on each plate. dt_sc_norm &lt;- toxplot::normalize_per_plate(dt_sc, nctrl = &quot;DMSO&quot;) 3.4 Threshold of Significance Now calculating 3bMAD and 3sigma value for the DMSO control in the single concentration assay as a whole. sig_cutoff_sc &lt;- dt_sc_norm %&gt;% filter(spid == &quot;DMSO&quot;) %&gt;% summarize(bMAD = mad(nval_median, na.rm=TRUE), three_bMAD = 3*mad(nval_median, na.rm=TRUE)) knitr::kable(sig_cutoff_sc, digits = 2) bMAD three_bMAD 6.83 20.5 3.5 QC of Single-conc assay Assay quality control measures were calculated by each 96-well plate. To assesss the quality of assay for each 96 well plate, the following metrics were used: CV of DMSO controls Z’ score The negative control DMSO wells’ raw readings were used to calculate mean, standard deviation and CV for each plate. Z’ score and SSMD were calculated for each plate as well using the raw data of DMSO negative control, RAIU or cytotox positive control readings. Note the positive control values are taken from the highest concentration wells, which represent the maximum RAIU inhibition or toxic inhibition observed on the positive control chemicals. Z’ factor is calculated as follows: \\[Z&#39;=1-\\frac{3\\sigma_{positive\\ control} + 3\\sigma_{DMSO\\ control}}{|\\mu_{positive\\ control} - \\mu_{DMSO\\ control}|}\\] Note that in Z’ calculation, because we only had one well of cytotox positive control, therefore sigma wasn’t calculatable. Hence the Z’ calculated for cytotox is unusable. # Note the calculation is based on raw/unnormalized data. # verified: calculation results is the same using either raw or normalized data. qc_sc &lt;- qc_per_plate(dt_sc_norm, assay_info, resp = &quot;nval_median&quot;) qplot(unique_id, CV_DMSO, data = qc_sc$qc, color = assay) + ggtitle(&quot;CV of DMSO in Single-Con Assay&quot;) + xlab(&quot;Assay Plate ID&quot;) + scale_x_discrete(labels = NULL) + theme_bw() qplot(unique_id, Z_prime, data = qc_sc$qc, color = assay) + ggtitle(&quot;Z&#39; in Single-Con Assay&quot;) + xlab(&quot;Assay Plate ID&quot;) + scale_x_discrete(labels = NULL) + theme_bw() 3.6 QC Summary of Single-Con assay library(psych) qc_sc_t &lt;- qc_sc$qc %&gt;% dplyr::select(CV_DMSO, Z_prime) %&gt;% describe knitr::kable(qc_sc_t, digits = 2, caption = &quot;Summary Single-Con Assay QC Metrics&quot;) Table 3.1: Summary Single-Con Assay QC Metrics vars n mean sd median trimmed mad min max range skew kurtosis se apid* 1 15 NaN NA NA NaN NA Inf -Inf -Inf NA NA NA CV_DMSO 2 15 7.14 1.56 7.55 7.01 1.52 4.91 11.04 6.13 0.68 0.19 0.40 Z_prime 3 15 0.77 0.05 0.76 0.77 0.04 0.65 0.84 0.18 -0.72 0.40 0.01 All single-con QC metrics in a table: knitr::kable(dplyr::select(qc_sc$qc, apid, CV_DMSO, Z_prime), digits = 2, col.names = c(&quot;Plate&quot;, &quot;CV of DMSO&quot;, &quot;Z&#39;&quot;), caption = &quot;QC metrics in Single-Conc Screening&quot;) (#tab:sc_qc table)QC metrics in Single-Conc Screening Plate CV of DMSO Z’ TP0001498_rep1 5.40 0.82 TP0001498_rep2 4.91 0.84 TP0001498_rep3 5.61 0.81 TP0001499_rep1 7.55 0.76 TP0001499_rep2 7.72 0.75 TP0001499_rep3 6.35 0.79 TP0001500_rep1 7.74 0.76 TP0001500_rep2 8.11 0.74 TP0001500_rep3 11.04 0.65 TP0001501_rep1 6.46 0.79 TP0001501_rep2 5.59 0.82 TP0001501_rep3 7.70 0.75 TP0001502_rep1 8.04 0.75 TP0001502_rep2 6.53 0.79 TP0001502_rep3 8.40 0.74 3.6.1 Single-Con Positive Control QC ## model single-con controls on each plate sc_pos_raiu &lt;- dt_sc_norm %&gt;% filter(spid == &quot;NaClO4&quot;) %&gt;% mutate(spid = paste(spid, apid)) # change spid to distinguish NaClO4 on each plate. sc_raiu_pos_md &lt;- toxplot::fit_curve_tcpl(sc_pos_raiu, assay_info = list(prim_assay = &quot;RAIU&quot;, toxi_assay = NULL)) ## Processing 15 samples(spid).... ## Curve Fitting Completed! ## Calculation time: 3.1 secs sc_raiu_pos_sum &lt;- toxplot::summary_tcpl(sc_raiu_pos_md) ##plot absIC50 and AC50 for pos controls together st &lt;- sc_raiu_pos_sum %&gt;% dplyr::select(AC50_prim, absEC50_prim, spid) %&gt;% rename(AC50 = AC50_prim, absEC50 = absEC50_prim) %&gt;% gather(key=Metric, value= value, AC50, absEC50) ggplot(st, aes(spid, value)) + geom_point(aes(color=Metric), alpha=0.8, size=3)+ #facet_grid(Metric~., scale=&quot;free&quot;)+ scale_x_discrete(labels=NULL)+ ggtitle(&quot;AC50 &amp; absEC50 of Positive Control(NaClO4) in Single-Con Assay&quot;)+ xlab(&quot;Assay Plate ID&quot;) + ylab(&quot;Concentration (logM)&quot;) + theme(plot.title = element_text(hjust=0.5)) + theme_bw() #theme(legend.position = &quot;none&quot;) #summary library(psych) sc_pos_sum_raiu &lt;- sc_raiu_pos_sum %&gt;% dplyr::select(AC50_prim, absEC50_prim) %&gt;% rename(AC50=AC50_prim, absEC50 = absEC50_prim) %&gt;% describe knitr::kable(sc_pos_sum_raiu, digits = 2, caption=&quot;Summary of single-con RAIU positive control IC50s&quot;) Table 3.2: Summary of single-con RAIU positive control IC50s vars n mean sd median trimmed mad min max range skew kurtosis se AC50 1 15 -6.44 0.11 -6.45 -6.46 0.05 -6.57 -6.06 0.51 2.28 5.19 0.03 absEC50 2 15 -6.42 0.11 -6.43 -6.44 0.05 -6.55 -6.06 0.49 2.18 4.85 0.03 3.6.2 Single-Con Controls #only take the NaClO4 wells at 1E-4M s1 &lt;- dt_sc_norm %&gt;% filter(wllt!=&quot;t&quot;, spid!=&quot;NaClO4&quot;) s2 &lt;- dt_sc_norm %&gt;% filter(spid==&quot;NaClO4&quot;, conc== 1E-4) s3 &lt;- bind_rows(s1, s2) sc_ctrl_sum &lt;- s3 %&gt;% filter(wllt !=&quot;t&quot;) %&gt;% mutate(resp=nval_median) %&gt;% #rename(&quot;NaClO4(1E-4M)F&quot;=NaClO4) %&gt;% group_by(spid) %&gt;% summarize(mean = mean(resp), sd = sd(resp), min = min(resp), max = max(resp), CV = sd/mean*100) knitr::kable(sc_ctrl_sum, digits =2, caption=&quot;Single-Con control summary stats&quot;) Table 3.3: Single-Con control summary stats spid mean sd min max CV 2,4-D 92.41 4.24 83.91 100.71 4.59 DMSO 100.63 7.11 71.69 116.19 7.06 NaClO4 2.85 0.36 2.08 3.84 12.60 NaNO3 81.25 7.56 63.47 93.21 9.31 NaSCN 20.64 1.12 18.56 23.05 5.41 ##plot all sc controls ggplot(filter(s3, wllt !=&quot;t&quot;), aes(apid, nval_median)) + geom_point(aes(color=apid),alpha=0.6) + facet_grid(spid~.) + scale_y_continuous(limits= c(-20,140), breaks= seq(from=-20, to=140, by=20)) + #scale_x_discrete(breaks=NULL)+ scale_x_discrete(labels=NULL)+ ylab(&quot;Normalized Response&quot;) + xlab(&quot;Assay Plate ID&quot;)+ ggtitle(&quot;Response of controls in 15 Single-Con assay plates&quot;)+ theme_bw()+ theme(legend.position = &quot;none&quot;) + theme(plot.title=element_text(hjust=0.5)) 3.7 Visualize the single concentration data A total of 310 chemical samples was tested in the single-con and 169 were further tested in multi-concentration. The plot below showed the median, max, and min value for each tested chemical, and coloring shows which chemical were carried on to the multi-con assay. Because the assay has 3 replicates, so all three replicate’s data are actually plotted in this figure. #calculate median, max and min value sc_median &lt;- dt_sc_norm %&gt;% ungroup() %&gt;% filter(str_detect(dt_sc_norm$spid, &quot;^TP*&quot;)) %&gt;% mutate(welltype = &quot;sample&quot;) %&gt;% group_by(pid, spid) %&gt;% summarize( median = median(nval_median), up_range = max(nval_median), lo_range = min(nval_median), range = max(nval_median) - min(nval_median) ) %&gt;% ungroup() %&gt;% mutate(mc_test = ifelse(median &lt; 80, &quot;yes&quot;, &quot;No&quot;)) %&gt;% arrange(median) ##Plot single con median+range plot. library(RColorBrewer) #png(&#39;./output plots for SOT poster/single-con.png&#39;, units=&quot;px&quot;, width=1000*12.5, height=700*12.5, res=900) ggplot(sc_median, aes(x=reorder(spid, -median), y=median, color=mc_test)) + geom_point(size=1.5, alpha=0.6) + geom_errorbar(aes(ymax=up_range, ymin=lo_range), alpha=1) + xlab(&quot;Chemicals, ordered by increasing iodide uptake inhibition&quot;) + ylab(&quot;Iodide Uptake (% of control)&quot;)+scale_x_discrete(breaks=NULL) + #ggtitle(&quot;Median and Response of Test Chemicals&quot;)+ geom_hline(yintercept = 80, linetype=&quot;dashed&quot;, color=&quot;violetred1&quot;) + geom_hline(yintercept = 100, alpha=0.8) + geom_text(data = NULL, x = 270, y = 102, label = &quot;DMSO Control&quot;, color = &quot;grey30&quot;)+ geom_text(data = NULL, x = 270, y = 82, label = &quot;20% Inhibition&quot;, color = &quot;grey30&quot;)+ scale_y_continuous(breaks = seq(from = 0, to =100, by=20))+ scale_color_brewer(palette=&quot;Set1&quot;, name= &quot;Multi-Conc\\nAssay&quot;, labels= c(&quot;No&quot;, &quot;Yes&quot;)) + theme_few(base_size = 15) #dev.off() Get the spid of the 169 chemicals entering multi-con test. dt_mc &lt;- read_csv(&quot;./input data files/NIS_ph1_v2_mc_lvl0_for_tcpl_raiu.csv&quot;, na = &quot;NA&quot;) mc_chem_list &lt;- unique(dt_mc$spid)[-(1:6)] ls169 &lt;- sc_median %&gt;% filter(mc_test==&quot;yes&quot;) %&gt;% dplyr::select(spid) ls11 &lt;- data.frame(mc_chem_list) %&gt;% mutate(flag = (mc_chem_list %in% ls169$spid)) %&gt;% filter(flag==FALSE) %&gt;% dplyr::select(mc_chem_list) %&gt;% rename(spid=mc_chem_list) "],
["multi-conc-analysis.html", "4 Multi-Conc Analysis 4.1 Import MC data 4.2 Normalization 4.3 3bMAD of MC 4.4 Multi-Con QC 4.5 Multi-Con Controls 4.6 Dose-response modeling", " 4 Multi-Conc Analysis 4.1 Import MC data # import unblinded chemical name, aliquoted_concentration, cas number and rename the col names to keep only chnm, casn, spid, conc. spid_chnm_table &lt;- read_excel(&quot;./raw data files/EPA_11700_EPA-SLaws_ph1v2_150ul_20170125_key.xlsx&quot;) spid_chnm_table &lt;- spid_chnm_table %&gt;% dplyr::select(EPA_Sample_ID, CASRN, Preferred_Name) # rename the column title to be compatible with tcpl package. names(spid_chnm_table) &lt;- c(&quot;spid&quot;, &quot;casn&quot;, &quot;chnm&quot;) # Import MC data (look at the 169 chemicals) mc_lvl0_raiu_update &lt;- read_csv(&quot;./input data files/NIS_ph1_v2_mc_lvl0_for_tcpl_raiu.csv&quot;) %&gt;% filter(!(spid %in% ls11$spid)) mc_lvl0_cyto_update &lt;- read_csv(&quot;./input data files/NIS_ph1_v2_mc_lvl0_for_tcpl_cytotox.csv&quot;) %&gt;% filter(!(spid %in% ls11$spid)) dt_mc &lt;- bind_rows(mc_lvl0_cyto_update, mc_lvl0_raiu_update) 4.2 Normalization Normalize raw response to the median of DMSO controls, calculated per plate. dt_mc_norm &lt;- toxplot::normalize_per_plate(dt_mc) 4.3 3bMAD of MC #create concentration index dt_mc_norm &lt;- dt_mc_norm %&gt;% group_by(spid) %&gt;% mutate(cndx = generate_index(conc)) %&gt;% ungroup ## sig_mc &lt;- dt_mc_norm %&gt;% mutate(neg_nval_median= 100 - nval_median) %&gt;% group_by(assay) %&gt;% filter(wllt == &quot;t&quot;) %&gt;% filter(cndx == 1 | cndx == 2) %&gt;% summarise(bMAD = mad(neg_nval_median, na.rm = TRUE), three_bMAD=3*mad(neg_nval_median, na.rm = TRUE)) knitr::kable(sig_mc, digits =2) assay bMAD three_bMAD Cytotox 5.89 17.68 RAIU 7.93 23.78 4.4 Multi-Con QC #~~~~~~~~~~model mc controls~~~~~~~~~~~~~~~~~ ##extract mc related data frame d_pos_cyto &lt;- dt_mc_norm %&gt;% filter(assay == &quot;Cytotox&quot;, wllt== &quot;pc&quot;) d_pos_raiu &lt;- dt_mc_norm %&gt;% filter(assay == &quot;RAIU&quot;, wllt==&quot;pr&quot;) d_neg_cyto &lt;- dt_mc_norm %&gt;% filter(assay == &quot;Cytotox&quot;, wllt==&quot;nrc&quot;) d_neg_raiu &lt;- dt_mc_norm %&gt;% filter(assay == &quot;RAIU&quot;, wllt==&quot;nrc&quot;) d_ec80_raiu &lt;- dt_mc_norm %&gt;% filter(assay == &quot;RAIU&quot;, wllt==&quot;pr_ec80&quot;) d_ec20_raiu &lt;- dt_mc_norm %&gt;% filter(assay == &quot;RAIU&quot;, wllt==&quot;pr_ec20&quot;) ##plot all DCNQ in multi-con g_cyto_pos &lt;- qplot(data=d_pos_cyto, x=log10(conc), y=nval_median) + labs( #title = paste(&quot;SPID: &quot; , spid, &quot;\\nNAME: &quot;, chnm, &quot;\\nCAS NO: &quot;, casn, sep = &quot;&quot;), x = &quot;Concentration (logM)&quot;, y = &quot;% Control Activity&quot; ) + geom_point( color = &quot;#F8766D&quot;, shape = 1, alpha = 0.5, size = 1.8 ) + coord_fixed( ylim = c(0, 125), xlim = c(-9, -4), ratio = 2 / 70 ) + scale_y_continuous(breaks = seq( from = 0, to = 120, by = 20 )) + theme_bw() + # scale_color_manual(values=c(&quot;red&quot;,&quot;blue&quot;))+ theme(legend.title = element_blank())+ theme(plot.title=element_text(hjust=0.5)) g_cyto_pos # png(&#39;./output plots for SOT poster/DCNQ.png&#39;, units=&quot;px&quot;, width=512*12.5, height=306*12.5, res=900) # g_cyto_pos # dev.off() ##plot all NaClO4 in multi-con g_raiu_pos &lt;- qplot(data=d_pos_raiu, x=log10(conc), y=nval_median) + labs( #title = paste(&quot;SPID: &quot; , spid, &quot;\\nNAME: &quot;, chnm, &quot;\\nCAS NO: &quot;, casn, sep = &quot;&quot;), x = &quot;Concentration (logM)&quot;, y = &quot;% Control Activity&quot; ) + geom_point( #position=&quot;jitter&quot;, color = &quot;#00BFC4&quot;, shape = 1, alpha = 0.5, size = 1 ) + #geom_smooth(color = &quot;#00BFC4&quot;)+ coord_fixed( ylim = c(0, 125), xlim = c(-9, -4), ratio = 2 / 70 ) + scale_y_continuous(breaks = seq( from = 0, to = 120, by = 20 )) + theme_bw() + # scale_color_manual(values=c(&quot;red&quot;,&quot;blue&quot;))+ theme(legend.title = element_blank())+ theme(plot.title=element_text(hjust=0.5)) print(g_raiu_pos) # Obtain AC50 adn absEC50 for the positive controls d_pos_raiu &lt;- mutate(d_pos_raiu, spid = paste(spid, apid, sep = &quot;_&quot;)) pos_raiu_md &lt;- toxplot::fit_curve_tcpl(df = d_pos_raiu, assay_info = list(prim_assay = &quot;RAIU&quot;, toxi_assay = NULL)) ## Processing 54 samples(spid).... ## Curve Fitting Completed! ## Calculation time: 9.1 secs raiu_pos_tbl &lt;- toxplot::summary_tcpl(pos_raiu_md) d_pos_cyto &lt;- mutate(d_pos_cyto, spid = paste(spid, apid, sep = &quot;_&quot;)) pos_cyto_md &lt;- toxplot::fit_curve_tcpl(df = d_pos_cyto, assay_info = list(prim_assay = NULL, toxi_assay = &quot;Cytotox&quot;)) ## Processing 54 samples(spid).... ## Curve Fitting Completed! ## Calculation time: 5.1 secs cyto_pos_tbl &lt;- toxplot::summary_tcpl(pos_cyto_md) pos_tbl &lt;- bind_rows(cyto_pos_tbl, raiu_pos_tbl) #this is the modelling results for all mc positive summarizing EC50s of positive controls in multi-con assay. ##summarizing EC50s of positive controls. library(psych) pos_sum_raiu &lt;- raiu_pos_tbl %&gt;% dplyr::select(AC50_prim, absEC50_prim) %&gt;% describe pos_sum_cyto &lt;- cyto_pos_tbl %&gt;% dplyr::select(AC50_toxi, absEC50_toxi) %&gt;% describe knitr::kable(pos_sum_raiu, digits = 2, caption=&quot;Summary of RAIU positive control IC50s&quot;) Table 4.1: Summary of RAIU positive control IC50s vars n mean sd median trimmed mad min max range skew kurtosis se AC50_prim 1 54 -6.38 0.13 -6.41 -6.40 0.11 -6.57 -6.04 0.53 1.04 0.83 0.02 absEC50_prim 2 54 -6.36 0.13 -6.39 -6.38 0.10 -6.54 -6.04 0.51 0.89 0.52 0.02 knitr::kable(pos_sum_cyto, digits = 2, caption=&quot;Summary of Cytotox positive control IC50s&quot;) Table 4.1: Summary of Cytotox positive control IC50s vars n mean sd median trimmed mad min max range skew kurtosis se AC50_toxi 1 54 -4.83 0.12 -4.88 -4.86 0.03 -4.92 -4.47 0.45 1.98 2.87 0.02 absEC50_toxi 2 54 -4.83 0.10 -4.88 -4.85 0.03 -4.92 -4.55 0.37 1.75 1.74 0.01 4.5 Multi-Con Controls Visualize all controls in MC, NaClO4 and DCNQ are plotted using the 1E-4M concentration wells. m3 &lt;- dt_mc_norm %&gt;% filter(!wllt %in% c(&quot;t&quot;)) %&gt;% filter(!(spid %in% c(&quot;NaClO4&quot;, &quot;DCNQ&quot;))) m4 &lt;- dt_mc_norm %&gt;% filter(spid %in% c(&quot;NaClO4&quot;, &quot;DCNQ&quot;)) %&gt;% filter(conc == 1e-4) m31 &lt;- bind_rows(m3, m4) ## facet plots of all controls&#39; data points ggplot(m31, aes(apid, nval_median)) + geom_point(aes(color=apid),alpha=0.7) + facet_grid(spid~assay) + scale_y_continuous(limits= c(-20,140), breaks= seq(from=-20, to=140, by=20)) + #scale_x_discrete(breaks=NULL)+ scale_x_discrete(labels=NULL)+ ylab(&quot;% Control Activity&quot;) + xlab(&quot;Assay Plate ID&quot;)+ ggtitle(&quot;Response of controls in all 54 assay plates&quot;)+ theme_bw()+ theme(legend.position = &quot;none&quot;, plot.title=element_text(hjust=0.5)) ##print the control stats table. mc_ctrl_sum &lt;- m31 %&gt;% filter(wllt != &quot;t&quot;) %&gt;% #mutate(assay= if_else(aeid==1, &quot;Cytotox&quot;, &quot;RAIU&quot;)) %&gt;% #add &quot;assay&quot; variable mutate(resp=nval_median) %&gt;% group_by(assay, spid) %&gt;% summarize(mean = mean(resp), sd = sd(resp), min = min(resp), max = max(resp), CV = sd/mean*100) knitr::kable(mc_ctrl_sum, digits = 2, caption = &quot;Multi-Conc Control Summary Stats&quot;) Table 4.2: Multi-Conc Control Summary Stats assay spid mean sd min max CV Cytotox 2,4-D 99.34 4.21 90.92 113.31 4.24 Cytotox DCNQ 3.72 0.38 2.62 4.76 10.33 Cytotox DMSO 100.92 5.41 87.82 123.66 5.36 Cytotox NaClO4 99.19 4.69 89.12 112.51 4.73 Cytotox NaNO3 98.95 5.43 88.64 112.92 5.49 Cytotox NaSCN 104.30 3.98 94.83 117.03 3.81 RAIU 2,4-D 90.86 4.49 76.22 101.30 4.94 RAIU DCNQ 3.92 3.37 2.58 27.36 85.98 RAIU DMSO 99.50 8.28 80.77 119.46 8.32 RAIU NaClO4 3.28 0.38 2.30 4.33 11.47 RAIU NaNO3 83.08 7.17 69.45 98.80 8.63 RAIU NaSCN 24.69 2.71 20.47 43.17 10.99 4.6 Dose-response modeling The model used here is the Hill model provided in tcpl R package. \\[f(x) = \\frac{tp}{1+10^{(ga-x)gw}}\\] Where x is the log concentration, tp is the top asymptote, ga is the AC50 (the log concentration where the modeled activity equals 50% of the top asymptote), and gw is the hill coefficient. The Hill model provided in the tcpl R package constrains the three parameters as following: 0 ≤ tp ≤ 1.2 times the maximum response value (minimum log concentration minus 2) ≤ ga ≤ (maximum log concentration plus 0.5) 0.3 ≤ gw ≤ 8 The modelling is done using a wrapper function fit_curve_tcpl in ToxPlot package, which serve as an convenient interface to use the tcplFit function in the tcpl package, and returns a list object containing all data and modeling results. mc_model &lt;- fit_curve_tcpl(df = filter(dt_mc_norm, wllt == &quot;t&quot;), assay_info = list(prim_assay = &quot;RAIU&quot;, toxi_assay = &quot;Cytotox&quot;), prim_cutoff = 23.8, toxi_cutoff = 17.7) ## Processing 169 samples(spid).... ## Curve Fitting Completed! ## Calculation time: 44.3 secs "],
["rank-chemicals.html", "5 Rank Chemicals 5.1 Results Table for publication 5.2 Visualize ranking metrics", " 5 Rank Chemicals To prioritize the chemicals for potential NIS inhibition activity, a ranking score was calculated using two metrics that take into account the potential confounding impact of cytotoxicity on identifying RAIU inhibition activity: 1) toxicity-adjusted area (TAA) and 2) the difference of median responses of RAIU and cytotoxicity at maximum tested concentration (Median-Difference). TAA was defined by the maximum concentration vertical line (right border), the significant threshold horizontal line for RAIU assay (top border), and the dose-response curves of RAIU and cell viability results. The numeric value of TAA is penalized when a chemical demonstrates strong cytotoxicity. Median-Difference was calculated using the median of cell viability responses minus the median of RAIU responses at the maximum testing concentration (usually 100 µM). Larger separations between RAIU and cytotoxicity are reflected in larger Median-Difference values. TAA and Median-Difference were each separately rescaled from 0 to 100 and then summed to obtain a chemical ranking score ranging from 0 – 200. For chemicals with no RAIU response, TAA is assigned as 0 as well. Demonstration of TAA and Median-Difference sum_tbl &lt;- toxplot::rank_tcpl(mc_model, spid_chnm_table) #convert NAs in ranking_score to 0 sum_tbl &lt;- sum_tbl %&gt;% mutate(ranking_score=ifelse(is.na(ranking_score), 0, ranking_score), no_tox_flag = ifelse(is.na(AC50_toxi), &quot;1&quot;, &quot;0&quot;)) tier1 &lt;- sum_tbl %&gt;% filter(ranking_score &gt; 100) %&gt;% mutate(Activity_Group = &quot;&gt; 100&quot;) tier2 &lt;- sum_tbl %&gt;% filter(ranking_score &lt; 100 &amp; ranking_score &gt; 50) %&gt;% mutate(Activity_Group = &quot;50~100&quot;) tier3 &lt;- sum_tbl %&gt;% filter(ranking_score &lt; 50) %&gt;% mutate(Activity_Group = &quot;&lt; 50&quot;) sum_tbl_update &lt;- bind_rows(tier1, tier2, tier3) sum_tbl_update$Activity_Group %&gt;% table ## . ## &lt; 50 &gt; 100 50~100 ## 84 15 70 5.1 Results Table for publication multi_results &lt;- sum_tbl_update %&gt;% dplyr::select(spid, chnm, casn, AC50_prim, absEC50_prim, cyto_lim, ranking_score) ## merge sum-tbl with spid_chnm_table, to include all single and multi-con results spid_chnm_table &lt;- read_excel(&quot;./raw data files/EPA_11700_EPA-SLaws_ph1v2_150ul_20170125_key.xlsx&quot;) spid_chnm_table &lt;- spid_chnm_table %&gt;% dplyr::select(EPA_Sample_ID, Aliquot_Concentration, CASRN, Preferred_Name) #rename the column title to be compatible with tcpl package. names(spid_chnm_table) &lt;- c(&quot;spid&quot;, &quot;aliquot_conc&quot;, &quot;casn&quot;, &quot;chnm&quot;) #calculate the actual cocnentration tested in single-con screening #the unit will be convert from mM to Molar spid_chnm_table &lt;- spid_chnm_table %&gt;% mutate(test_conc = aliquot_conc / 2E5) colnames(spid_chnm_table) ## [1] &quot;spid&quot; &quot;aliquot_conc&quot; &quot;casn&quot; &quot;chnm&quot; ## [5] &quot;test_conc&quot; single_con_results &lt;- spid_chnm_table %&gt;% mutate(hitc = ifelse(spid %in% ls169$spid, &quot;+&quot;, &quot;-&quot;)) final_sum_tbl &lt;- full_join(single_con_results, multi_results, by = c(&quot;spid&quot;, &quot;chnm&quot;, &quot;casn&quot;)) %&gt;% dplyr::select(spid, chnm, casn, test_conc, hitc, everything()) %&gt;% dplyr::select(-aliquot_conc) %&gt;% arrange(desc(ranking_score), desc(hitc)) ## Warning: Column `spid` joining character vector and factor, coercing into ## character vector ## Warning: Column `chnm` joining character vector and factor, coercing into ## character vector ## Warning: Column `casn` joining character vector and factor, coercing into ## character vector colnames(final_sum_tbl) &lt;- c(&quot;SPID&quot;, &quot;Chemical&quot;, &quot;CAS NO.&quot;, &quot;Max Conc(M)&quot;, &quot;Hit Call&quot;, &quot;AC50&quot;, &quot;absEC50&quot;, &quot;Cytotox Point&quot;, &quot;Ranking Score&quot;) knitr::kable(final_sum_tbl, caption = &quot;List of chemicals and screening results&quot; ) Table 5.1: List of chemicals and screening results SPID Chemical CAS NO. Max Conc(M) Hit Call AC50 absEC50 Cytotox Point Ranking Score TP0001500G04 Etoxazole 153233-91-1 1.0e-04 + -5.917875 -5.882295 -4.323768 198.89505 TP0001502E10 Triphenyltin hydroxide 76-87-9 1.0e-04 + -5.386793 -5.388907 -5.168175 157.81647 TP0001501D03 Niclosamide 50-65-7 5.0e-05 + -6.954288 -6.787996 -6.912650 156.30635 TP0001502G01 3-Iodo-2-propynyl-N-butylcarbamate 55406-53-6 1.0e-04 + -5.089050 -5.301357 -4.794476 149.57745 TP0001501E07 PFOS 1763-23-1 8.0e-05 + -4.746544 -4.776923 -4.089537 132.33894 TP0001498G01 PFOS 1763-23-1 8.0e-05 + -4.722963 -4.740131 NA 130.89227 TP0001501G03 Rotenone 83-79-4 1.0e-04 + -7.149873 -6.219251 -7.301310 128.93977 TP0001498B02 Cyprodinil 121552-61-2 1.0e-04 + -4.428222 -4.429650 NA 124.89437 TP0001501C09 Pyridaben 96489-71-3 1.0e-04 + -8.635381 -7.488271 -7.594629 122.74859 TP0001500E11 Methoxyfenozide 161050-58-4 1.0e-04 + -4.784047 -4.722900 -4.674597 114.28077 TP0001500E05 2-(Thiocyanomethylthio)benzothiazole 21564-17-0 1.0e-04 + -4.325152 -4.370695 -4.906797 106.38600 TP0001500D09 Oxyfluorfen 42874-03-3 1.0e-04 + -4.554565 -4.385772 NA 103.41865 TP0001499D08 Captan 133-06-2 9.5e-05 + -4.494527 -4.501728 -4.806263 101.03730 TP0001502E07 Fluroxypyr-meptyl 81406-37-3 1.0e-04 + -4.765877 -4.735046 -4.734349 100.76709 TP0001502F03 Fipronil 120068-37-3 1.0e-04 + -4.569726 -4.630450 -4.921500 100.05766 TP0001499A01 Fenpyroximate (Z,E) 111812-58-9 1.0e-04 + -6.788967 -6.072622 -7.089643 98.47111 TP0001500D03 Cyhalofop-butyl 122008-85-9 9.5e-05 + -5.469458 -4.749693 -5.069548 95.36544 TP0001500E07 Emamectin benzoate 155569-91-8 1.0e-04 + -4.876405 -4.991496 -5.176755 91.56889 TP0001498C01 Thiobencarb 28249-77-6 1.0e-04 + -4.375865 -4.335303 -4.703088 89.59269 TP0001499C08 Diphenylamine 122-39-4 1.0e-04 + -4.739166 -4.281879 -5.587547 88.78634 TP0001499G03 Folpet 133-07-3 1.0e-04 + -4.934795 -4.916175 -5.645785 86.19727 TP0001499E01 Cyazofamid 120116-88-3 1.0e-04 + -5.593517 NA NA 83.44112 TP0001502F02 Zoxamide 156052-68-5 1.0e-04 + -4.482617 -4.373413 -4.654392 83.02279 TP0001499B03 Endosulfan 115-29-7 1.0e-04 + -4.354861 -4.388845 -4.920472 82.75620 TP0001498C04 Prometryn 7287-19-6 1.0e-04 + -4.439092 NA NA 81.92101 TP0001501E01 Parathion 56-38-2 1.0e-04 + -4.715121 -4.489069 -4.004493 80.55142 TP0001498F01 Fenthion 55-38-9 1.0e-04 + -4.401523 -4.176755 -3.719794 79.30221 TP0001502F09 Clorophene 120-32-1 1.0e-04 + -4.866817 -5.066953 -4.679209 79.04975 TP0001500D07 Triclosan 3380-34-5 1.0e-04 + -5.005832 -4.998903 -4.977714 78.36694 TP0001499F10 Trifloxystrobin 141517-21-7 1.0e-04 + -5.665385 -5.050069 -5.993146 77.29191 TP0001499G11 Mancozeb 8018-01-7 5.0e-05 + -4.918756 NA -4.782648 76.45337 TP0001502F04 Bifenazate 149877-41-8 1.0e-04 + -4.418498 -4.389668 -4.865702 75.53728 TP0001499G01 Triflumizole 68694-11-1 1.0e-04 + -4.534215 -4.611400 -4.815895 74.75085 TP0001499F01 Quinoxyfen 124495-18-7 1.0e-04 + -4.468980 -4.440010 -4.844998 74.25642 TP0001502B03 Methoxychlor 72-43-5 9.5e-05 + -4.582086 NA NA 73.73043 TP0001502B10 Coumaphos 56-72-4 1.0e-04 + -5.004331 -4.793280 -4.953740 72.68638 TP0001498H12 Pyraclostrobin 175013-18-0 1.0e-04 + -6.023311 -5.907278 -6.266554 71.93603 TP0001501C11 Triclosan 3380-34-5 1.0e-04 + -5.061147 -5.106920 -5.133652 71.93224 TP0001502F07 Chlorpyrifos-methyl 5598-13-0 1.0e-04 + -5.006926 NA -5.154674 70.90923 TP0001499C01 S-Bioallethrin 28434-00-6 1.0e-04 + -4.418129 -4.367875 -4.618689 70.84260 TP0001498D10 Fluoxastrobin 361377-29-9 1.0e-04 + -4.945634 -4.842821 -5.629787 70.71389 TP0001501E11 Prallethrin 23031-36-9 9.5e-05 + -4.378198 -4.327905 -4.658628 70.62620 TP0001499D01 Clorophene 120-32-1 1.0e-04 + -4.643285 -4.750173 -4.690834 69.17505 TP0001502G11 Fenoxaprop-ethyl 66441-23-4 1.0e-04 + -4.533077 -4.087931 -5.044014 68.35947 TP0001501D10 Fenoxycarb 72490-01-8 1.0e-04 + -4.466442 -4.513679 -4.905288 67.95168 TP0001499E10 Diclosulam 145701-21-9 1.0e-04 + -4.819976 NA -4.916144 67.62687 TP0001500G01 Hexaconazole 79983-71-4 1.0e-04 + -4.447531 -4.129806 -4.553569 67.58212 TP0001498B11 Triclosan 3380-34-5 1.0e-04 + -4.920792 -4.903281 -5.010935 67.42464 TP0001498D08 Tebupirimfos 96182-53-5 1.0e-04 + -4.613369 -4.416063 -4.542833 67.01025 TP0001500E08 Pyriproxyfen 95737-68-1 1.0e-04 + -4.697759 -4.107290 -4.895898 66.38612 TP0001500D05 Tebufenpyrad 119168-77-3 1.0e-04 + -5.601627 -5.823582 -6.213856 65.70514 TP0001498C09 Methylene bis(thiocyanate) 6317-18-6 1.0e-04 + -4.661978 -4.785578 -4.859750 65.29440 TP0001501C02 Abamectin 71751-41-2 1.0e-04 + -4.330830 NA NA 64.96933 TP0001502C11 Carfentrazone-ethyl 128639-02-1 1.0e-04 + -4.348750 -4.030628 -4.396945 64.67171 TP0001498A01 Pirimiphos-methyl 29232-93-7 1.0e-04 + -4.425981 NA -4.173694 64.32158 TP0001502G02 Dibutyl phthalate 84-74-2 1.0e-04 + -4.543000 NA -3.979128 64.27544 TP0001502D03 Bisphenol A 80-05-7 1.0e-04 + -4.359949 NA NA 61.99300 TP0001502D04 Diclofop-methyl 51338-27-3 1.0e-04 + -4.485791 -4.122849 -4.507350 61.22602 TP0001498B08 Dithiopyr 97886-45-8 9.5e-05 + -4.651894 NA NA 61.04116 TP0001500G11 Dibutyl phthalate 84-74-2 1.0e-04 + -4.527412 NA -4.286569 60.84862 TP0001498G03 Lactofen 77501-63-4 1.0e-04 + -4.787662 NA NA 59.80343 TP0001500C09 Piperonyl butoxide 51-03-6 1.0e-04 + -4.219289 NA -4.866428 59.26321 TP0001502G03 Cloprop 101-10-0 1.0e-04 + -4.485123 NA -3.445520 58.64951 TP0001500B08 Buprofezin 69327-76-0 1.0e-04 + -4.553142 -4.613160 -4.949792 58.35019 TP0001498C10 Flutolanil 66332-96-5 1.0e-04 + -4.495682 NA NA 58.01977 TP0001501G11 Phosalone 2310-17-0 1.0e-04 + -4.462967 -4.352939 -4.592465 56.92719 TP0001500G03 Cinmethylin 87818-31-3 1.0e-04 + -4.227274 NA -4.433089 56.85991 TP0001499C09 Clodinafop-propargyl 105512-06-9 1.0e-04 + -5.704279 NA NA 56.48747 TP0001502D09 Chlorpropham 101-21-3 1.0e-04 + -4.424199 NA NA 56.22445 TP0001502F05 Allethrin 584-79-2 1.0e-04 + -4.518584 -4.492677 -4.816444 55.70063 TP0001501E03 Ethalfluralin 55283-68-6 1.0e-04 + -5.164012 -4.925893 -5.928392 54.70279 TP0001500G08 Fluazinam 79622-59-6 9.0e-05 + -5.164429 -5.131896 -5.398316 54.42772 TP0001501G10 Disulfoton 298-04-4 1.0e-04 + -4.273303 NA -4.443013 54.37874 TP0001502B05 Flumiclorac-pentyl 87546-18-7 1.0e-04 + -4.502850 -4.158574 -5.260426 54.35027 TP0001502D11 Forchlorfenuron 68157-60-8 1.0e-04 + -4.437610 -4.495482 -4.936864 54.10882 TP0001500F07 Flumetralin 62924-70-3 1.0e-04 + -4.329968 NA NA 53.31230 TP0001499D02 Tri-allate 2303-17-5 1.0e-04 + -4.611375 -4.569784 -4.844154 52.29797 TP0001500B09 Lindane 58-89-9 1.0e-04 + -4.315567 NA NA 52.08245 TP0001501D02 Cyfluthrin 68359-37-5 1.0e-04 + -4.572900 NA NA 51.54972 TP0001502G07 Imazalil 35554-44-0 1.0e-04 + -4.501031 NA -4.941015 51.50392 TP0001502E02 Trifluralin 1582-09-8 1.0e-04 + -4.950251 NA -5.606686 51.28635 TP0001499E11 Tetraconazole 112281-77-3 9.5e-05 + -4.647793 -4.329864 -4.858258 51.17234 TP0001500F09 Amitraz 33089-61-1 1.0e-04 + -4.218560 NA -4.941021 50.51574 TP0001502B07 Azoxystrobin 131860-33-8 1.0e-04 + -4.578673 -4.590906 -5.035290 50.33366 TP0001502E08 Cypermethrin 52315-07-8 1.0e-04 + -4.961956 NA NA 50.09757 TP0001500F11 Tebufenozide 112410-23-8 1.0e-04 + -4.678973 NA NA 49.83260 TP0001502C07 Thiazopyr 117718-60-2 1.0e-04 + -4.624605 NA NA 49.40282 TP0001500F01 Fluazifop-butyl 69806-50-4 1.0e-04 + -4.357978 NA -4.254881 49.35178 TP0001501B01 Mancozeb 8018-01-7 5.0e-05 + -4.753129 NA NA 49.03371 TP0001502F10 Fenarimol 60168-88-9 1.0e-04 + -5.112799 NA -1.666964 48.61100 TP0001499B11 Allethrin 584-79-2 1.0e-04 + -4.274368 -4.235121 -4.686300 48.11269 TP0001498E08 Maneb 12427-38-2 1.0e-04 + -4.365780 NA NA 48.04741 TP0001498D07 Flusilazole 85509-19-9 1.0e-04 + -4.250040 -4.162035 -4.658604 47.84839 TP0001500E10 Diniconazole 83657-24-3 1.0e-04 + -4.496984 -4.561101 -4.790259 46.86544 TP0001499B01 Bisphenol A 80-05-7 1.0e-04 + -4.352118 NA NA 46.72788 TP0001498G05 Ametryn 834-12-8 1.0e-04 + -4.264521 NA NA 46.25550 TP0001499G10 Fluazifop-P-butyl 79241-46-6 1.0e-04 + -4.405977 NA -4.832645 46.17530 TP0001501G09 Pendimethalin 40487-42-1 1.0e-04 + -4.318049 NA -4.359206 45.49740 TP0001501F07 Fenitrothion 122-14-5 1.0e-04 + -4.490233 NA NA 44.91950 TP0001502B04 Isazofos 42509-80-8 1.0e-04 + -4.264610 NA NA 44.87693 TP0001498F05 Difenoconazole 119446-68-3 1.0e-04 + -4.746232 -4.899832 -5.089741 44.53491 TP0001502B01 Oxadiazon 19666-30-9 1.0e-04 + -4.302734 NA -4.428613 43.89953 TP0001498D11 Hexythiazox 78587-05-0 1.0e-04 + -4.456997 NA NA 42.77619 TP0001500E09 Fenamidone 161326-34-7 1.0e-04 + -4.286723 NA -4.084374 42.76863 TP0001502C04 Fluthiacet-methyl 117337-19-6 1.0e-04 + -4.718633 NA -3.584935 42.21656 TP0001500B05 Famoxadone 131807-57-3 1.0e-04 + -5.685089 -4.806942 -6.035026 41.82768 TP0001502E04 Dicofol 115-32-2 1.0e-04 + -4.537291 -4.605126 -4.722601 41.64215 TP0001501F01 Azoxystrobin 131860-33-8 1.0e-04 + -4.418804 -4.471264 -5.060528 41.52727 TP0001498E01 Oryzalin 19044-88-3 1.0e-04 + -4.379158 -4.166336 -4.625589 41.22042 TP0001501E05 Thidiazuron 51707-55-2 1.0e-04 + -4.443190 NA -4.229707 40.94062 TP0001500F02 Propargite 2312-35-8 1.0e-04 + -4.399294 NA -4.643757 40.59187 TP0001501E02 2,2-Bis(4-hydroxyphenyl)-1,1,1-trichloroethane 2971-36-0 1.0e-04 + -4.391825 -4.456372 -4.896186 40.29254 TP0001502G09 Propiconazole 60207-90-1 1.0e-04 + -4.394199 NA -4.742466 39.46171 TP0001498E11 Chlorethoxyfos 54593-83-8 1.0e-04 + -4.408635 NA NA 38.84735 TP0001502G04 Thiodicarb 59669-26-0 1.0e-04 + -4.906405 NA -4.825890 37.67521 TP0001500G09 Prodiamine 29091-21-2 1.0e-04 + -4.489769 -4.517266 -4.802292 37.56636 TP0001500D04 Ethofumesate 26225-79-6 1.0e-04 + -4.516926 NA -4.556534 37.55545 TP0001498F07 Bensulide 741-58-2 1.0e-04 + -4.424024 -4.432669 -4.830543 37.12226 TP0001501D04 Bensulide 741-58-2 1.0e-04 + -4.314508 -4.336374 -4.722241 36.62929 TP0001500C04 Bisphenol A 80-05-7 1.0e-04 + -4.298259 NA -3.767297 35.78372 TP0001500G05 Flumioxazin 103361-09-7 1.0e-04 + -4.376734 -4.403418 -4.843280 34.33206 TP0001502A01 Methidathion 950-37-8 1.0e-04 + -4.415429 NA -4.217891 34.02878 TP0001498B05 Azoxystrobin 131860-33-8 1.0e-04 + -4.392114 -4.393881 -5.014610 32.99518 TP0001498B09 Butralin 33629-47-9 1.0e-04 + -4.354818 NA -4.673799 32.20198 TP0001498D01 Dicloran 99-30-9 1.0e-04 + -4.633254 NA -5.025002 30.88790 TP0001500D11 Oryzalin 19044-88-3 1.0e-04 + -4.354023 NA -4.595974 30.51859 TP0001501B10 Fenbuconazole 114369-43-6 1.0e-04 + -4.269334 -4.301289 -4.723135 29.12104 TP0001499E09 Thiram 137-26-8 1.0e-04 + -4.178637 -4.038221 -4.883205 28.30012 TP0001500B02 Tetramethrin 7696-12-0 1.0e-04 + -4.412682 -4.316145 -4.881640 28.19336 TP0001498D05 Profenofos 41198-08-7 5.0e-05 + -4.549520 NA -4.903996 26.05988 TP0001501D01 Quizalofop-ethyl 76578-14-8 8.5e-05 + -4.421886 NA -4.644524 23.65738 TP0001498D03 Prochloraz 67747-09-5 1.0e-04 + -4.183663 -4.124757 -4.685496 22.07180 TP0001501C04 Milbemectin (mixture of 70% Milbemcin A4, 30% Milbemycin A3) NOCAS_34742 9.5e-05 + -4.221493 NA -5.034050 22.02311 TP0001499G02 Tribufos 78-48-8 1.0e-04 + -4.943412 NA -5.219940 19.13510 TP0001498B07 Captafol 2425-06-1 1.0e-04 + -4.453150 -4.486013 -5.061617 18.90617 TP0001499C07 Benfluralin 1861-40-1 1.0e-04 + -4.623759 NA -4.774606 16.69547 TP0001498D02 Chlorothalonil 1897-45-6 1.0e-04 + NA NA -4.032396 0.00000 TP0001498G02 Propanil 709-98-8 1.0e-04 + NA NA -3.879589 0.00000 TP0001498C03 Bromoxynil 1689-84-5 8.0e-05 + NA NA -5.220022 0.00000 TP0001498F03 Napropamide 15299-99-7 1.0e-04 + NA NA NA 0.00000 TP0001498E04 Nitrapyrin 1929-82-4 1.0e-04 + NA NA NA 0.00000 TP0001498G08 Propetamphos 31218-83-4 1.0e-04 + NA NA NA 0.00000 TP0001498G09 Myclobutanil 88671-89-0 1.0e-04 + NA NA NA 0.00000 TP0001498C11 Malathion 121-75-5 1.0e-04 + NA NA -4.320582 0.00000 TP0001499E02 Resmethrin 10453-86-8 1.0e-04 + NA NA -4.413103 0.00000 TP0001499E03 Fenpropathrin 39515-41-8 1.0e-04 + NA NA NA 0.00000 TP0001499B05 Picloram 1918-02-1 1.0e-04 + NA NA NA 0.00000 TP0001499B07 Fludioxonil 131341-86-1 1.0e-04 + NA NA -4.164097 0.00000 TP0001500A01 Acibenzolar-S-methyl 135158-54-2 1.0e-04 + NA NA NA 0.00000 TP0001500E01 MGK-264 113-48-4 1.0e-04 + -4.284419 NA -4.728259 0.00000 TP0001500G02 Azinphos-methyl 86-50-0 1.0e-04 + NA NA -3.983540 0.00000 TP0001500F03 Mancozeb 8018-01-7 5.0e-05 + NA NA NA 0.00000 TP0001500F04 Boscalid 188425-85-6 1.0e-04 + NA NA -3.294023 0.00000 TP0001500C05 Butachlor 23184-66-9 1.0e-04 + NA NA -4.360735 0.00000 TP0001500B07 Tefluthrin 79538-32-2 1.0e-04 + NA NA NA 0.00000 TP0001500G07 Butafenacil 134605-64-4 1.0e-04 + NA NA -4.038066 0.00000 TP0001501A01 Tralkoxydim 87820-88-0 1.0e-04 + NA NA NA 0.00000 TP0001501C01 Pyraflufen-ethyl 129630-19-9 1.0e-04 + NA NA -4.332647 0.00000 TP0001501G02 Prometon 1610-18-0 1.0e-04 + NA NA NA 0.00000 TP0001501C03 Vinclozolin 50471-44-8 1.0e-04 + NA NA NA 0.00000 TP0001501F04 2-Phenylphenol 90-43-7 1.0e-04 + NA NA NA 0.00000 TP0001501G04 Clomazone 81777-89-1 1.0e-04 + NA NA NA 0.00000 TP0001501B05 Flufenpyr-ethyl 188489-07-8 1.0e-04 + NA NA NA 0.00000 TP0001501D05 Chlorpyrifos oxon 5598-15-2 9.5e-05 + NA NA -4.004834 0.00000 TP0001501B08 Fenhexamid 126833-17-8 1.0e-04 + NA NA -4.149207 0.00000 TP0001501B11 Cycloate 1134-23-2 1.0e-04 + NA NA NA 0.00000 TP0001502E01 Naled 300-76-5 1.0e-04 + NA NA NA 0.00000 TP0001502E03 Linuron 330-55-2 1.0e-04 + NA NA NA 0.00000 TP0001502C09 EPTC 759-94-4 1.0e-04 + NA NA NA 0.00000 TP0001498B01 Bifenthrin 82657-04-3 1.0e-04 - NA NA NA NA TP0001498C02 Bentazone 25057-89-0 1.0e-04 - NA NA NA NA TP0001498E02 Mesotrione 104206-82-8 1.0e-04 - NA NA NA NA TP0001498F02 Esfenvalerate 66230-04-4 1.0e-04 - NA NA NA NA TP0001498B03 Thiophanate-methyl 23564-05-8 1.0e-04 - NA NA NA NA TP0001498E03 Trichlorfon 52-68-6 1.0e-04 - NA NA NA NA TP0001498B04 Carbaryl 63-25-2 1.0e-04 - NA NA NA NA TP0001498D04 2,4-Dichlorophenoxyacetic acid 94-75-7 1.0e-04 - NA NA NA NA TP0001498F04 Boric acid 10043-35-3 1.0e-04 - NA NA NA NA TP0001498G04 Dichlorprop 120-36-5 1.0e-04 - NA NA NA NA TP0001498C05 Dicrotophos 141-66-2 1.0e-04 - NA NA NA NA TP0001498E05 Butylate 2008-41-5 1.0e-04 - NA NA NA NA TP0001498C07 Dimethylarsinic acid 75-60-5 1.0e-04 - NA NA NA NA TP0001498E07 Dichlorvos 62-73-7 5.0e-05 - NA NA NA NA TP0001498G07 Malaoxon 1634-78-2 1.0e-04 - NA NA NA NA TP0001498C08 Cyanazine 21725-46-2 1.0e-04 - NA NA NA NA TP0001498F08 Methomyl 16752-77-5 1.0e-04 - NA NA NA NA TP0001498D09 PFOA 335-67-1 1.0e-04 - NA NA NA NA TP0001498E09 Propoxur 114-26-1 1.0e-04 - NA NA NA NA TP0001498F09 Imazethapyr 81335-77-5 1.0e-04 - NA NA NA NA TP0001498B10 Imidacloprid 138261-41-3 1.0e-04 - NA NA NA NA TP0001498E10 Fenamiphos 22224-92-6 1.0e-04 - NA NA NA NA TP0001498F10 Clopyralid 1702-17-6 1.0e-04 - NA NA NA NA TP0001498G10 Metalaxyl 57837-19-1 1.0e-04 - NA NA NA NA TP0001498F11 Monocrotophos 6923-22-4 1.0e-04 - NA NA NA NA TP0001498G11 Indoxacarb 173584-44-6 8.0e-05 - NA NA NA NA TP0001499B02 Acephate 30560-19-1 1.0e-04 - NA NA NA NA TP0001499C02 Anilazine 101-05-3 1.0e-04 - NA NA NA NA TP0001499F02 Diuron 330-54-1 1.0e-04 - NA NA NA NA TP0001499C03 Clofentezine 74115-24-5 1.0e-04 - NA NA NA NA TP0001499D03 Methamidophos 10265-92-6 1.0e-04 - NA NA NA NA TP0001499F03 Thiamethoxam 153719-23-4 1.0e-04 - NA NA NA NA TP0001499B04 Formetanate hydrochloride 23422-53-9 1.0e-04 - NA NA NA NA TP0001499C04 Fluometuron 2164-17-2 1.0e-04 - NA NA NA NA TP0001499D04 Difenzoquat metilsulfate 43222-48-6 1.0e-04 - NA NA NA NA TP0001499E04 Bendiocarb 22781-23-3 1.0e-04 - NA NA NA NA TP0001499F04 Alachlor 15972-60-8 1.0e-04 - NA NA NA NA TP0001499G04 Dimethenamid 87674-68-8 1.0e-04 - NA NA NA NA TP0001499C05 2,4-Dichlorophenoxyacetic acid 94-75-7 1.0e-04 - NA NA NA NA TP0001499D05 Ethylene thiourea 96-45-7 1.0e-04 - NA NA NA NA TP0001499E05 Azamethiphos 35575-96-3 1.0e-04 - NA NA NA NA TP0001499F05 Dazomet 533-74-4 1.0e-04 - NA NA NA NA TP0001499G05 Pyrimethanil 53112-28-0 1.0e-04 - NA NA NA NA TP0001499D07 Propyzamide 23950-58-5 1.0e-04 - NA NA NA NA TP0001499E07 Triadimenol 55219-65-3 1.0e-04 - NA NA NA NA TP0001499F07 Pirimicarb 23103-98-2 1.0e-04 - NA NA NA NA TP0001499G07 Isoxaben 82558-50-7 1.0e-04 - NA NA NA NA TP0001499B08 Acetochlor 34256-82-1 1.0e-04 - NA NA NA NA TP0001499E08 Acifluorfen 50594-66-6 1.0e-04 - NA NA NA NA TP0001499F08 Tepraloxydim 149979-41-9 1.0e-04 - NA NA NA NA TP0001499G08 Clopyralid-olamine 57754-85-5 1.0e-04 - NA NA NA NA TP0001499B09 2,4-DB 94-82-6 1.0e-04 - NA NA NA NA TP0001499D09 Hexazinone 51235-04-2 1.0e-04 - NA NA NA NA TP0001499F09 Tebuthiuron 34014-18-1 1.0e-04 - NA NA NA NA TP0001499G09 Iprodione 36734-19-7 1.0e-04 - NA NA NA NA TP0001499B10 Dicamba 1918-00-9 1.0e-04 - NA NA NA NA TP0001499C10 Methyl parathion 298-00-0 1.0e-04 - NA NA NA NA TP0001499D10 Fluroxypyr 69377-81-7 1.0e-04 - NA NA NA NA TP0001499C11 Dimethomorph 110488-70-5 1.0e-04 - NA NA NA NA TP0001499D11 Benomyl 17804-35-2 1.0e-04 - NA NA NA NA TP0001499F11 Monomethyl phthalate 4376-18-5 1.0e-04 - NA NA NA NA TP0001499H12 Diazinon 333-41-5 1.0e-04 - NA NA NA NA TP0001500B01 Cyclanilide 113136-77-9 1.0e-04 - NA NA NA NA TP0001500C01 Cyanamide 420-04-2 1.0e-04 - NA NA NA NA TP0001500D01 Ethoprop 13194-48-4 1.0e-04 - NA NA NA NA TP0001500C02 Penoxsulam 219714-96-2 1.0e-04 - NA NA NA NA TP0001500D02 Clothianidin 210880-92-5 1.0e-04 - NA NA NA NA TP0001500E02 Di(2-ethylhexyl) phthalate 117-81-7 1.0e-04 - NA NA NA NA TP0001500B03 Acetamiprid 135410-20-7 1.0e-04 - NA NA NA NA TP0001500C03 Novaluron 116714-46-6 1.0e-04 - NA NA NA NA TP0001500E03 Isoxaflutole 141112-29-0 1.0e-04 - NA NA NA NA TP0001500B04 Imazamox 114311-32-9 1.0e-04 - NA NA NA NA TP0001500E04 Sulfentrazone 122836-35-5 1.0e-04 - NA NA NA NA TP0001500F05 Cyproconazole 94361-06-5 9.5e-05 - NA NA NA NA TP0001500C07 Pymetrozine 123312-89-0 1.0e-04 - NA NA NA NA TP0001500C08 Spiroxamine 118134-30-8 1.0e-04 - NA NA NA NA TP0001500D08 Quinclorac 84087-01-4 1.0e-04 - NA NA NA NA TP0001500F08 Triclopyr 55335-06-3 1.0e-04 - NA NA NA NA TP0001500B10 Propamocarb hydrochloride 25606-41-1 1.0e-04 - NA NA NA NA TP0001500C10 Monobutyl phthalate 131-70-4 1.0e-04 - NA NA NA NA TP0001500D10 Pentachloronitrobenzene 82-68-8 1.0e-04 - NA NA NA NA TP0001500F10 Flufenacet 142459-58-3 1.0e-04 - NA NA NA NA TP0001500G10 Imazapyr 81334-34-1 1.0e-04 - NA NA NA NA TP0001500B11 Trifloxysulfuron-sodium 199119-58-9 1.0e-04 - NA NA NA NA TP0001500C11 Propazine 139-40-2 1.0e-04 - NA NA NA NA TP0001500H12 Thiacloprid 111988-49-9 1.0e-04 - NA NA NA NA TP0001501G01 2-Methoxyethanol 109-86-4 1.0e-04 - NA NA NA NA TP0001501B02 Chloridazon 1698-60-8 1.0e-04 - NA NA NA NA TP0001501F02 Asulam 3337-71-1 1.0e-04 - NA NA NA NA TP0001501B03 Pyrithiobac-sodium 123343-16-8 1.0e-04 - NA NA NA NA TP0001501F03 Deisopropylatrazine 1007-28-9 1.0e-04 - NA NA NA NA TP0001501B04 Molinate 2212-67-1 1.0e-04 - NA NA NA NA TP0001501E04 Oxytetracycline dihydrate 6153-64-6 1.0e-04 - NA NA NA NA TP0001501C05 Spirodiclofen 148477-71-8 1.0e-04 - NA NA NA NA TP0001501F05 Carboxin 5234-68-4 1.0e-04 - NA NA NA NA TP0001501G05 Oxamyl 23135-22-0 1.0e-04 - NA NA NA NA TP0001501B07 Symclosene 87-90-1 1.0e-04 - NA NA NA NA TP0001501C07 Fosthiazate 98886-44-3 1.0e-04 - NA NA NA NA TP0001501D07 Sethoxydim 74051-80-2 1.0e-04 - NA NA NA NA TP0001501G07 Dimethoate 60-51-5 1.0e-04 - NA NA NA NA TP0001501C08 MCPA 94-74-6 1.0e-04 - NA NA NA NA TP0001501D08 Paclobutrazol 76738-62-0 1.0e-04 - NA NA NA NA TP0001501E08 Dipropyl 2,5-pyridinedicarboxylate 136-45-8 1.0e-04 - NA NA NA NA TP0001501F08 Methyl isothiocyanate 556-61-6 1.0e-04 - NA NA NA NA TP0001501G08 DEET 134-62-3 1.0e-04 - NA NA NA NA TP0001501B09 Cyromazine 66215-27-8 1.0e-04 - NA NA NA NA TP0001501D09 Imazaquin 81335-37-7 1.0e-04 - NA NA NA NA TP0001501E09 Metribuzin 21087-64-9 1.0e-04 - NA NA NA NA TP0001501F09 Flumetsulam 98967-40-9 1.0e-04 - NA NA NA NA TP0001501C10 Triadimefon 43121-43-3 1.0e-04 - NA NA NA NA TP0001501E10 Metolachlor 51218-45-2 1.0e-04 - NA NA NA NA TP0001501F10 Permethrin 52645-53-1 1.0e-04 - NA NA NA NA TP0001501D11 Terbacil 5902-51-2 1.0e-04 - NA NA NA NA TP0001501F11 Triadimenol 55219-65-3 1.0e-04 - NA NA NA NA TP0001501H12 Etridiazole 2593-15-9 1.0e-04 - NA NA NA NA TP0001502C01 Propoxycarbazone-sodium 181274-15-7 1.0e-04 - NA NA NA NA TP0001502D01 Mevinphos 7786-34-7 1.0e-04 - NA NA NA NA TP0001502F01 Bromacil 314-40-9 1.0e-04 - NA NA NA NA TP0001502B02 Metam-sodium hydrate 6734-80-1 1.0e-04 - NA NA NA NA TP0001502C02 2,4-Dichlorophenoxyacetic acid 94-75-7 1.0e-04 - NA NA NA NA TP0001502D02 Thiabendazole 148-79-8 1.0e-04 - NA NA NA NA TP0001502C03 Atrazine 1912-24-9 1.0e-04 - NA NA NA NA TP0001502C05 2-Phenoxyethanol 122-99-6 1.0e-04 - NA NA NA NA TP0001502D05 Icaridin 119515-38-7 1.0e-04 - NA NA NA NA TP0001502E05 Imazapic 104098-48-8 1.0e-04 - NA NA NA NA TP0001502G05 Aldicarb 116-06-3 1.0e-04 - NA NA NA NA TP0001502D07 Triticonazole 131983-72-7 9.5e-05 - NA NA NA NA TP0001502B08 Diazoxon 962-58-3 1.0e-04 - NA NA NA NA TP0001502C08 Maleic hydrazide 123-33-1 1.0e-04 - NA NA NA NA TP0001502D08 Daminozide 1596-84-5 1.0e-04 - NA NA NA NA TP0001502F08 Mepiquat chloride 24307-26-4 1.0e-04 - NA NA NA NA TP0001502G08 Norflurazon 27314-13-2 1.0e-04 - NA NA NA NA TP0001502B09 Chloroneb 2675-77-6 1.0e-04 - NA NA NA NA TP0001502E09 Ethephon 16672-87-0 1.0e-04 - NA NA NA NA TP0001502C10 Iodosulfuron-methyl-sodium 144550-36-7 1.0e-04 - NA NA NA NA TP0001502D10 Simazine 122-34-9 1.0e-04 - NA NA NA NA TP0001502G10 MEHP 4376-20-9 1.0e-04 - NA NA NA NA TP0001502B11 Cymoxanil 57966-95-7 1.0e-04 - NA NA NA NA TP0001502E11 Diquat dibromide monohydrate 6385-62-2 5.0e-05 - NA NA NA NA TP0001502F11 Dimethyl phthalate 131-11-3 1.0e-04 - NA NA NA NA TP0001502H12 Dichlobenil 1194-65-6 1.0e-04 - NA NA NA NA #write.csv(final_sum_tbl, &quot;./output data files/sum_tble_for_paper.csv&quot;) 5.2 Visualize ranking metrics #plot ranking score. # # png(&#39;./output plots for SOT poster/ranking_score_for_paper_alt.png&#39;, units=&quot;px&quot;, width=500*12.5, height=400*12.5, res=900) ggplot(sum_tbl_update, aes(color=as.factor(no_tox_flag)) ) + geom_point(aes(x=reorder(spid, ranking_score), y= ranking_score, shape=Activity_Group), alpha = 1, size = 1) + geom_hline(yintercept = 100, alpha = 0.8, size = 0.8, linetype = &quot;dashed&quot;, color = &quot;gray3&quot;) + geom_hline(yintercept = 50, alpha = 0.8, size = 0.8, linetype = &quot;dashed&quot;, color = &quot;gray3&quot;) + geom_rect(aes(xmin = 154, xmax= 170, ymin = 100, ymax = +Inf), linetype =0, fill=&quot;gray80&quot;, alpha=0.1)+ geom_rect(aes(xmin = 86, xmax= 154, ymin = 50, ymax = 100), linetype =0, fill =&quot;gray80&quot;, alpha=0.1)+ geom_rect(aes(xmin = 0, xmax= 86, ymin = 0, ymax = 50), linetype =0, fill =&quot;gray80&quot;, alpha=0.1)+ geom_point(aes(x=reorder(spid, ranking_score), y= ranking_score, shape=Activity_Group), alpha = 1, size = 2) + #ggtitle(&quot;Ranking Scores&quot;) + xlab(&quot;Chemicals, ordered by ranking scores&quot;) + ylab(&quot;Ranking Score&quot;)+ theme_few() + #scale_x_discrete(labels=NULL)+ theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.text.y=element_text(size=rel(1.2)))+ scale_color_discrete(name =&quot;Cytotoxicity&quot;, labels=c(&quot;+&quot;, &quot;-&quot;)) + scale_shape_discrete(breaks = c(&quot;&gt; 100&quot;, &quot;50~100&quot;, &quot;&lt; 50&quot;)) + theme(axis.title = element_text(size = rel(1.2))) + theme(plot.title = element_text(hjust=0.5)) + theme(legend.justification = c(0,1), legend.position = c(0.01, 0.99)) #+ #theme(legend.background = element_rect(fill=&quot;gray90&quot;, size=.5, linetype=&quot;dotted&quot;)) # dev.off() "],
["toxcast-internal-replicates.html", "6 ToxCast Internal Replicates", " 6 ToxCast Internal Replicates 6.0.1 Single-con internal Replicate performance ToxCast Ph1_v2 library included internal replicates. They are the same chemical but under different sample id, therefore tested blindly with each sample repliated three times. . There are 12 chemicals been repeated, showed in the following table name_code &lt;- spid_chnm_table %&gt;% dplyr::select(spid, casn, chnm) #check which chemical is repeated in toxcast ph1_v2 library chnm_freq &lt;- data.frame(table(name_code$chnm)) %&gt;% arrange(desc(Freq)) internal_rep &lt;- head(chnm_freq, 12) knitr::kable(internal_rep) Var1 Freq 2,4-Dichlorophenoxyacetic acid 3 Azoxystrobin 3 Bisphenol A 3 Mancozeb 3 Triclosan 3 Allethrin 2 Bensulide 2 Clorophene 2 Dibutyl phthalate 2 Oryzalin 2 PFOS 2 Triadimenol 2 ##add chnm to sc data sc_unblind &lt;- left_join(dt_sc_norm, name_code, by= &quot;spid&quot;) ## get sc data for interval replicates sc_rep &lt;- sc_unblind %&gt;% dplyr::filter(chnm %in% internal_rep$Var1) sc_rep$chnm &lt;- str_replace(sc_rep$chnm, &quot;2,4-Dichlorophenoxyacetic acid&quot;, &quot;2,4-D&quot;) library(RColorBrewer) # png(&#39;./output plots for SOT poster/internal_control_single_con.png&#39;, units=&quot;px&quot;, width=600*8.33, height=400*8.33, res=600) ggplot(sc_rep, aes(x=reorder(chnm, -nval_median), y=nval_median) ) + geom_point(size=3, alpha = 0.9, aes(shape=pid, color=chnm), position = position_jitter(width=0.5)) + #geom_errorbar(aes(ymax=up_range, ymin=lo_range), alpha=1) + xlab(&quot;&quot;) + ylab(&quot;Iodide Uptake (% of Control)&quot;)+ geom_hline(yintercept = 80, linetype=&quot;dashed&quot;, color=&quot;violetred1&quot;) + geom_hline(yintercept = 100, alpha=0.8) + scale_y_continuous(breaks = seq(from = 0, to =100, by=20))+ #ggtitle(&quot;ToxCast Ph1_v2 Internal Replicates in Single-Con Screening&quot;)+ #scale_color_brewer(palette=&quot;Set1&quot;, name= &quot;Multi-Conc\\nAssay&quot;, labels= c(&quot;No&quot;, &quot;Yes&quot;)) + #scale_x_discrete(labels=NULL)+ #theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) + #labs(chnm = &quot;Chemical\\nName&quot;) + theme_bw() + theme(axis.text.x = element_text(angle=35, vjust=1, hjust=1, size = rel(1.5)))+ theme(axis.title = element_text(size = rel(1.5)))+ theme(legend.position=&quot;none&quot;) + theme(plot.margin = NULL) # dev.off() 6.0.2 Multi-con internal controls replication performance ##add chnm to mc data mc_unblind &lt;- left_join(dt_mc_norm, name_code, by= c(&quot;spid&quot;=&quot;spid&quot;)) ##gettting reps&#39;s metrics mc_rep_sum &lt;- sum_tbl %&gt;% filter(chnm %in% internal_rep$Var1) ## getting range of ac50s mc_rep_sum %&gt;% filter(!is.na(AC50_prim)) %&gt;% group_by(chnm) %&gt;% summarize(min = min(AC50_prim), max= max(AC50_prim), range = min - max) %&gt;% arrange(desc(range)) %&gt;% knitr::kable(digits = 2, caption = &quot;Range of AC50 for internal replicates&quot;) Table 6.1: Range of AC50 for internal replicates chnm min max range Dibutyl phthalate -4.54 -4.53 -0.02 PFOS -4.75 -4.72 -0.02 Oryzalin -4.38 -4.35 -0.03 Bisphenol A -4.36 -4.30 -0.06 Bensulide -4.42 -4.31 -0.11 Triclosan -5.06 -4.92 -0.14 Mancozeb -4.92 -4.75 -0.17 Azoxystrobin -4.58 -4.39 -0.19 Clorophene -4.87 -4.64 -0.22 Allethrin -4.52 -4.27 -0.24 # write_csv(&quot;./output data files/internal_rep_ac50_range.csv&quot;) ##plot all points of ac50 # png(&#39;./output plots for SOT poster/internal_rep_ac50s.png&#39;, units=&quot;px&quot;, width=400*8.33, height=300*8.33, res=600) ggplot(mc_rep_sum, aes(x=reorder(chnm, AC50_prim), y=AC50_prim) ) + geom_point(size=4, alpha = 1, aes(color=chnm),shape = 16) + xlab(&quot;&quot;) + ylab(&quot;AC50 (logM)&quot;)+ ylim(-6, -4)+ theme_bw() + theme(axis.text.x = element_text(angle=30, vjust=1, hjust=1, size = rel(1.5)), axis.text.y = element_text(size = rel(1.2)), legend.position = &quot;none&quot;, axis.title = element_text(size = rel(1.5)), plot.margin = NULL) ## Warning: Removed 1 rows containing missing values (geom_point). # dev.off() "],
["export-dose-response-curve.html", "7 Export Dose-Response Curve 7.1 Make plots 7.2 Export as PDF file 7.3 Export PNG of multi-plots", " 7 Export Dose-Response Curve 7.1 Make plots #plot all allplot &lt;- toxplot::plot_tcpl(mc_model, sum_tbl_update, spid_chnm_table) allplot[[1]] 7.2 Export as PDF file # Export plots as pdf file save_plot_pdf(allplot,&quot;./output plots/ranked_dose_response_plots.pdf&quot;) 7.3 Export PNG of multi-plots Top ranked chemicals response curve put together in one plot. Exported in PNG format. # Multiple plot function #this is taken from http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2) # # ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects) # - cols: Number of columns in layout # - layout: A matrix specifying the layout. If present, &#39;cols&#39; is ignored. # # If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE), # then plot 1 will go in the upper left, 2 will go in the upper right, and # 3 will go all the way across the bottom. # multiplot &lt;- function(..., plotlist=NULL, file, cols=1, layout=NULL) { library(grid) # Make a list from the ... arguments and plotlist plots &lt;- c(list(...), plotlist) numPlots = length(plots) # If layout is NULL, then use &#39;cols&#39; to determine layout if (is.null(layout)) { # Make the panel # ncol: Number of columns of plots # nrow: Number of rows needed, calculated from # of cols layout &lt;- matrix(seq(1, cols * ceiling(numPlots/cols)), ncol = cols, nrow = ceiling(numPlots/cols)) } if (numPlots==1) { print(plots[[1]]) } else { # Set up the page grid.newpage() pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout)))) # Make each plot, in the correct location for (i in 1:numPlots) { # Get the i,j matrix positions of the regions that contain this subplot matchidx &lt;- as.data.frame(which(layout == i, arr.ind = TRUE)) print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col)) } } } ##plot with minimal text notation (EC50 values etc.) ap &lt;- toxplot::plot_tcpl_minimal(mc_model, sum_tbl, spid_chnm_table) png(&#39;./output plots/taa_demo.png&#39;, units=&quot;px&quot;, width=450*8.33, height=300*8.33, res=600) ap[[2]] dev.off() # 15 graphs from &gt;100 group ### png(&#39;./output plots/top15v5.png&#39;, units=&quot;px&quot;, width=750*12.5, height=1000*12.5, res=900) multiplot(ap[[1]],ap[[2]],ap[[3]], ap[[4]],ap[[5]],ap[[6]], ap[[7]],ap[[8]],ap[[9]], ap[[10]],ap[[11]],ap[[12]], ap[[13]],ap[[14]],ap[[15]], layout = matrix(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15), nrow=5, byrow=TRUE)) dev.off() #### # six graphs from 50-100 group png(&#39;./output plots/50-100.png&#39;, units=&quot;px&quot;, width=750*12.5, height=400*12.5, res=900) multiplot(ap[[16]],ap[[19]], ap[[20]], ap[[25]], ap[[38]], ap[[51]], layout = matrix(c(1,2,3,4,5,6), nrow=2, byrow=TRUE)) dev.off() # six graphs from &lt;50 group png(&#39;./output plots/below50.png&#39;, units=&quot;px&quot;, width=750*12.5, height=400*12.5, res=900) multiplot(ap[[83]],ap[[87]], ap[[89]], ap[[92]], ap[[116]], ap[[118]], layout = matrix(c(1,2,3,4,5,6), nrow=2, byrow=TRUE)) dev.off() # three graphs for no ranking scores png(&#39;./output plots/no_score.png&#39;, units=&quot;px&quot;, width=750*12.5, height=200*12.5, res=900) multiplot(ap[[151]],ap[[156]], ap[[169]], layout = matrix(c(1,2,3), nrow=1, byrow=TRUE)) dev.off() "],
["interactive-dose-response-plots.html", "8 Interactive Dose-Response Plots", " 8 Interactive Dose-Response Plots The interactive plots below are generated using plotly package. Move mouse over to see the data points value. ggplotly(allplot[[1]]) ggplotly(allplot[[2]]) ggplotly(allplot[[3]]) ggplotly(allplot[[4]]) ggplotly(allplot[[5]]) ggplotly(allplot[[6]]) ggplotly(allplot[[7]]) ggplotly(allplot[[8]]) ggplotly(allplot[[9]]) ggplotly(allplot[[10]]) ggplotly(allplot[[11]]) ggplotly(allplot[[12]]) ggplotly(allplot[[13]]) ggplotly(allplot[[14]]) ggplotly(allplot[[15]]) ggplotly(allplot[[16]]) ggplotly(allplot[[17]]) ggplotly(allplot[[18]]) ggplotly(allplot[[19]]) ggplotly(allplot[[20]]) ggplotly(allplot[[21]]) ggplotly(allplot[[22]]) ggplotly(allplot[[23]]) ggplotly(allplot[[24]]) ggplotly(allplot[[25]]) ggplotly(allplot[[26]]) ggplotly(allplot[[27]]) ggplotly(allplot[[28]]) ggplotly(allplot[[29]]) ggplotly(allplot[[30]]) ggplotly(allplot[[31]]) ggplotly(allplot[[32]]) ggplotly(allplot[[33]]) ggplotly(allplot[[34]]) ggplotly(allplot[[35]]) ggplotly(allplot[[36]]) ggplotly(allplot[[37]]) ggplotly(allplot[[38]]) ggplotly(allplot[[39]]) ggplotly(allplot[[40]]) ggplotly(allplot[[41]]) ggplotly(allplot[[42]]) ggplotly(allplot[[43]]) ggplotly(allplot[[44]]) ggplotly(allplot[[45]]) ggplotly(allplot[[46]]) ggplotly(allplot[[47]]) ggplotly(allplot[[48]]) ggplotly(allplot[[49]]) ggplotly(allplot[[50]]) ggplotly(allplot[[51]]) ggplotly(allplot[[52]]) ggplotly(allplot[[53]]) ggplotly(allplot[[54]]) ggplotly(allplot[[55]]) ggplotly(allplot[[56]]) ggplotly(allplot[[57]]) ggplotly(allplot[[58]]) ggplotly(allplot[[59]]) ggplotly(allplot[[60]]) ggplotly(allplot[[61]]) ggplotly(allplot[[62]]) ggplotly(allplot[[63]]) ggplotly(allplot[[64]]) ggplotly(allplot[[65]]) ggplotly(allplot[[66]]) ggplotly(allplot[[67]]) ggplotly(allplot[[68]]) ggplotly(allplot[[69]]) ggplotly(allplot[[70]]) ggplotly(allplot[[71]]) ggplotly(allplot[[72]]) ggplotly(allplot[[73]]) ggplotly(allplot[[74]]) ggplotly(allplot[[75]]) ggplotly(allplot[[76]]) ggplotly(allplot[[77]]) ggplotly(allplot[[78]]) ggplotly(allplot[[79]]) ggplotly(allplot[[80]]) ggplotly(allplot[[81]]) ggplotly(allplot[[82]]) ggplotly(allplot[[83]]) ggplotly(allplot[[84]]) ggplotly(allplot[[85]]) ggplotly(allplot[[86]]) ggplotly(allplot[[87]]) ggplotly(allplot[[88]]) ggplotly(allplot[[89]]) ggplotly(allplot[[90]]) ggplotly(allplot[[91]]) ggplotly(allplot[[92]]) ggplotly(allplot[[93]]) ggplotly(allplot[[94]]) ggplotly(allplot[[95]]) ggplotly(allplot[[96]]) ggplotly(allplot[[97]]) ggplotly(allplot[[98]]) ggplotly(allplot[[99]]) ggplotly(allplot[[100]]) ggplotly(allplot[[101]]) ggplotly(allplot[[102]]) ggplotly(allplot[[103]]) ggplotly(allplot[[104]]) ggplotly(allplot[[105]]) ggplotly(allplot[[106]]) ggplotly(allplot[[107]]) ggplotly(allplot[[108]]) ggplotly(allplot[[109]]) ggplotly(allplot[[110]]) ggplotly(allplot[[111]]) ggplotly(allplot[[112]]) ggplotly(allplot[[113]]) ggplotly(allplot[[114]]) ggplotly(allplot[[115]]) ggplotly(allplot[[116]]) ggplotly(allplot[[117]]) ggplotly(allplot[[118]]) ggplotly(allplot[[119]]) ggplotly(allplot[[120]]) ggplotly(allplot[[121]]) ggplotly(allplot[[122]]) ggplotly(allplot[[123]]) ggplotly(allplot[[124]]) ggplotly(allplot[[125]]) ggplotly(allplot[[126]]) ggplotly(allplot[[127]]) ggplotly(allplot[[128]]) ggplotly(allplot[[129]]) ggplotly(allplot[[130]]) ggplotly(allplot[[131]]) ggplotly(allplot[[132]]) ggplotly(allplot[[133]]) ggplotly(allplot[[134]]) ggplotly(allplot[[135]]) ggplotly(allplot[[136]]) ggplotly(allplot[[137]]) ggplotly(allplot[[138]]) ggplotly(allplot[[139]]) ggplotly(allplot[[140]]) ggplotly(allplot[[141]]) ggplotly(allplot[[142]]) ggplotly(allplot[[143]]) ggplotly(allplot[[144]]) ggplotly(allplot[[145]]) ggplotly(allplot[[146]]) ggplotly(allplot[[147]]) ggplotly(allplot[[148]]) ggplotly(allplot[[149]]) ggplotly(allplot[[150]]) ggplotly(allplot[[151]]) ggplotly(allplot[[152]]) ggplotly(allplot[[153]]) ggplotly(allplot[[154]]) ggplotly(allplot[[155]]) ggplotly(allplot[[156]]) ggplotly(allplot[[157]]) ggplotly(allplot[[158]]) ggplotly(allplot[[159]]) ggplotly(allplot[[160]]) ggplotly(allplot[[161]]) ggplotly(allplot[[162]]) ggplotly(allplot[[163]]) ggplotly(allplot[[164]]) ggplotly(allplot[[165]]) ggplotly(allplot[[166]]) ggplotly(allplot[[167]]) ggplotly(allplot[[168]]) ggplotly(allplot[[169]]) "],
["source.html", "9 R source code in ToxPlot package", " 9 R source code in ToxPlot package Main R functions written in this analysis were gathered as an R package ToxPlot, to install or view the most up-to-date version please go to this github link. Below is the version of source code used in this analysis. You may also use these functions by sourcing them. #&#39; normalize per plate #&#39; #&#39; normalize raw readings as percent of median vehicle control wells #&#39; #&#39; @param dt data.frame contains essential columns with the raw data. #&#39; @param nctrl the name (spid) of the vehicle/solvent control used for calculation #&#39; #&#39; @return data.frame with normalized value columns. &#39;nval_mean&#39; column is the normalized value #&#39; calculated using the mean of vehicle control wells, &#39;nval_median&#39; column is the normalized value #&#39; calculated using the median of vehicle control wells. #&#39; @import dplyr #&#39; @export normalize_per_plate &lt;- function(dt, nctrl = &quot;DMSO&quot;) { output &lt;- data.frame() #iterate through each assay, calculate separately for (as in unique(dt$assay)) { df_t &lt;- normalize_single_assay(dplyr::filter(dt, assay == as), nctrl) output &lt;- dplyr::bind_rows(output, df_t) } return(output) } #&#39; normalize per plate (from single assay data) #&#39; #&#39; normalize raw readings as percent of median/mean vehicle control wells, per assay, per plate. #&#39; This function is called by normalize_per_plate, should not be called directly by user. #&#39; #&#39; #&#39; @param dt data.frame contains essential columns with the raw data. #&#39; @param nctrl the name (spid) of the vehicle/solvent control used for calculation #&#39; #&#39; @return data.frame with normalized value columns. &#39;nval_mean&#39; column is the normalized value #&#39; calculated using the mean of vehicle control wells, &#39;nval_median&#39; column is the normalized value #&#39; calculated using the median of vehicle control wells. #&#39; @import dplyr # normalize_single_assay &lt;- function(dt, nctrl) { #calculate the mean and median value for negative control ctrl_avg &lt;- dt %&gt;% dplyr::filter(spid == nctrl) %&gt;% dplyr::group_by(apid) %&gt;% dplyr::summarize(mean_DMSO = mean(rval, na.rm = TRUE), median_DMSO = median(rval, na.rm = TRUE)) #iterate through the data table to calculate normalized percent activity #normalization was done using both mean and median separately. temp &lt;- data.frame() for (id in ctrl_avg$apid){ median &lt;- dplyr::filter(ctrl_avg, apid == id)$median_DMSO mean &lt;- dplyr::filter(ctrl_avg, apid == id)$mean_DMSO t &lt;- filter(dt, apid == id) %&gt;% mutate(nval_mean = 100 * rval/mean, nval_median = 100 * rval/median) temp &lt;- bind_rows(temp, t) } return(temp) } #&#39; quality control metrics calculation #&#39; #&#39; calculate QC metrics per assay plate. #&#39; #&#39; @param d data.frame contains essential columns with the raw data. #&#39; @param resp response type, specify either &#39;nval_median&#39; or &#39;nval_mean&#39; for QC calculation #&#39; @param assay_info assay_info list, contains names of primary and cytotox assay, names must match #&#39; what are provided in the raw data, under the column &#39;assay&#39;. #&#39; #&#39; #&#39; @return data.frame with CV_DMSO, Z&#39; score, SSMD for each assay plate # QC measures are calculated per 96-well palte. &#39;apid&#39; plus &#39;assay&#39; column can serve as the ID to distinguish each plate. qc_per_plate &lt;- function(d, assay_info, resp = &quot;nval_median&quot;) { # choose which normalized value to use (median based or mean based) if (resp == &quot;nval_mean&quot;) { d$resp &lt;- d$nval_mean } else if (resp == &quot;nval_median&quot;) { d$resp &lt;- d$nval_median } else { stop(&quot;specify either nval_median or nval_mean for QC calculation&quot;) } # create unique ID for each plate (apid + assay) # (can also distinguish between primary and cytotox assays) # group by the unique ID. d &lt;- d %&gt;% #dplyr::mutate(uid = paste(apid, assay)) %&gt;% # dplyr::group_by(pid, assay, repi) dplyr::group_by(apid, assay) # calculate vehicle control (e.g., DMSO etc.) qc stats # use welltype = n to identify vehicle control n_ctrl_sum &lt;- d %&gt;% dplyr::filter(wllt == &quot;n&quot;) %&gt;% dplyr::summarize(count_DMSO = n(), #count of DMSO control wells on each plate count_DMSO_NA = sum(is.na(resp)), #count of DMSO control wells with missing values mean_DMSO = mean(resp, na.rm=TRUE), sd_DMSO = sd(resp, na.rm=TRUE), CV_DMSO = 100*sd(resp, na.rm=TRUE)/mean(resp, na.rm=TRUE) # median_DMSO= median(resp, na.rm=TRUE), # mad_DMSO= mad(resp, constant = 1, na.rm=TRUE), # bmad_DMSO= mad(resp, constant = 1.4826, na.rm=TRUE), # three_bmad = 3*bmad_DMSO ) # calculate positive control stats pctrl_prim &lt;- d %&gt;% dplyr::filter(assay == assay_info$prim_assay, wllt == &quot;pr&quot;) %&gt;% dplyr::filter(conc == max(conc)) %&gt;% dplyr::summarize(sd_positive = sd(resp, na.rm=TRUE), mean_positive= mean(resp, na.rm=TRUE)) pctrl_toxi &lt;- d %&gt;% dplyr::filter(assay ==assay_info$toxi_assay, wllt == &quot;pc&quot;) %&gt;% dplyr::filter(conc == max(conc)) %&gt;% dplyr::summarize(sd_positive = sd(resp, na.rm=TRUE), mean_positive = mean(resp, na.rm=TRUE)) p_ctrl_sum &lt;- bind_rows(pctrl_prim, pctrl_toxi) remove(pctrl_toxi, pctrl_prim) # calculate Z&#39;, SSMD qc &lt;- dplyr::left_join(p_ctrl_sum, n_ctrl_sum, by=c(&quot;apid&quot;=&quot;apid&quot;, &quot;assay&quot;=&quot;assay&quot;)) %&gt;% #replace NaN with 0 in sd_positive dplyr::mutate(sd_positive = (ifelse(is.na(sd_positive), 0, sd_positive))) %&gt;% dplyr::mutate(Z_prime = 1 - 3*(sd_positive + sd_DMSO) / (abs(mean_positive - mean_DMSO)), SSMD = (abs(mean_positive - mean_DMSO) / sqrt(sd_positive^2 + sd_DMSO^2))) %&gt;% dplyr::mutate(unique_id = paste(apid, assay, sep=&quot;_&quot;)) %&gt;% dplyr::select(unique_id, apid, assay, CV_DMSO, Z_prime, SSMD) list(neg_ctrl_sum = n_ctrl_sum, pos_ctrl_sum = p_ctrl_sum, qc = qc) } #&#39; hill mode in ToxCast tcpl package #&#39; #&#39; hill_model &lt;- function(p, x) { ### p: a numeric vector of length 4 containg the starting values for ### the hill model, in order: top, log AC50, hill ### coefficient ### x: a numeric vector containing the log concentration values y &lt;- p[1] / (1 + 10 ^ ((p[2] - x) * p[3])) return(y) } ##========inversed hill model (using 100- the Y value)=======## hill_model_inverse &lt;- function(p, x) { ### p: a numeric vector of length 4 containg the starting values for ### the hill model, in order: top, log AC50, hill ### coefficient ### x: a numeric vector containing the log concentration values y &lt;- 100 - (p[1] / (1 + 10 ^ ((p[2] - x) * p[3]))) return(y) } ##=======functiont to calculate absolute EC anything based on tcpl hill model======## log_abs_ec &lt;- function(p, y) { ## y value is the absolute response value ##p[1] is top parameter ##p[2] is ga, logac50 ##p[3] is gw, hillslope suppressWarnings(x &lt;- p[2] - log10((p[1] - y) / y) / p[3]) if (is.nan(x)) {x &lt;- NA} return(x) } #&#39; function to calculate Area Under the Curve (AUC) of the hill model #&#39; #&#39; auc_hill_tcpl &lt;- function(p, lower, upper) { ##p is the parameter vector, ##low and high are the boundary of x for integration ##for our assay, the high(upper) boudary is -4, the maximum concentration #define the hill model function hill &lt;- function(x) { p[1] / (1 + 10 ^ ((p[2] - x) * p[3])) } a &lt;- stats::integrate(hill, lower = lower, upper = upper) return(a[[1]]) } #&#39; fit dose-resopnse curve using tcpl hill model #&#39; #&#39; Curve fitting using the tcplFit function in `tcpl` package. #&#39; Chemicals are modelled based on spid. #&#39; If you want to model the same chemical (e.g. positive controls), #&#39; then assign different spid to this chemical so the function can separate them out. #&#39; Absolute IC20 and absolute IC50 are calculated as well. #&#39; #&#39; @param df input data contain normalized assay readings #&#39; @param assay_info predefined names for primary and toxicity assays, #&#39; use NULL if either one of the assay does not need to be modeled. #&#39; @param bmad_prim bMAD value for primary assay, bMAD is the robust version of sigma (standard deviation) #&#39; @param bmad_toxi bMAD value for the cell toxicity assay. #&#39; #&#39; @return A list object containing modeling results, the corresponding data for each chemical. #&#39; @import dplyr #&#39; @export fit_curve_tcpl &lt;- function(df, assay_info, prim_cutoff = 20, toxi_cutoff = 20) { st_time &lt;- Sys.time() r_list &lt;- list() c_list &lt;- list() bmad_prim &lt;- prim_cutoff/3 bmad_toxi &lt;- toxi_cutoff/3 # get log concentration df &lt;- df %&gt;% dplyr::mutate(logc = log10(conc)) spid_list &lt;- unique(df$spid) if (is.null(assay_info$prim) &amp; is.null(assay_info$toxi_assay)) { stop(&quot;assay_info cannot be NULL for both primary and cytotoxicity assay&quot;) } n &lt;- 1 prim_md &lt;- toxi_md &lt;- model_list &lt;- list() cat(&quot;Processing&quot;, length(unique(df$spid)), &quot;samples(spid)....\\n&quot;) # process by each spid for (id in unique(df$spid)) { #d &lt;- df %&gt;% dplyr::filter(spid == i) # model raiu data # check if toxi assay data is available, if not, skip modeling if (is.null(assay_info$prim_assay)) { prim_md &lt;- NA prim_dt &lt;- NA } else { prim_dt &lt;- df %&gt;% dplyr::filter(spid == id, assay == assay_info$prim_assay) m &lt;- tcpl::tcplFit(logc = prim_dt$logc, resp = 100 - prim_dt$nval_median, bmad_prim) absIC50 &lt;- log_abs_ec(c(m$hill_tp, m$hill_ga, m$hill_gw), 50) absIC20 &lt;- log_abs_ec(c(m$hill_tp, m$hill_ga, m$hill_gw), 20) m[[&quot;absIC20&quot;]] &lt;- absIC20 m[[&quot;absIC50&quot;]] &lt;- absIC50 m[[&quot;apid&quot;]] &lt;- prim_dt[[1,1]] m[[&quot;assay&quot;]] &lt;- assay_info$prim_assay m[[&quot;spid&quot;]] &lt;- id #prim_md &lt;- dplyr::bind_rows(prim_md, m) # print(m) prim_md &lt;- data.frame(m) %&gt;% dplyr::select(apid, assay, spid, everything()) } # model cytotox data # check if toxi assay data is available, if not, skip modeling if (is.null(assay_info$toxi_assay)) { toxi_md &lt;- NA toxi_dt &lt;- NA } else { toxi_dt &lt;- df %&gt;% dplyr::filter(spid == id, assay==assay_info$toxi_assay) m &lt;- tcpl::tcplFit(logc = toxi_dt$logc, resp = 100 - toxi_dt$nval_median, bmad_toxi) absIC50 &lt;- log_abs_ec(c(m$hill_tp, m$hill_ga, m$hill_gw), 50) absIC20 &lt;- log_abs_ec(c(m$hill_tp, m$hill_ga, m$hill_gw), 20) m[[&quot;absIC20&quot;]] &lt;- absIC20 m[[&quot;absIC50&quot;]] &lt;- absIC50 m[[&quot;apid&quot;]] &lt;- toxi_dt[[1,1]] m[[&quot;assay&quot;]] &lt;- assay_info$toxi_assay m[[&quot;spid&quot;]] &lt;- id #toxi_md &lt;- dplyr::bind_rows(toxi_md, m) toxi_md &lt;- data.frame(m) %&gt;% dplyr::select(apid, assay, spid, everything()) } #build final model list model_list[[n]] &lt;- list(spid = id, model_prim = prim_md, model_toxi = toxi_md, data_prim = prim_dt, data_toxi = toxi_dt, cutoff_prim = prim_cutoff, cutoff_toxi = toxi_cutoff, assay_info = assay_info) n &lt;- n + 1 } time &lt;- difftime(Sys.time(), st_time) %&gt;% round(1) cat(&quot;Curve Fitting Completed!\\nCalculation time:&quot;, paste(unclass(time), units(time)), &quot;\\n\\n&quot;) return(model_list) } ####====calculating ranking metrics based on TCPL modelling results====#### #&#39; calculate ranking score, TAA, med_diff, EC values based on tcpl hill model #&#39; #&#39; calculate ranking score, TAA, med_diff, absolute EC values, AC50, based on the hill model in tcpl package #&#39; #&#39; @param tcpl_models the list object returned by &#39;fit_curve_tcpl&#39; function #&#39; @param spid_chnm_table a reference table with &#39;spid&#39; and the corresponding chemical name &#39;chnm&#39; column, #&#39; and the CAS number &#39;casn&#39; column. #&#39; @return a data.frame contains ranking metrics for each chemical (spid) #&#39; #&#39; @export #&#39; rank_tcpl &lt;- function(tcpl_models, spid_chnm_table = NULL) { df &lt;- data.frame() ##iterate through each spid for (i in seq_along(tcpl_models)) { #get chemical sample id &#39;spid&#39; .spid &lt;- tcpl_models[[i]]$spid # print(i) # print(.spid) #get chnm if (!is.null(spid_chnm_table)) { chnm &lt;- dplyr::filter(spid_chnm_table, spid == .spid)$chnm casn &lt;- dplyr::filter(spid_chnm_table, spid == .spid)$casn } else { chnm &lt;- NA casn &lt;- NA } assay_info &lt;- tcpl_models[[i]]$assay_info if (is.null(assay_info$toxi_assay)) { stop(&quot;No toxi_assay, ranking score is not calculable!&quot;) } #extract modelling results m_toxi &lt;- tcpl_models[[i]]$model_toxi m_prim &lt;- tcpl_models[[i]]$model_prim #cutoff cutoff_prim &lt;- tcpl_models[[i]]$cutoff_prim cutoff_toxi &lt;- tcpl_models[[i]]$cutoff_toxi # #calculate med_diff at max(logc) max_prim &lt;- tcpl_models[[i]]$data_prim %&gt;% dplyr::filter(logc == max(logc)) %&gt;% dplyr::summarize(median = median(nval_median)) max_toxi &lt;- tcpl_models[[i]]$data_toxi %&gt;% dplyr::filter(logc == max(logc)) %&gt;% dplyr::summarize(median = median(nval_median)) med_diff &lt;- max_toxi$median - max_prim$median ##get auc, logEC_3bmadprim, for prim if (!is.na(m_prim$hill) &amp; m_prim$hill == 1) { para_prim &lt;- c(m_prim$hill_tp, m_prim$hill_ga, m_prim$hill_gw) #get auc lr &lt;- log_abs_ec(para_prim, cutoff_prim) aa_prim &lt;- auc_hill_tcpl(para_prim, lower = lr, upper = m_prim$logc_max) - cutoff_prim * (m_prim$logc_max - lr) #get AC50 AC50_prim &lt;- m_prim$hill_ga #get absEC if (hill_model(para_prim,m_prim$logc_max) &gt; 50) { absEC50_prim &lt;- log_abs_ec(para_prim, 50) absEC80_prim &lt;- log_abs_ec(para_prim, 20) } else if (hill_model(para_prim,m_prim$logc_max) &gt; 20) { absEC50_prim &lt;- NA absEC80_prim &lt;- log_abs_ec(para_prim, 20) } else { absEC80_prim &lt;- NA absEC50_prim &lt;- NA } } else { aa_prim &lt;- NA lr &lt;- NA absEC80_prim &lt;- NA absEC50_prim &lt;- NA AC50_prim &lt;- NA } ##get auc, logEC_3bmadprim, for toxitox if (!is.na(m_toxi$hill) &amp; m_toxi$hill == 1) { para_toxi &lt;- c(m_toxi$hill_tp, m_toxi$hill_ga, m_toxi$hill_gw) #get AC50 AC50_toxi &lt;- m_toxi$hill_ga #get aa_toxi if (hill_model(para_toxi,m_prim$logc_max) &gt; cutoff_prim) { lc &lt;- log_abs_ec(para_toxi, cutoff_prim) aa_toxi &lt;- auc_hill_tcpl(para_toxi,lower = lc, upper = m_prim$logc_max) - cutoff_prim * (m_prim$logc_max - lc) } else { aa_toxi &lt;- NA lc &lt;- -3 } #calculate absEC if (hill_model(para_toxi,m_prim$logc_max) &gt; 50) { absEC50_toxi &lt;- log_abs_ec(para_toxi, 50) absEC80_toxi &lt;- log_abs_ec(para_toxi, 20) } else if (hill_model(para_toxi,m_prim$logc_max) &gt; 20) { absEC50_toxi &lt;- NA absEC80_toxi &lt;- log_abs_ec(para_toxi, 20) } else { absEC80_toxi &lt;- NA absEC50_toxi &lt;- NA } #get cytotox limit (absEC_cutoff_toxi) absEC_ct_toxi &lt;- log_abs_ec(para_toxi, cutoff_toxi) } else { aa_toxi &lt;- NA lc &lt;- -3 absEC80_toxi &lt;- NA absEC50_toxi &lt;- NA AC50_toxi &lt;- NA absEC_ct_toxi &lt;- NA } ##calculate taa if (is.na(aa_prim)) { taa &lt;- NA } else if (is.na(aa_toxi)) { taa &lt;- aa_prim } else { taa &lt;- aa_prim - aa_toxi } ##calculate selectivity based logEC value at 3bmad of prim assay. if (is.na(lr)) { selectivity_3bmad &lt;- NA } else { selectivity_3bmad &lt;- lc - lr } ##calculate selectivity based on logAC50 (original method) if (is.na(m_prim$hill_ga)) { selectivity_AC50 &lt;- NA } else if (is.na(m_toxi$hill_ga)) { selectivity_AC50 &lt;- -3 - m_prim$hill_ga } else { selectivity_AC50 &lt;- m_toxi$hill_ga - m_prim$hill_ga } ##gather taa and selectivity into one table t &lt;- data.frame( index = i, spid = .spid, chnm = chnm, casn = casn, # aa_toxi = aa_toxi, # aa_prim = aa_prim, taa = taa, # sel_3bMAD = selectivity_3bmad, # sel_AC50 = selectivity_AC50, med_diff = med_diff, AC50_toxi = AC50_toxi, AC50_prim = AC50_prim, absEC80_toxi = absEC80_toxi, absEC50_toxi = absEC50_toxi, absEC80_prim = absEC80_prim, absEC50_prim = absEC50_prim, cyto_lim = absEC_ct_toxi ) df &lt;- base::rbind(df, t) } #calculate ranking_score #this done by adding 0-100 rescaled TAA value an med_diff value df &lt;- df %&gt;% dplyr::mutate(taa_rescale = rescale_0_100(taa), med_diff_rescale = rescale_0_100(med_diff), ranking_score = taa_rescale + med_diff_rescale ) %&gt;% dplyr::arrange(desc(ranking_score)) return(df) } ####====summarize TCPL modeling results====#### #&#39; calculate absEC values based on tcpl hill model #&#39; #&#39; calculate rabsolute EC values, AC50, based on the hill model in tcpl package #&#39; #&#39; @param tcpl_models the list object returned by &#39;fit_curve_tcpl&#39; function #&#39; @param spid_chnm_table a reference table with &#39;spid&#39; and the corresponding chemical name &#39;chnm&#39; column, #&#39; and the CAS number &#39;casn&#39; column. #&#39; @return a data.frame contains ranking metrics for each chemical (spid) #&#39; #&#39; @export #&#39; summary_tcpl &lt;- function(tcpl_models, spid_chnm_table = NULL) { df &lt;- data.frame() ##iterate through each spid for (i in seq_along(tcpl_models)) { #get chemical sample id &#39;spid&#39; .spid &lt;- tcpl_models[[i]]$spid # print(i) # print(.spid) #get chnm if (!is.null(spid_chnm_table)) { chnm &lt;- dplyr::filter(spid_chnm_table, spid == .spid)$chnm casn &lt;- dplyr::filter(spid_chnm_table, spid == .spid)$chnm } else { chnm &lt;- NA } #extract modelling results m_toxi &lt;- tcpl_models[[i]]$model_toxi m_prim &lt;- tcpl_models[[i]]$model_prim #cutoff cutoff_prim &lt;- tcpl_models[[i]]$cutoff_prim cutoff_toxi &lt;- tcpl_models[[i]]$cutoff_toxi #get assay_info assay_info &lt;- tcpl_models[[i]]$assay_info ##get metrics for prim if (is.null(assay_info$prim_assay)) { absEC80_prim &lt;- NA absEC50_prim &lt;- NA AC50_prim &lt;- NA } else { if (!is.na(m_prim$hill) &amp; m_prim$hill == 1) { para_prim &lt;- c(m_prim$hill_tp, m_prim$hill_ga, m_prim$hill_gw) #get AC50 AC50_prim &lt;- m_prim$hill_ga #get absEC if (hill_model(para_prim, m_prim$logc_max) &gt; 50) { absEC50_prim &lt;- log_abs_ec(para_prim, 50) absEC80_prim &lt;- log_abs_ec(para_prim, 20) } else if (hill_model(para_prim,m_prim$logc_max) &gt; 20) { absEC50_prim &lt;- NA absEC80_prim &lt;- log_abs_ec(para_prim, 20) } else { absEC80_prim &lt;- NA absEC50_prim &lt;- NA } } else { absEC80_prim &lt;- NA absEC50_prim &lt;- NA AC50_prim &lt;- NA } } ##get metrics for toxi if (is.null(assay_info$toxi_assay)) { absEC80_toxi &lt;- NA absEC50_toxi &lt;- NA AC50_toxi &lt;- NA } else { if (!is.na(m_toxi$hill) &amp; m_toxi$hill == 1) { para_toxi &lt;- c(m_toxi$hill_tp, m_toxi$hill_ga, m_toxi$hill_gw) #get AC50 AC50_toxi &lt;- m_toxi$hill_ga #calculate absEC if (hill_model(para_toxi,m_toxi$logc_max) &gt; 50) { absEC50_toxi &lt;- log_abs_ec(para_toxi, 50) absEC80_toxi &lt;- log_abs_ec(para_toxi, 20) } else if (hill_model(para_toxi,m_toxi$logc_max) &gt; 20) { absEC50_toxi &lt;- NA absEC80_toxi &lt;- log_abs_ec(para_toxi, 20) } else { absEC80_toxi &lt;- NA absEC50_toxi &lt;- NA } } else { absEC80_toxi &lt;- NA absEC50_toxi &lt;- NA AC50_toxi &lt;- NA } } ##gather taa and selectivity into one table t &lt;- data.frame( index = i, spid = .spid, chnm = chnm, AC50_toxi = AC50_toxi, AC50_prim = AC50_prim, absEC80_toxi = absEC80_toxi, absEC50_toxi = absEC50_toxi, absEC80_prim = absEC80_prim, absEC50_prim = absEC50_prim ) df &lt;- base::rbind(df, t) } return(df) } #&#39; Plot dose-resonse curves based on tcpl hill models #&#39; Produce the plot for the dose-response curves and data points for both primary and toxicity assay. #&#39; The direction of the data and dose-resonse curves are presented as the original data, rather than #&#39; the uptrend direction required by the &#39;tcpl&#39; function. Plots are sorted by the ranking_score. #&#39; #&#39; @param tcpl_models the list object created by &#39;fit_curve_tcpl&#39; function #&#39; @param rank_table the data.frame output from &#39;rank_tcpl&#39; function #&#39; @param spid_chnm_table the spid, chnm, casn info table #&#39; @param notaion value can be TRUE or FALSE, determine whehter to show potency metrics on the plot #&#39; @param cunit the unit of concentration, on default is &quot;M&quot; (molar). #&#39; #&#39; @return list of ggplot2 objects, each corresponding to one spid. #&#39; @import ggthemes ggplot2 #&#39; @export #&#39; #&#39; plot_tcpl &lt;- function(tcpl_models, rank_table, spid_chnm_table = NULL, notation = TRUE, cunit = &quot;M&quot;) { #initiate empty output plot list plot_list &lt;- list() tcpl_models &lt;- tcpl_models[rank_table$index] #loop through tcpl_models&#39;s unique spid. #note tcpl_models is the level 4 output from tcpl package, including all the modelling results for (i in seq_along(tcpl_models)) { #get chemical sample id and chemical name .spid &lt;- tcpl_models[[i]]$spid #print(.spid) if (!is.null(spid_chnm_table)) { chnm &lt;- dplyr::filter(spid_chnm_table, spid == .spid)$chnm casn &lt;- dplyr::filter(spid_chnm_table, spid == .spid)$casn } else { chnm &lt;- NA casn &lt;- NA } #cutoff cutoff_prim &lt;- tcpl_models[[i]]$cutoff_prim cutoff_toxi &lt;- tcpl_models[[i]]$cutoff_toxi #assay_info assay_info &lt;- tcpl_models[[i]]$assay_info #get normalized resonse value (cytotox and raiu together) #and use 100 minus the response value (inverse the plot) d &lt;- dplyr::bind_rows(tcpl_models[[i]]$data_prim, tcpl_models[[i]]$data_toxi) %&gt;% dplyr::mutate(resp = nval_median) #%&gt;% #mutate(assay = ifelse(aeid == 1, assay_info$toxi_assay, assay_info$prim_assay)) #determine left and right x boundary of the plot if ( round(max(d$logc)) &lt; max(d$logc) ) { rb &lt;- round(max(d$logc)) + 1 } else { rb &lt;- round(max(d$logc))} lb &lt;- round(min(d$logc))-1 #initiate basic plot with data points. g &lt;- ggplot(d, aes(x = logc, y = resp)) if (!is.null(spid_chnm_table)){ g &lt;- g + labs( title = paste(i, &quot;. SPID: &quot;, .spid, &quot;\\nNAME: &quot;, chnm, &quot;\\nCAS NO: &quot;, casn, sep = &quot;&quot;), x = paste(&quot;Concentration (log&quot;, cunit, &quot;)&quot;, sep = &quot;&quot;), y = &quot;% Control Activity&quot; ) } else { g &lt;- g + labs( title = paste(i, &quot;. SPID:&quot; , .spid), x = paste(&quot;Concentration (log&quot;, cunit, &quot;)&quot;, sep = &quot;&quot;), y = &quot;% Control Activity&quot; ) } # labs( # title = paste(i, &quot;\\nSPID: &quot; , .spid, &quot;\\nNAME: &quot;, chnm, &quot;\\nCAS NO: &quot;, casn, sep = &quot;&quot;), # x = &quot;Concentration (logM)&quot;, # y = &quot;% Control Activity&quot; # ) #extract modelling results m_toxi &lt;- tcpl_models[[i]]$model_toxi m_prim &lt;- tcpl_models[[i]]$model_prim #create 100 concentrations s &lt;- expand.grid(logc = seq(lb, rb, length = 130)) #test and plot cytotox model if (!is.na(m_toxi$hill) &amp; m_toxi$hill == 1) { para_cyto &lt;- c(m_toxi$hill_tp, m_toxi$hill_ga, m_toxi$hill_gw) p1 &lt;- 100 - hill_model(para_cyto, s) p1 &lt;- dplyr::bind_cols(s, data.frame(p1)) names(p1) &lt;- c(&quot;logc&quot;, &quot;pred&quot;) g &lt;- g + geom_line( data = p1, aes(x = logc, y = pred), size = 2, alpha = 0.9, color = &quot;#e02929&quot; ) #plot the vertical line at 3bmad cutoff #g &lt;- g+ geom_vline(xintercept = log_abs_ec(para_cyto, 3*m_toxi$bmad) ) } #test and plot raiu model if (!is.na(m_prim$hill) &amp; m_prim$hill == 1) { para_raiu &lt;- c(m_prim$hill_tp, m_prim$hill_ga, m_prim$hill_gw) p2 &lt;- 100 - hill_model(para_raiu, s) p2 &lt;- bind_cols(s, data.frame(p2)) names(p2) &lt;- c(&quot;logc&quot;, &quot;pred&quot;) g &lt;- g + geom_line( data = p2, aes(x = logc, y = pred), size = 2, alpha = 0.9, color = &quot;#377eb8&quot; ) } #draw 3bmad cutoff line for cytotox and raiu respectively g &lt;- g + geom_hline( yintercept = 100 - cutoff_toxi, alpha = 0.5, size = 0.5, linetype = &quot;dashed&quot;, color = &quot;#e02929&quot; ) g &lt;- g + geom_hline( yintercept = 100 - cutoff_prim, alpha = 0.5, size = 0.5, linetype = &quot;dashed&quot;, color = &quot;#377eb8&quot; ) #plot data points #aesthetics fixes g &lt;- g + geom_point( aes(color = assay), shape = 21, alpha = 0.9, size = 3 ) + coord_fixed( ylim = c(0, 125), #xlim = c(-10, -4), ratio = 4 / 120 #used to be 2/70, when x axis was from -9 to -4. ) + scale_y_continuous(breaks = seq( from = 0, to = 120, by = 20 )) + scale_x_continuous(breaks = seq( from = lb, to = rb, by = 1 )) + theme_few() + theme(legend.title = element_blank()) + scale_color_manual(values=c(&quot;#e02929&quot;, &quot;#377eb8&quot;))+ theme(plot.title=element_text(hjust=0.5)) ##adding annotations if (!is.null(rank_table) &amp; notation == TRUE) { #Get ec and ranking info ds &lt;- rank_table %&gt;% dplyr::filter(spid==.spid) ds &lt;- round_df(ds, digits=2) #annotate with text info line1 &lt;- paste(&quot;Ranking_Score:&quot;, ds$ranking_score) line2 &lt;- paste(&quot;TAA:&quot;, ds$taa) line3 &lt;- paste(&quot;Med_Diff:&quot;, ds$med_diff) line4 &lt;- paste(assay_info$prim_assay, &quot;_AC50: &quot;, ds$logAC50_prim, sep = &quot;&quot;) line5 &lt;- paste(assay_info$prim_assay, &quot;_absEC50: &quot;, ds$absEC50_prim, sep = &quot;&quot;) line6 &lt;- paste(assay_info$prim_assay, &quot;_absEC80: &quot;, ds$absEC80_prim, sep = &quot;&quot;) g &lt;- g + annotate(&quot;text&quot;, x= lb + 0.8, y = 30, alpha = 0.8, hjust=0, label=line1) + annotate(&quot;text&quot;, x= lb + 0.8, y = 25, alpha = 0.8, hjust=0, label= line2) + annotate(&quot;text&quot;, x= lb + 0.8, y = 20, alpha = 0.8, hjust=0, label= line3) + annotate(&quot;text&quot;, x= lb + 0.8, y = 15, alpha = 0.8, hjust=0, label= line4) + annotate(&quot;text&quot;, x= lb + 0.8, y = 10, alpha = 0.8, hjust=0, label= line5) + annotate(&quot;text&quot;, x= lb + 0.8, y = 5, alpha = 0.8, hjust=0, label= line6) } #collect all plots into a list plot_list[[i]] &lt;- g } return(plot_list) } #&#39; Plot dose-resonse curves with minimal text annotation #&#39; This funciton plots dose-response curve with minimal text annotation, #&#39; no x and y axis label, 0 borders. Useful when need to present several plots #&#39; together. #&#39; @param tcpl_models the list object created by &#39;fit_curve_tcpl&#39; function #&#39; @param rank_table the data.frame output from &#39;rank_tcpl&#39; function #&#39; @param spid_chnm_table the spid, chnm, casn info table #&#39; @param notaion value can be TRUE or FALSE, determine whehter to show potency metrics on the plot #&#39; @param cunit the unit of concentration, on default is &quot;M&quot; (molar). #&#39; #&#39; @return list of ggplot2 objects, each corresponding to one spid. #&#39; @import ggthemes ggplot2 #&#39; @export #&#39; #&#39; plot_tcpl_minimal &lt;- function(tcpl_models, rank_table, spid_chnm_table, notation = TRUE, cunit = &quot;M&quot;) { #initiate empty output plot list plot_list &lt;- list() tcpl_models &lt;- tcpl_models[rank_table$index] #loop through tcpl_models&#39;s unique spid. #note tcpl_models is the level 4 output from tcpl package, including all the modelling results for (i in seq_along(tcpl_models)) { #get chemical sample id and chemical name .spid &lt;- tcpl_models[[i]]$spid #print(.spid) if (!is.null(spid_chnm_table)) { chnm &lt;- dplyr::filter(spid_chnm_table, spid == .spid)$chnm casn &lt;- dplyr::filter(spid_chnm_table, spid == .spid)$casn } else { chnm &lt;- NA casn &lt;- NA } #cutoff cutoff_prim &lt;- tcpl_models[[i]]$cutoff_prim cutoff_toxi &lt;- tcpl_models[[i]]$cutoff_toxi #assay_info assay_info &lt;- tcpl_models[[i]]$assay_info #get normalized resonse value (cytotox and raiu together) #and use 100 minus the response value (inverse the plot) d &lt;- dplyr::bind_rows(tcpl_models[[i]]$data_prim, tcpl_models[[i]]$data_toxi) %&gt;% dplyr::mutate(resp = nval_median) #%&gt;% #mutate(assay = ifelse(aeid == 1, assay_info$toxi_assay, assay_info$prim_assay)) #determine left and right x boundary of the plot if ( round(max(d$logc)) &lt; max(d$logc) ) { rb &lt;- round(max(d$logc)) + 1 } else { rb &lt;- round(max(d$logc))} lb &lt;- round(min(d$logc))-1 #initiate basic plot with data points. g &lt;- ggplot(d, aes(x = logc, y = resp)) if (!is.null(spid_chnm_table)){ g &lt;- g + labs( title = paste(chnm, sep = &quot;&quot;), x = paste(&quot;Concentration (log&quot;, cunit, &quot;)&quot;, sep = &quot;&quot;), y = &quot;% Control Activity&quot; ) } else { g &lt;- g + labs( title = paste(i, &quot;. SPID:&quot; , .spid), x = paste(&quot;Concentration (log&quot;, cunit, &quot;)&quot;, sep = &quot;&quot;), y = &quot;% Control Activity&quot; ) } # labs( # title = paste(i, &quot;\\nSPID: &quot; , .spid, &quot;\\nNAME: &quot;, chnm, &quot;\\nCAS NO: &quot;, casn, sep = &quot;&quot;), # x = &quot;Concentration (logM)&quot;, # y = &quot;% Control Activity&quot; # ) #extract modelling results m_toxi &lt;- tcpl_models[[i]]$model_toxi m_prim &lt;- tcpl_models[[i]]$model_prim #create 100 concentrations s &lt;- expand.grid(logc = seq(lb, rb, length = 130)) #test and plot cytotox model if (!is.na(m_toxi$hill) &amp; m_toxi$hill == 1) { para_cyto &lt;- c(m_toxi$hill_tp, m_toxi$hill_ga, m_toxi$hill_gw) p1 &lt;- 100 - hill_model(para_cyto, s) p1 &lt;- dplyr::bind_cols(s, data.frame(p1)) names(p1) &lt;- c(&quot;logc&quot;, &quot;pred&quot;) g &lt;- g + geom_line( data = p1, aes(x = logc, y = pred), size = 2, alpha = 0.9, color = &quot;#e02929&quot; ) #plot the vertical line at 3bmad cutoff #g &lt;- g+ geom_vline(xintercept = log_abs_ec(para_cyto, 3*m_toxi$bmad) ) } #test and plot raiu model if (!is.na(m_prim$hill) &amp; m_prim$hill == 1) { para_raiu &lt;- c(m_prim$hill_tp, m_prim$hill_ga, m_prim$hill_gw) p2 &lt;- 100 - hill_model(para_raiu, s) p2 &lt;- bind_cols(s, data.frame(p2)) names(p2) &lt;- c(&quot;logc&quot;, &quot;pred&quot;) g &lt;- g + geom_line( data = p2, aes(x = logc, y = pred), size = 2, alpha = 0.9, color = &quot;#377eb8&quot; ) } #draw 3bmad cutoff line for cytotox and raiu respectively g &lt;- g + geom_hline( yintercept = 100 - cutoff_toxi, alpha = 0.5, size = 0.5, linetype = &quot;dashed&quot;, color = &quot;#e02929&quot; ) g &lt;- g + geom_hline( yintercept = 100 - cutoff_prim, alpha = 0.5, size = 0.5, linetype = &quot;dashed&quot;, color = &quot;#377eb8&quot; ) #plot data points #aesthetics fixes g &lt;- g + geom_point( aes(color = assay), shape = 21, alpha = 0.9, size = 3 ) + coord_fixed( ylim = c(0, 125), xlim = c(-9, -4), ratio = 2 / 70 #used to be 2/70, when x axis was from -9 to -4. ) + scale_y_continuous(breaks = seq( from = 0, to = 120, by = 20 )) + scale_x_continuous(breaks = seq( from = lb, to = rb, by = 1 )) + theme_few() + theme(axis.title.x = element_blank()) + theme(axis.title.y = element_blank()) + theme(legend.title = element_blank(), legend.position = &quot;none&quot;) + theme(legend.margin=unit(0, &quot;null&quot;)) + scale_color_manual(values=c(&quot;#e02929&quot;, &quot;#377eb8&quot;))+ theme(plot.title=element_text(hjust=0.5, size = 16)) ##adding annotations if (!is.null(rank_table) &amp; notation == TRUE) { #Get ec and ranking info ds &lt;- rank_table %&gt;% dplyr::filter(spid==.spid) ds &lt;- round_df(ds, digits=2) #annotate with text info # line1 &lt;- paste(&quot;Ranking_Score:&quot;, ds$ranking_score) # line2 &lt;- paste(&quot;TAA:&quot;, ds$taa) # line3 &lt;- paste(&quot;Med_Diff:&quot;, ds$med_diff) line4 &lt;- paste(assay_info$prim_assay, &quot;_AC50: &quot;, ds$logAC50_prim, sep = &quot;&quot;) line5 &lt;- paste(assay_info$prim_assay, &quot;_absEC50: &quot;, ds$absEC50_prim, sep = &quot;&quot;) # line6 &lt;- paste(assay_info$prim_assay, &quot;_absEC80: &quot;, ds$absEC80_prim, sep = &quot;&quot;) g &lt;- g + # annotate(&quot;text&quot;, x= lb + 0.8, y = 30, alpha = 0.8, hjust=0, label=line1) + # annotate(&quot;text&quot;, x= lb + 0.8, y = 25, alpha = 0.8, hjust=0, label= line2) + # annotate(&quot;text&quot;, x= lb + 0.8, y = 20, alpha = 0.8, hjust=0, label= line3) + annotate(&quot;text&quot;, x= lb + 0.8, y = 25, alpha = 0.8, hjust=0, label= line4) + annotate(&quot;text&quot;, x= lb + 0.8, y = 10, alpha = 0.8, hjust=0, label= line5) # annotate(&quot;text&quot;, x= lb + 0.8, y = 5, alpha = 0.8, hjust=0, label= line6) } #collect all plots into a list plot_list[[i]] &lt;- g } return(plot_list) } #utility functions # ----------------------------------------------------------- # save all ggplot plot object as separate pages in a pdf file # ----------------------------------------------------------- #&#39; save plots in pdf #&#39; #&#39; save ggplot2 plots generated in a list to a pdf file #&#39; #&#39; @param plot_list the r list object contains all ggplot2 objects #&#39; @param filename the output file name, including the file directory #&#39; #&#39; @export #&#39; save_plot_pdf &lt;- function(plot_list, filename) { pdf(filename) cat(&quot;Preparing file...\\n&quot;) invisible(lapply(plot_list, print)) dev.off() cat(&quot;Finished!&quot;) } # --------------------------------------------------------------- # function to search numerical cols and round to specified digits # --------------------------------------------------------------- #&#39; round digits of numbers #&#39; #&#39; round numbers in a datafram to specified digits #&#39; #&#39; @param df the dataframe input #&#39; @param digits the specified number of digits #&#39; @return a dataframe #&#39; #&#39; round_df &lt;- function(df, digits) { nums &lt;- vapply(df, is.numeric, FUN.VALUE = logical(1)) df[,nums] &lt;- round(df[,nums], digits = digits) df } # ----------------------------------------------------- # function to scale dataset from 0 to 100 # ----------------------------------------------------- rescale_0_100 &lt;- function(x) { y &lt;- scale(x, center=min(x, na.rm=T), scale=diff(range(x, na.rm=T))) as.vector(y) *100 } # ----------------------------------------------------- # function to generate index for concentrations # ----------------------------------------------------- ## both are targeting unique(x), &#39;match&#39; provide the position of each x value on the list of unique(x), ## while &#39;rank&#39; provide the ordering index that is exported for each component of unique(x) generate_index &lt;- function(x) { uls &lt;- unique(x) index &lt;- rank(uls)[match(x, uls)] return(as.integer(index)) } "]
]
